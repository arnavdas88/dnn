// -----------------------------------------------------------------------
// <copyright file="BitUtils.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 9/11/2018 11:37:41 AM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core
{
    using System;
	using System.Diagnostics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;

    /// <summary>
    /// Provides bit manipulation methods for 32- and 64-bit little-endian architecture.
    /// </summary>
    [CLSCompliant(false)]
    public static class BitUtils
    {

        /// <summary>
        /// The first bit.
        /// </summary>
        public const uint LSB32 = 1;

        /// <summary>
        /// The first bit.
        /// </summary>
        public const ulong LSB64 = 1;

        /// <summary>
        /// Examines the bit at the specified position.
        /// </summary>
        /// <param name="bits">The bits to examine.</param>
        /// <param name="position">The bit position to test.</param>
        /// <returns>
        /// <b>true</b> if the bit at the specified position is set; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool TestBit(uint bits, int position)
        {
            Debug.Assert(position < 32, "The bit position must be less than 32.");
            return (bits & (BitUtils.LSB32 << position)) != 0;
        }

        /// <summary>
        /// Sets the bit at the specified position.
        /// </summary>
        /// <param name="bits">The bits to set.</param>
        /// <param name="position">The bit position to set.</param>
        /// <returns>The changed bits.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint SetBit(uint bits, int position)
        {
            Debug.Assert(position < 32, "The bit position must be less than 32.");
            return bits | (BitUtils.LSB32 << position);
        }

        /// <summary>
        /// Resets the bit at the specified position.
        /// </summary>
        /// <param name="bits">The bits to reset.</param>
        /// <param name="position">The bit position to reset.</param>
        /// <returns>The changed bits.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint ResetBit(uint bits, int position)
        {
            Debug.Assert(position < 32, "The bit position must be less than 32.");
            return bits & ~(BitUtils.LSB32 << position);
        }

        /// <summary>
        /// Examines the bit at the specified position in the the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="bits">The bits to examine.</param>
        /// <param name="position">The bit position to test.</param>
        /// <returns>
        /// <b>true</b> if the bit at the specified position is set; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool TestBit(uint[] bits, int position)
        {
            return (bits[position >> 5] & (BitUtils.LSB32 << (position & 31))) != 0;
        }

        /// <summary>
        /// Sets the bit at the specified position in the the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="bits">The bits to reset.</param>
        /// <param name="position">The bit position to reset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetBit(uint[] bits, int position)
        {
            bits[position >> 5] |= BitUtils.LSB32 << (position & 31);
        }

        /// <summary>
        /// Resets the bit at the specified position in the the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="bits">The bits to reset.</param>
        /// <param name="position">The bit position to reset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ResetBit(uint[] bits, int position)
        {
            bits[position >> 5] &= ~(BitUtils.LSB32 << (position & 31));
        }

        /// <summary>
        /// Sets the range bits at the specified starting position in the the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="count">The number of bits to set.</param>
        /// <param name="bits">The bits to set.</param>
        /// <param name="position">The starting bit position to set.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetBits(int count, uint[] bits, int position)
        {
            NativeMethods.bits_set_32(count, bits, position);
        }

        /// <summary>
        /// Resets the range bits at the specified starting position in the the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="count">The number of bits to reset.</param>
        /// <param name="bits">The bits to reset.</param>
        /// <param name="position">The starting bit position to reset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ResetBits(int count, uint[] bits, int position)
        {
            NativeMethods.bits_reset_32(count, bits, position);
        }

        /// <summary>
        /// Gets the specified number of bits at the specified position.
        /// </summary>
        /// <param name="bits">The bits to examine.</param>
        /// <param name="position">The bits index; in the range of 0 - 31.</param>
        /// <param name="count">The number of bits to get.</param>
        /// <returns>
        /// The value at the index specified.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint GetBits(uint bits, int position, int count)
        {
            Debug.Assert(position + count <= 32, "The position+count must be less than or equal to 32.");
            return (bits >> position) & ~(uint.MaxValue << count);
        }

        /// <summary>
        /// Sets the specified number of bits at the specified position.
        /// </summary>
        /// <param name="bits">The bits to set.</param>
        /// <param name="position">The bits index; in the range of 0 - 31.</param>
        /// <param name="count">The number of bits to set.</param>
        /// <returns>The changed bits.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint SetBits(uint bits, int position, int count)
        {
            Debug.Assert(position + count <= 32, "The position+count must be less than or equal to 32.");
            uint mask = position + count == 32 ?
                uint.MaxValue << position :
                (uint.MaxValue << position) & ~(uint.MaxValue << (position + count));
            return bits | mask;
        }

        /// <summary>
        /// Copies the specified number of bits to the specified position.
        /// </summary>
        /// <param name="bits">The bits to set.</param>
        /// <param name="position">The bits index; in the range of 0 - 31.</param>
        /// <param name="count">The number of bits to set.</param>
        /// <param name="source">The bits to copy.</param>
        /// <returns>The changed bits.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint CopyBits(uint bits, int position, int count, uint source)
        {
            Debug.Assert(position + count <= 32, "The position+count must be less than or equal to 32.");
            uint mask = position + count == 32 ?
                uint.MaxValue << position :
                (uint.MaxValue << position) & ~(uint.MaxValue << (position + count));
            return (bits & ~mask) | ((source << position) & mask);
        }

        /// <summary>
        /// Copies the range of bits from a source array of 32-bit unsigned integers at the specified position
        /// to the destination array at the specified position.
        /// </summary>
        /// <param name="count">The number of bits to copy.</param>
        /// <param name="x">The bits to copy from.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The bits to copy to.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void CopyBits(int count, uint[] x, int posx, uint[] y, int posy)
        {
            NativeMethods.bits_copy_32(count, x, posx, y, posy);
        }

        /// <summary>
        /// Searches the value for a first set bit (1).
        /// </summary>
        /// <param name="bits">The bits to search.</param>
        /// <returns>
        /// The bit position of the first set bit (1) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanOneForward(uint bits)
        {
            return NativeMethods.bit_scan_forward_32(bits);
        }

        /// <summary>
        /// Searches the value for a last set bit (1).
        /// </summary>
        /// <param name="bits">The bits to search.</param>
        /// <returns>
        /// The bit position of the last set bit (1) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanOneReverse(uint bits)
        {
            return NativeMethods.bit_scan_reverse_32(bits);
        }

        /// <summary>
        /// Searches the array of 32-bit unsigned integers for a first set bit (1).
        /// </summary>
        /// <param name="count">The number of bits to search.</param>
        /// <param name="bits">The array that contains the data to search.</param>
        /// <param name="position">The starting bit position in <paramref name="bits"/>.</param>
        /// <returns>
        /// The bit position of the first set bit (1) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanOneForward(int count, uint[] bits, int position)
        {
            return NativeMethods.bits_scan_one_forward_32(count, bits, position);
        }

        /// <summary>
        /// Searches the array of 32-bit unsigned integers for a last set bit (1).
        /// </summary>
        /// <param name="count">The number of bits to search.</param>
        /// <param name="bits">The array that contains the data to search.</param>
        /// <param name="position">The starting bit position in <paramref name="bits"/>.</param>
        /// <returns>
        /// The bit position of the last set bit (1) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanOneReverse(int count, uint[] bits, int position)
        {
            return NativeMethods.bits_scan_one_reverse_32(count, bits, position);
        }

        /// <summary>
        /// Searches the array of 32-bit unsigned integers for a first reset bit (0).
        /// </summary>
        /// <param name="count">The number of bits to search.</param>
        /// <param name="bits">The array that contains the data to search.</param>
        /// <param name="position">The starting bit position in <paramref name="bits"/>.</param>
        /// <returns>
        /// The bit position of the first reset bit (0) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanZeroForward(int count, uint[] bits, int position)
        {
            return NativeMethods.bits_scan_zero_forward_32(count, bits, position);
        }

        /// <summary>
        /// Searches the array of 32-bit unsigned integers for a last reset bit (0).
        /// </summary>
        /// <param name="count">The number of values to search.</param>
        /// <param name="bits">The array that contains the data to search.</param>
        /// <param name="position">The starting bit position in <paramref name="bits"/>.</param>
        /// <returns>
        /// The bit position of the last reset bit (0) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanZeroReverse(int count, uint[] bits, int position)
        {
            return NativeMethods.bits_scan_zero_reverse_32(count, bits, position);
        }

        /// <summary>
        /// Counts the number of one bits (population count).
        /// </summary>
        /// <param name="bits">The bits to count.</param>
        /// <returns>
        /// The number of one bits.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int CountOneBits(uint bits)
        {
            return (int)NativeMethods.bits_popcount_32(bits);
        }

        /// <summary>
        /// Counts the number of zero bits (population count).
        /// </summary>
        /// <param name="bits">The bits to count.</param>
        /// <returns>
        /// The number of zero bits.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int CountZeroBits(uint bits)
        {
            return 32 - BitUtils.CountOneBits(bits);
        }

        /// <summary>
        /// Counts the number of one bits (population count) in the array of 32-bit unsigned integers starting at the specified position.
        /// </summary>
        /// <param name="count">The number of bits to examine.</param>
        /// <param name="bits">The bits to count.</param>
        /// <param name="position">The starting bit position to count.</param>
        /// <returns>
        /// The number of one bits.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int CountOneBits(int count, uint[] bits, int position)
        {
            return (int)NativeMethods.bits_count_32(count, bits, position);
        }

        /// <summary>
        /// Counts the number of zero bits (population count) in the array of 32-bit unsigned integers starting at the specified position.
        /// </summary>
        /// <param name="count">The number of bits to examine.</param>
        /// <param name="bits">The bits to count.</param>
        /// <param name="position">The starting bit position to count.</param>
        /// <returns>
        /// The number of zero bits.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int CountZeroBits(int count, uint[] bits, int position)
        {
            return count - BitUtils.CountOneBits(count, bits, position);
        }

        /// <summary>
        /// Performs logical OR operation on two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="count">The number of bits to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Or(int count, uint[] x, int posx, uint[] y, int posy)
        {
            NativeMethods.bits_or_32(count, x, posx, y, posy);
        }

        /// <summary>
        /// Performs logical AND operation on two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="count">The number of bits to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void And(int count, uint[] x, int posx, uint[] y, int posy)
        {
            NativeMethods.bits_and_32(count, x, posx, y, posy);
        }

        /// <summary>
        /// Performs logical XOR operation on two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="count">The number of bits to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xor(int count, uint[] x, int posx, uint[] y, int posy)
        {
            NativeMethods.bits_xor_32(count, x, posx, y, posy);
        }

        /// <summary>
        /// Performs logical XAND (A AND NOT B) operation on two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="count">The number of bits to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xand(int count, uint[] x, int posx, uint[] y, int posy)
        {
            NativeMethods.bits_xand_32(count, x, posx, y, posy);
        }

        /// <summary>
        /// Reverses the order of bytes in a 32-bit unsigned integer.
        /// </summary>
        /// <param name="bits">The integer to reverse byte order.</param>
        /// <returns>
        /// The integer with a reversed bytes.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint BiteSwap(uint bits)
        {
            return NativeMethods.byteswap_32(bits);
        }

        /// <summary>
        /// Reverses the order of bytes in an array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="xy">The source and destination array.</param>
        /// <param name="offxy">The starting element position in <paramref name="xy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BiteSwap(int length, uint[] xy, int offxy)
        {
            NativeMethods.bytesswap_ip_32(length, xy, offxy);
        }

        /// <summary>
        /// Reverses the order of bytes in an array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BiteSwap(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.bytesswap_32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Reverses the order of groups of bits in each byte an array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="bitCount">The number of bits in a group (1, 2, or 4).</param>
        /// <param name="xy">The source and destination array.</param>
        /// <param name="offxy">The starting element position in <paramref name="xy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BitSwap(int length, int bitCount, uint[] xy, int offxy)
        {
            NativeMethods.bits_reverse_ip_32(length, bitCount, xy, offxy);
        }

        /// <summary>
        /// Reverses the order of groups of bits in each byte an array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="bitCount">The number of bits in a group (1, 2, or 4).</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BitSwap(int length, int bitCount, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.bits_reverse_32(length, bitCount, x, offx, y, offy);
        }

        /// <summary>
        /// Examines the bit at the specified position.
        /// </summary>
        /// <param name="bits">The bits to examine.</param>
        /// <param name="position">The bit position to test.</param>
        /// <returns>
        /// <b>true</b> if the bit at the specified position is set; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool TestBit(ulong bits, int position)
        {
            Debug.Assert(position < 64, "The bit position must be less than 64.");
            return (bits & (BitUtils.LSB64 << position)) != 0;
        }

        /// <summary>
        /// Sets the bit at the specified position.
        /// </summary>
        /// <param name="bits">The bits to set.</param>
        /// <param name="position">The bit position to set.</param>
        /// <returns>The changed bits.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong SetBit(ulong bits, int position)
        {
            Debug.Assert(position < 64, "The bit position must be less than 64.");
            return bits | (BitUtils.LSB64 << position);
        }

        /// <summary>
        /// Resets the bit at the specified position.
        /// </summary>
        /// <param name="bits">The bits to reset.</param>
        /// <param name="position">The bit position to reset.</param>
        /// <returns>The changed bits.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong ResetBit(ulong bits, int position)
        {
            Debug.Assert(position < 64, "The bit position must be less than 64.");
            return bits & ~(BitUtils.LSB64 << position);
        }

        /// <summary>
        /// Examines the bit at the specified position in the the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="bits">The bits to examine.</param>
        /// <param name="position">The bit position to test.</param>
        /// <returns>
        /// <b>true</b> if the bit at the specified position is set; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool TestBit(ulong[] bits, int position)
        {
            return (bits[position >> 6] & (BitUtils.LSB64 << (position & 63))) != 0;
        }

        /// <summary>
        /// Sets the bit at the specified position in the the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="bits">The bits to reset.</param>
        /// <param name="position">The bit position to reset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetBit(ulong[] bits, int position)
        {
            bits[position >> 6] |= BitUtils.LSB64 << (position & 63);
        }

        /// <summary>
        /// Resets the bit at the specified position in the the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="bits">The bits to reset.</param>
        /// <param name="position">The bit position to reset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ResetBit(ulong[] bits, int position)
        {
            bits[position >> 6] &= ~(BitUtils.LSB64 << (position & 63));
        }

        /// <summary>
        /// Sets the range bits at the specified starting position in the the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="count">The number of bits to set.</param>
        /// <param name="bits">The bits to set.</param>
        /// <param name="position">The starting bit position to set.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SetBits(int count, ulong[] bits, int position)
        {
            NativeMethods.bits_set_64(count, bits, position);
        }

        /// <summary>
        /// Resets the range bits at the specified starting position in the the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="count">The number of bits to reset.</param>
        /// <param name="bits">The bits to reset.</param>
        /// <param name="position">The starting bit position to reset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ResetBits(int count, ulong[] bits, int position)
        {
            NativeMethods.bits_reset_64(count, bits, position);
        }

        /// <summary>
        /// Gets the specified number of bits at the specified position.
        /// </summary>
        /// <param name="bits">The bits to examine.</param>
        /// <param name="position">The bits index; in the range of 0 - 63.</param>
        /// <param name="count">The number of bits to get.</param>
        /// <returns>
        /// The value at the index specified.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong GetBits(ulong bits, int position, int count)
        {
            Debug.Assert(position + count <= 64, "The position+count must be less than or equal to 64.");
            return (bits >> position) & ~(ulong.MaxValue << count);
        }

        /// <summary>
        /// Sets the specified number of bits at the specified position.
        /// </summary>
        /// <param name="bits">The bits to set.</param>
        /// <param name="position">The bits index; in the range of 0 - 63.</param>
        /// <param name="count">The number of bits to set.</param>
        /// <returns>The changed bits.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong SetBits(ulong bits, int position, int count)
        {
            Debug.Assert(position + count <= 64, "The position+count must be less than or equal to 64.");
            ulong mask = position + count == 64 ?
                ulong.MaxValue << position :
                (ulong.MaxValue << position) & ~(ulong.MaxValue << (position + count));
            return bits | mask;
        }

        /// <summary>
        /// Copies the specified number of bits to the specified position.
        /// </summary>
        /// <param name="bits">The bits to set.</param>
        /// <param name="position">The bits index; in the range of 0 - 63.</param>
        /// <param name="count">The number of bits to set.</param>
        /// <param name="source">The bits to copy.</param>
        /// <returns>The changed bits.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong CopyBits(ulong bits, int position, int count, ulong source)
        {
            Debug.Assert(position + count <= 64, "The position+count must be less than or equal to 64.");
            ulong mask = position + count == 64 ?
                ulong.MaxValue << position :
                (ulong.MaxValue << position) & ~(ulong.MaxValue << (position + count));
            return (bits & ~mask) | ((source << position) & mask);
        }

        /// <summary>
        /// Copies the range of bits from a source array of 64-bit unsigned integers at the specified position
        /// to the destination array at the specified position.
        /// </summary>
        /// <param name="count">The number of bits to copy.</param>
        /// <param name="x">The bits to copy from.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The bits to copy to.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void CopyBits(int count, ulong[] x, int posx, ulong[] y, int posy)
        {
            NativeMethods.bits_copy_64(count, x, posx, y, posy);
        }

        /// <summary>
        /// Searches the value for a first set bit (1).
        /// </summary>
        /// <param name="bits">The bits to search.</param>
        /// <returns>
        /// The bit position of the first set bit (1) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanOneForward(ulong bits)
        {
            return NativeMethods.bit_scan_forward_64(bits);
        }

        /// <summary>
        /// Searches the value for a last set bit (1).
        /// </summary>
        /// <param name="bits">The bits to search.</param>
        /// <returns>
        /// The bit position of the last set bit (1) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanOneReverse(ulong bits)
        {
            return NativeMethods.bit_scan_reverse_64(bits);
        }

        /// <summary>
        /// Searches the array of 64-bit unsigned integers for a first set bit (1).
        /// </summary>
        /// <param name="count">The number of bits to search.</param>
        /// <param name="bits">The array that contains the data to search.</param>
        /// <param name="position">The starting bit position in <paramref name="bits"/>.</param>
        /// <returns>
        /// The bit position of the first set bit (1) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanOneForward(int count, ulong[] bits, int position)
        {
            return NativeMethods.bits_scan_one_forward_64(count, bits, position);
        }

        /// <summary>
        /// Searches the array of 64-bit unsigned integers for a last set bit (1).
        /// </summary>
        /// <param name="count">The number of bits to search.</param>
        /// <param name="bits">The array that contains the data to search.</param>
        /// <param name="position">The starting bit position in <paramref name="bits"/>.</param>
        /// <returns>
        /// The bit position of the last set bit (1) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanOneReverse(int count, ulong[] bits, int position)
        {
            return NativeMethods.bits_scan_one_reverse_64(count, bits, position);
        }

        /// <summary>
        /// Searches the array of 64-bit unsigned integers for a first reset bit (0).
        /// </summary>
        /// <param name="count">The number of bits to search.</param>
        /// <param name="bits">The array that contains the data to search.</param>
        /// <param name="position">The starting bit position in <paramref name="bits"/>.</param>
        /// <returns>
        /// The bit position of the first reset bit (0) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanZeroForward(int count, ulong[] bits, int position)
        {
            return NativeMethods.bits_scan_zero_forward_64(count, bits, position);
        }

        /// <summary>
        /// Searches the array of 64-bit unsigned integers for a last reset bit (0).
        /// </summary>
        /// <param name="count">The number of values to search.</param>
        /// <param name="bits">The array that contains the data to search.</param>
        /// <param name="position">The starting bit position in <paramref name="bits"/>.</param>
        /// <returns>
        /// The bit position of the last reset bit (0) found.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int BitScanZeroReverse(int count, ulong[] bits, int position)
        {
            return NativeMethods.bits_scan_zero_reverse_64(count, bits, position);
        }

        /// <summary>
        /// Counts the number of one bits (population count).
        /// </summary>
        /// <param name="bits">The bits to count.</param>
        /// <returns>
        /// The number of one bits.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int CountOneBits(ulong bits)
        {
            return (int)NativeMethods.bits_popcount_64(bits);
        }

        /// <summary>
        /// Counts the number of zero bits (population count).
        /// </summary>
        /// <param name="bits">The bits to count.</param>
        /// <returns>
        /// The number of zero bits.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int CountZeroBits(ulong bits)
        {
            return 64 - BitUtils.CountOneBits(bits);
        }

        /// <summary>
        /// Counts the number of one bits (population count) in the array of 64-bit unsigned integers starting at the specified position.
        /// </summary>
        /// <param name="count">The number of bits to examine.</param>
        /// <param name="bits">The bits to count.</param>
        /// <param name="position">The starting bit position to count.</param>
        /// <returns>
        /// The number of one bits.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int CountOneBits(int count, ulong[] bits, int position)
        {
            return (int)NativeMethods.bits_count_64(count, bits, position);
        }

        /// <summary>
        /// Counts the number of zero bits (population count) in the array of 64-bit unsigned integers starting at the specified position.
        /// </summary>
        /// <param name="count">The number of bits to examine.</param>
        /// <param name="bits">The bits to count.</param>
        /// <param name="position">The starting bit position to count.</param>
        /// <returns>
        /// The number of zero bits.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int CountZeroBits(int count, ulong[] bits, int position)
        {
            return count - BitUtils.CountOneBits(count, bits, position);
        }

        /// <summary>
        /// Performs logical OR operation on two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="count">The number of bits to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Or(int count, ulong[] x, int posx, ulong[] y, int posy)
        {
            NativeMethods.bits_or_64(count, x, posx, y, posy);
        }

        /// <summary>
        /// Performs logical AND operation on two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="count">The number of bits to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void And(int count, ulong[] x, int posx, ulong[] y, int posy)
        {
            NativeMethods.bits_and_64(count, x, posx, y, posy);
        }

        /// <summary>
        /// Performs logical XOR operation on two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="count">The number of bits to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xor(int count, ulong[] x, int posx, ulong[] y, int posy)
        {
            NativeMethods.bits_xor_64(count, x, posx, y, posy);
        }

        /// <summary>
        /// Performs logical XAND (A AND NOT B) operation on two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="count">The number of bits to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="posx">The starting bit position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="posy">The starting bit position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xand(int count, ulong[] x, int posx, ulong[] y, int posy)
        {
            NativeMethods.bits_xand_64(count, x, posx, y, posy);
        }

        /// <summary>
        /// Reverses the order of bytes in a 64-bit unsigned integer.
        /// </summary>
        /// <param name="bits">The integer to reverse byte order.</param>
        /// <returns>
        /// The integer with a reversed bytes.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong BiteSwap(ulong bits)
        {
            return NativeMethods.byteswap_64(bits);
        }

        /// <summary>
        /// Reverses the order of bytes in an array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="xy">The source and destination array.</param>
        /// <param name="offxy">The starting element position in <paramref name="xy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BiteSwap(int length, ulong[] xy, int offxy)
        {
            NativeMethods.bytesswap_ip_64(length, xy, offxy);
        }

        /// <summary>
        /// Reverses the order of bytes in an array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BiteSwap(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.bytesswap_64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Reverses the order of groups of bits in each byte an array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="bitCount">The number of bits in a group (1, 2, or 4).</param>
        /// <param name="xy">The source and destination array.</param>
        /// <param name="offxy">The starting element position in <paramref name="xy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BitSwap(int length, int bitCount, ulong[] xy, int offxy)
        {
            NativeMethods.bits_reverse_ip_64(length, bitCount, xy, offxy);
        }

        /// <summary>
        /// Reverses the order of groups of bits in each byte an array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="bitCount">The number of bits in a group (1, 2, or 4).</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void BitSwap(int length, int bitCount, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.bits_reverse_64(length, bitCount, x, offx, y, offy);
        }
        [SuppressUnmanagedCodeSecurity]
        private static class NativeMethods
        {
            private const string DllName = "Genix.Core.Native.dll";

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_set_32(int count, [In, Out] uint[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_reset_32(int count, [In, Out] uint[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_copy_32(int count, [In] uint[] x, int posx, [Out] uint[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern int bit_scan_forward_32(uint bits);

            [DllImport(NativeMethods.DllName)]
            public static extern int bit_scan_reverse_32(uint bits);

            [DllImport(NativeMethods.DllName)]
            public static extern int bits_scan_one_forward_32(int count, uint[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern int bits_scan_one_reverse_32(int count, uint[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern int bits_scan_zero_forward_32(int count, uint[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern int bits_scan_zero_reverse_32(int count, uint[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern uint bits_popcount_32(uint bits);

            [DllImport(NativeMethods.DllName)]
            public static extern uint bits_count_32(int count, [In] uint[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_or_32(int count, [In] uint[] x, int posx, [Out] uint[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_and_32(int count, [In] uint[] x, int posx, [Out] uint[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_xor_32(int count, [In] uint[] x, int posx, [Out] uint[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_xand_32(int count, [In] uint[] x, int posx, [Out] uint[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern uint byteswap_32(uint bits);

            [DllImport(NativeMethods.DllName)]
            public static extern void bytesswap_ip_32(int n, [In, Out] uint[] xy, int offxy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bytesswap_32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_reverse_32(int length, int bitCount, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_reverse_ip_32(int length, int bitCount, [In, Out] uint[] xy, int offxy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_set_64(int count, [In, Out] ulong[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_reset_64(int count, [In, Out] ulong[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_copy_64(int count, [In] ulong[] x, int posx, [Out] ulong[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern int bit_scan_forward_64(ulong bits);

            [DllImport(NativeMethods.DllName)]
            public static extern int bit_scan_reverse_64(ulong bits);

            [DllImport(NativeMethods.DllName)]
            public static extern int bits_scan_one_forward_64(int count, ulong[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern int bits_scan_one_reverse_64(int count, ulong[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern int bits_scan_zero_forward_64(int count, ulong[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern int bits_scan_zero_reverse_64(int count, ulong[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern ulong bits_popcount_64(ulong bits);

            [DllImport(NativeMethods.DllName)]
            public static extern ulong bits_count_64(int count, [In] ulong[] bits, int pos);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_or_64(int count, [In] ulong[] x, int posx, [Out] ulong[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_and_64(int count, [In] ulong[] x, int posx, [Out] ulong[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_xor_64(int count, [In] ulong[] x, int posx, [Out] ulong[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_xand_64(int count, [In] ulong[] x, int posx, [Out] ulong[] y, int posy);

            [DllImport(NativeMethods.DllName)]
            public static extern ulong byteswap_64(ulong bits);

            [DllImport(NativeMethods.DllName)]
            public static extern void bytesswap_ip_64(int n, [In, Out] ulong[] xy, int offxy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bytesswap_64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_reverse_64(int length, int bitCount, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void bits_reverse_ip_64(int length, int bitCount, [In, Out] ulong[] xy, int offxy);
        }
    }
}