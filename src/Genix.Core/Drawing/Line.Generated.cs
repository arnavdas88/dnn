// -----------------------------------------------------------------------
// <copyright file="Line.tt" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 10/27/2018 6:12:26 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Drawing
{
    using System;
    using System.Globalization;
    using System.Runtime.CompilerServices;

    /// <summary>
    /// Represents a line in a two-dimensional plane described by two <see cref="Point"/> objects.
    /// </summary>
    /// <remarks>
    /// <para>The line is defined by the equation: <c>y = a * x + b</c>.</para>
    /// </remarks>
    public struct Line
        : IEquatable<Line>
    {
        /// <summary>
        /// Epsilon used in rounding operations.
        /// </summary>
        private const double Eps = 1e-8;

        /// <summary>
        /// The x-coordinate of the first point.
        /// </summary>
        private int x1;

        /// <summary>
        /// The y-coordinate of the first point.
        /// </summary>
        private int y1;

        /// <summary>
        /// The x-coordinate of the second point.
        /// </summary>
        private int x2;

        /// <summary>
        /// The y-coordinate of the second point.
        /// </summary>
        private int y2;

        /// <summary>
        /// Initializes a new instance of the <see cref="Line"/> struct
        /// that has the specified x-coordinate and y-coordinate of two points.
        /// </summary>
        /// <param name="x1">The x-coordinate of the first point.</param>
        /// <param name="y1">The y-coordinate of the first point.</param>
        /// <param name="x2">The x-coordinate of the second point.</param>
        /// <param name="y2">The y-coordinate of the second point.</param>
        /// <exception cref="ArgumentException">
        /// <paramref name="x1"/> equals <paramref name="x2"/> and <paramref name="y1"/> equals <paramref name="y2"/>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Line(int x1, int y1, int x2, int y2)
        {
            if (x1 == x2 && y1 == y2)
            {
                throw new ArgumentException("The line must be defined by two points.");
            }

            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Line"/> struct
        /// that has the specified coordinates of two points.
        /// </summary>
        /// <param name="point1">The coordinates of the first point.</param>
        /// <param name="point2">The coordinates of the second point.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Line(Point point1, Point point2)
            : this(point1.X, point1.Y, point2.X, point2.Y)
        {
        }

        /// <summary>
        /// Gets or sets the x-coordinate of the first point.
        /// </summary>
        /// <value>
        /// The x-coordinate of the first point.
        /// </value>
        public int X1
        {
            get => this.x1;
            set => this.x1 = value;
        }

        /// <summary>
        /// Gets or sets the y-coordinate of the first point.
        /// </summary>
        /// <value>
        /// The y-coordinate of the first point.
        /// </value>
        public int Y1
        {
            get => this.y1;
            set => this.y1 = value;
        }

        /// <summary>
        /// Gets or sets the x-coordinate of the second point.
        /// </summary>
        /// <value>
        /// The x-coordinate of the second point.
        /// </value>
        public int X2
        {
            get => this.x2;
            set => this.x2 = value;
        }

        /// <summary>
        /// Gets or sets the y-coordinate of the second point.
        /// </summary>
        /// <value>
        /// The y-coordinate of the second point.
        /// </value>
        public int Y2
        {
            get => this.y2;
            set => this.y2 = value;
        }

        /// <summary>
        /// Gets the slope of this <see cref="Line"/>.
        /// </summary>
        /// <value>
        /// (<see cref="Y2"/> - <see cref="Y1"/>) / (<see cref="X2"/> - <see cref="X1"/>); <see cref="double.PositiveInfinity"/> if <see cref="X2"/> equals <see cref="X1"/>.
        /// </value>
        public double Slope => this.IsVertical ? double.PositiveInfinity : (double)(this.y2 - this.y1) / (this.x2 - this.x1);

        /// <summary>
        /// Gets a value indicating whether this <see cref="Line"/> is a vertical line.
        /// </summary>
        /// <value>
        /// <b>true</b> if this <see cref="Line"/> is a vertical line; otherwise, <b>false</b>.
        /// </value>
        public bool IsVertical =>
            this.x1 == this.x2;

        /// <summary>
        /// Gets a value indicating whether this <see cref="Line"/> is a horizontal line.
        /// </summary>
        /// <value>
        /// <b>true</b> if this <see cref="Line"/> is a horizontal line; otherwise, <b>false</b>.
        /// </value>
        public bool IsHorizontal =>
            this.y1 == this.y2;

        /// <summary>
        /// Compares two <see cref="Line"/> objects.
        /// The result specifies whether the values of the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> properties of the two <see cref="Line"/> objects are equal.
        /// </summary>
        /// <param name="left">The <see cref="Line"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="Line"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(Line left, Line right) => left.Equals(right);

        /// <summary>
        /// Compares two <see cref="Line"/> objects.
        /// The result specifies whether the values of the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> properties of the two <see cref="Line"/> objects are unequal.
        /// </summary>
        /// <param name="left">The <see cref="Line"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="Line"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values of either <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, or <see cref="Y2"/> properties of <paramref name="left"/> and <paramref name="right"/> are unequal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(Line left, Line right) => !left.Equals(right);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Line other) =>
            other.x1 == this.x1 &&
            other.y1 == this.y1 &&
            other.x2 == this.x2 &&
            other.y2 == this.y2;

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object obj) => obj is Line line && this.Equals(line);

        /// <inheritdoc />
        public override int GetHashCode() => unchecked((int)this.x1 ^ (int)this.y1 ^ (int)this.x2 ^ (int)this.y2);

        /// <inheritdoc />
        public override string ToString() =>
            this.x1.ToString(CultureInfo.CurrentCulture) + " " +
            this.y1.ToString(CultureInfo.CurrentCulture) + " " +
            this.x2.ToString(CultureInfo.CurrentCulture) + " " +
            this.y2.ToString(CultureInfo.CurrentCulture);

        /// <summary>
        /// Computes the y-coordinate of the point using specified x-coordinate.
        /// </summary>
        /// <param name="x">The x-coordinate of the point.</param>
        /// <returns>
        /// The computed y-coordinate.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot compute y-coordinate of the point for the vertical line.</para>
        /// </exception>
        public int Y(int x)
        {
            if (this.IsVertical)
            {
                throw new InvalidOperationException("Cannot compute y-coordinate of the point for the vertical line.");
            }

            return (((double)(x - this.x1) * (this.y2 - this.y1) / (this.x2 - this.x1)) + this.y1).Round();
        }

        /// <summary>
        /// Computes the x-coordinate of the point using specified y-coordinate.
        /// </summary>
        /// <param name="y">The y-coordinate of the point.</param>
        /// <returns>
        /// The computed x-coordinate.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="Y1"/> equals <see cref="Y2"/>; cannot compute x-coordinate of the point for the horizontal line.</para>
        /// </exception>
        public int X(int y)
        {
            if (this.IsHorizontal)
            {
                throw new InvalidOperationException("Cannot compute x-coordinate of the point for the horizontal line.");
            }

            return (((double)(y - this.y1) * (this.x2 - this.x1) / (this.y2 - this.y1)) + this.x1).Round();
        }

        /// <summary>
        /// Determines if the specified point is on this <see cref="Line"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the point defined by <paramref name="x"/> and <paramref name="y"/> is on this <see cref="Line"/>; otherwise, <b>false</b>.
        /// </returns>
        public bool Contains(int x, int y) =>
            this.x1 == this.x2 ? this.x1 == x : this.Y(x) == y;

        /// <summary>
        /// Determines if the specified <see cref="Point"/> is on this <see cref="Line"/>.
        /// </summary>
        /// <param name="point">The <see cref="Point"/> to test.</param>
        /// <returns>
        /// <b>true</b> if the <see cref="Point"/> represented by <paramref name="point"/> is on this <see cref="Line"/>; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Contains(Point point) => this.Contains(point.X, point.Y);

        /// <summary>
        /// Determines if the specified point is located above this <see cref="Line"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the specified point is located above this <see cref="Line"/>; otherwise, <b>false</b>.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot test the condition, the line is vertical.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsAbove(int x, int y) => y < this.Y(x);

        /// <summary>
        /// Determines if the specified point is located below this <see cref="Line"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the specified point is located below this <see cref="Line"/>; otherwise, <b>false</b>.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot text the condition, the line is vertical.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsBelow(int x, int y) => y > this.Y(x);
    }

    /// <summary>
    /// Represents a line in a two-dimensional plane described by two <see cref="PointF"/> objects.
    /// </summary>
    /// <remarks>
    /// <para>The line is defined by the equation: <c>y = a * x + b</c>.</para>
    /// </remarks>
    public struct LineF
        : IEquatable<LineF>
    {
        /// <summary>
        /// Epsilon used in rounding operations.
        /// </summary>
        private const float Eps = (float)1e-8;

        /// <summary>
        /// The x-coordinate of the first point.
        /// </summary>
        private float x1;

        /// <summary>
        /// The y-coordinate of the first point.
        /// </summary>
        private float y1;

        /// <summary>
        /// The x-coordinate of the second point.
        /// </summary>
        private float x2;

        /// <summary>
        /// The y-coordinate of the second point.
        /// </summary>
        private float y2;

        /// <summary>
        /// Initializes a new instance of the <see cref="LineF"/> struct
        /// that has the specified x-coordinate and y-coordinate of two points.
        /// </summary>
        /// <param name="x1">The x-coordinate of the first point.</param>
        /// <param name="y1">The y-coordinate of the first point.</param>
        /// <param name="x2">The x-coordinate of the second point.</param>
        /// <param name="y2">The y-coordinate of the second point.</param>
        /// <exception cref="ArgumentException">
        /// <paramref name="x1"/> equals <paramref name="x2"/> and <paramref name="y1"/> equals <paramref name="y2"/>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LineF(float x1, float y1, float x2, float y2)
        {
            if (LineF.AreEqual(x1, x2) && LineF.AreEqual(y1, y2))
            {
                throw new ArgumentException("The line must be defined by two points.");
            }

            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineF"/> struct
        /// that has the specified coordinates of two points.
        /// </summary>
        /// <param name="point1">The coordinates of the first point.</param>
        /// <param name="point2">The coordinates of the second point.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LineF(PointF point1, PointF point2)
            : this(point1.X, point1.Y, point2.X, point2.Y)
        {
        }

        /// <summary>
        /// Gets or sets the x-coordinate of the first point.
        /// </summary>
        /// <value>
        /// The x-coordinate of the first point.
        /// </value>
        public float X1
        {
            get => this.x1;
            set => this.x1 = value;
        }

        /// <summary>
        /// Gets or sets the y-coordinate of the first point.
        /// </summary>
        /// <value>
        /// The y-coordinate of the first point.
        /// </value>
        public float Y1
        {
            get => this.y1;
            set => this.y1 = value;
        }

        /// <summary>
        /// Gets or sets the x-coordinate of the second point.
        /// </summary>
        /// <value>
        /// The x-coordinate of the second point.
        /// </value>
        public float X2
        {
            get => this.x2;
            set => this.x2 = value;
        }

        /// <summary>
        /// Gets or sets the y-coordinate of the second point.
        /// </summary>
        /// <value>
        /// The y-coordinate of the second point.
        /// </value>
        public float Y2
        {
            get => this.y2;
            set => this.y2 = value;
        }

        /// <summary>
        /// Gets the slope of this <see cref="LineF"/>.
        /// </summary>
        /// <value>
        /// (<see cref="Y2"/> - <see cref="Y1"/>) / (<see cref="X2"/> - <see cref="X1"/>); <see cref="double.PositiveInfinity"/> if <see cref="X2"/> equals <see cref="X1"/>.
        /// </value>
        public double Slope => this.IsVertical ? double.PositiveInfinity : (double)(this.y2 - this.y1) / (this.x2 - this.x1);

        /// <summary>
        /// Gets a value indicating whether this <see cref="LineF"/> is a vertical line.
        /// </summary>
        /// <value>
        /// <b>true</b> if this <see cref="LineF"/> is a vertical line; otherwise, <b>false</b>.
        /// </value>
        public bool IsVertical =>
            LineF.AreEqual(this.x1, this.x2);

        /// <summary>
        /// Gets a value indicating whether this <see cref="LineF"/> is a horizontal line.
        /// </summary>
        /// <value>
        /// <b>true</b> if this <see cref="LineF"/> is a horizontal line; otherwise, <b>false</b>.
        /// </value>
        public bool IsHorizontal =>
            LineF.AreEqual(this.y1, this.y2);

        /// <summary>
        /// Compares two <see cref="LineF"/> objects.
        /// The result specifies whether the values of the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> properties of the two <see cref="LineF"/> objects are equal.
        /// </summary>
        /// <param name="left">The <see cref="LineF"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="LineF"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(LineF left, LineF right) => left.Equals(right);

        /// <summary>
        /// Compares two <see cref="LineF"/> objects.
        /// The result specifies whether the values of the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> properties of the two <see cref="LineF"/> objects are unequal.
        /// </summary>
        /// <param name="left">The <see cref="LineF"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="LineF"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values of either <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, or <see cref="Y2"/> properties of <paramref name="left"/> and <paramref name="right"/> are unequal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(LineF left, LineF right) => !left.Equals(right);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(LineF other) =>
            LineF.AreEqual(other.x1, this.x1) &&
            LineF.AreEqual(other.y1, this.y1) &&
            LineF.AreEqual(other.x2, this.x2) &&
            LineF.AreEqual(other.y2, this.y2);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object obj) => obj is LineF line && this.Equals(line);

        /// <inheritdoc />
        public override int GetHashCode() => unchecked((int)this.x1 ^ (int)this.y1 ^ (int)this.x2 ^ (int)this.y2);

        /// <inheritdoc />
        public override string ToString() =>
            this.x1.ToString(CultureInfo.CurrentCulture) + " " +
            this.y1.ToString(CultureInfo.CurrentCulture) + " " +
            this.x2.ToString(CultureInfo.CurrentCulture) + " " +
            this.y2.ToString(CultureInfo.CurrentCulture);

        /// <summary>
        /// Computes the y-coordinate of the point using specified x-coordinate.
        /// </summary>
        /// <param name="x">The x-coordinate of the point.</param>
        /// <returns>
        /// The computed y-coordinate.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot compute y-coordinate of the point for the vertical line.</para>
        /// </exception>
        public float Y(float x)
        {
            if (this.IsVertical)
            {
                throw new InvalidOperationException("Cannot compute y-coordinate of the point for the vertical line.");
            }

            return ((x - this.x1) * (this.y2 - this.y1) / (this.x2 - this.x1)) + this.y1;
        }

        /// <summary>
        /// Computes the x-coordinate of the point using specified y-coordinate.
        /// </summary>
        /// <param name="y">The y-coordinate of the point.</param>
        /// <returns>
        /// The computed x-coordinate.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="Y1"/> equals <see cref="Y2"/>; cannot compute x-coordinate of the point for the horizontal line.</para>
        /// </exception>
        public float X(float y)
        {
            if (this.IsHorizontal)
            {
                throw new InvalidOperationException("Cannot compute x-coordinate of the point for the horizontal line.");
            }

            return ((y - this.y1) * (this.x2 - this.x1) / (this.y2 - this.y1)) + this.x1;
        }

        /// <summary>
        /// Determines if the specified point is on this <see cref="LineF"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the point defined by <paramref name="x"/> and <paramref name="y"/> is on this <see cref="LineF"/>; otherwise, <b>false</b>.
        /// </returns>
        public bool Contains(float x, float y) =>
            LineF.AreEqual(this.x1, this.x2) ? LineF.AreEqual(this.x1, x) : LineF.AreEqual(this.Y(x), y);

        /// <summary>
        /// Determines if the specified <see cref="PointF"/> is on this <see cref="LineF"/>.
        /// </summary>
        /// <param name="point">The <see cref="PointF"/> to test.</param>
        /// <returns>
        /// <b>true</b> if the <see cref="PointF"/> represented by <paramref name="point"/> is on this <see cref="LineF"/>; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Contains(PointF point) => this.Contains(point.X, point.Y);

        /// <summary>
        /// Determines if the specified point is located above this <see cref="LineF"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the specified point is located above this <see cref="LineF"/>; otherwise, <b>false</b>.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot test the condition, the line is vertical.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsAbove(float x, float y) => y < this.Y(x);

        /// <summary>
        /// Determines if the specified point is located below this <see cref="LineF"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the specified point is located below this <see cref="LineF"/>; otherwise, <b>false</b>.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot text the condition, the line is vertical.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsBelow(float x, float y) => y > this.Y(x);

        /// <summary>
        /// Compares two <see cref="float"/> objects.
        /// </summary>
        /// <param name="left">The <see cref="float"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="float"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values are equal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static bool AreEqual(float left, float right) => left.AreEqual(right, LineF.Eps);

        /// <summary>
        /// Compares two <see cref="float"/> objects.
        /// </summary>
        /// <param name="left">The <see cref="float"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="float"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values are unequal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static bool AreNotEqual(float left, float right) => !left.AreEqual(right, LineF.Eps);
    }

    /// <summary>
    /// Represents a line in a two-dimensional plane described by two <see cref="PointD"/> objects.
    /// </summary>
    /// <remarks>
    /// <para>The line is defined by the equation: <c>y = a * x + b</c>.</para>
    /// </remarks>
    public struct LineD
        : IEquatable<LineD>
    {
        /// <summary>
        /// Epsilon used in rounding operations.
        /// </summary>
        private const double Eps = (double)1e-8;

        /// <summary>
        /// The x-coordinate of the first point.
        /// </summary>
        private double x1;

        /// <summary>
        /// The y-coordinate of the first point.
        /// </summary>
        private double y1;

        /// <summary>
        /// The x-coordinate of the second point.
        /// </summary>
        private double x2;

        /// <summary>
        /// The y-coordinate of the second point.
        /// </summary>
        private double y2;

        /// <summary>
        /// Initializes a new instance of the <see cref="LineD"/> struct
        /// that has the specified x-coordinate and y-coordinate of two points.
        /// </summary>
        /// <param name="x1">The x-coordinate of the first point.</param>
        /// <param name="y1">The y-coordinate of the first point.</param>
        /// <param name="x2">The x-coordinate of the second point.</param>
        /// <param name="y2">The y-coordinate of the second point.</param>
        /// <exception cref="ArgumentException">
        /// <paramref name="x1"/> equals <paramref name="x2"/> and <paramref name="y1"/> equals <paramref name="y2"/>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LineD(double x1, double y1, double x2, double y2)
        {
            if (LineD.AreEqual(x1, x2) && LineD.AreEqual(y1, y2))
            {
                throw new ArgumentException("The line must be defined by two points.");
            }

            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LineD"/> struct
        /// that has the specified coordinates of two points.
        /// </summary>
        /// <param name="point1">The coordinates of the first point.</param>
        /// <param name="point2">The coordinates of the second point.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LineD(PointD point1, PointD point2)
            : this(point1.X, point1.Y, point2.X, point2.Y)
        {
        }

        /// <summary>
        /// Gets or sets the x-coordinate of the first point.
        /// </summary>
        /// <value>
        /// The x-coordinate of the first point.
        /// </value>
        public double X1
        {
            get => this.x1;
            set => this.x1 = value;
        }

        /// <summary>
        /// Gets or sets the y-coordinate of the first point.
        /// </summary>
        /// <value>
        /// The y-coordinate of the first point.
        /// </value>
        public double Y1
        {
            get => this.y1;
            set => this.y1 = value;
        }

        /// <summary>
        /// Gets or sets the x-coordinate of the second point.
        /// </summary>
        /// <value>
        /// The x-coordinate of the second point.
        /// </value>
        public double X2
        {
            get => this.x2;
            set => this.x2 = value;
        }

        /// <summary>
        /// Gets or sets the y-coordinate of the second point.
        /// </summary>
        /// <value>
        /// The y-coordinate of the second point.
        /// </value>
        public double Y2
        {
            get => this.y2;
            set => this.y2 = value;
        }

        /// <summary>
        /// Gets the slope of this <see cref="LineD"/>.
        /// </summary>
        /// <value>
        /// (<see cref="Y2"/> - <see cref="Y1"/>) / (<see cref="X2"/> - <see cref="X1"/>); <see cref="double.PositiveInfinity"/> if <see cref="X2"/> equals <see cref="X1"/>.
        /// </value>
        public double Slope => this.IsVertical ? double.PositiveInfinity : (double)(this.y2 - this.y1) / (this.x2 - this.x1);

        /// <summary>
        /// Gets a value indicating whether this <see cref="LineD"/> is a vertical line.
        /// </summary>
        /// <value>
        /// <b>true</b> if this <see cref="LineD"/> is a vertical line; otherwise, <b>false</b>.
        /// </value>
        public bool IsVertical =>
            LineD.AreEqual(this.x1, this.x2);

        /// <summary>
        /// Gets a value indicating whether this <see cref="LineD"/> is a horizontal line.
        /// </summary>
        /// <value>
        /// <b>true</b> if this <see cref="LineD"/> is a horizontal line; otherwise, <b>false</b>.
        /// </value>
        public bool IsHorizontal =>
            LineD.AreEqual(this.y1, this.y2);

        /// <summary>
        /// Compares two <see cref="LineD"/> objects.
        /// The result specifies whether the values of the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> properties of the two <see cref="LineD"/> objects are equal.
        /// </summary>
        /// <param name="left">The <see cref="LineD"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="LineD"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(LineD left, LineD right) => left.Equals(right);

        /// <summary>
        /// Compares two <see cref="LineD"/> objects.
        /// The result specifies whether the values of the <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, and <see cref="Y2"/> properties of the two <see cref="LineD"/> objects are unequal.
        /// </summary>
        /// <param name="left">The <see cref="LineD"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="LineD"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values of either <see cref="X1"/>, <see cref="Y1"/>, <see cref="X2"/>, or <see cref="Y2"/> properties of <paramref name="left"/> and <paramref name="right"/> are unequal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(LineD left, LineD right) => !left.Equals(right);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(LineD other) =>
            LineD.AreEqual(other.x1, this.x1) &&
            LineD.AreEqual(other.y1, this.y1) &&
            LineD.AreEqual(other.x2, this.x2) &&
            LineD.AreEqual(other.y2, this.y2);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object obj) => obj is LineD line && this.Equals(line);

        /// <inheritdoc />
        public override int GetHashCode() => unchecked((int)this.x1 ^ (int)this.y1 ^ (int)this.x2 ^ (int)this.y2);

        /// <inheritdoc />
        public override string ToString() =>
            this.x1.ToString(CultureInfo.CurrentCulture) + " " +
            this.y1.ToString(CultureInfo.CurrentCulture) + " " +
            this.x2.ToString(CultureInfo.CurrentCulture) + " " +
            this.y2.ToString(CultureInfo.CurrentCulture);

        /// <summary>
        /// Computes the y-coordinate of the point using specified x-coordinate.
        /// </summary>
        /// <param name="x">The x-coordinate of the point.</param>
        /// <returns>
        /// The computed y-coordinate.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot compute y-coordinate of the point for the vertical line.</para>
        /// </exception>
        public double Y(double x)
        {
            if (this.IsVertical)
            {
                throw new InvalidOperationException("Cannot compute y-coordinate of the point for the vertical line.");
            }

            return ((x - this.x1) * (this.y2 - this.y1) / (this.x2 - this.x1)) + this.y1;
        }

        /// <summary>
        /// Computes the x-coordinate of the point using specified y-coordinate.
        /// </summary>
        /// <param name="y">The y-coordinate of the point.</param>
        /// <returns>
        /// The computed x-coordinate.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="Y1"/> equals <see cref="Y2"/>; cannot compute x-coordinate of the point for the horizontal line.</para>
        /// </exception>
        public double X(double y)
        {
            if (this.IsHorizontal)
            {
                throw new InvalidOperationException("Cannot compute x-coordinate of the point for the horizontal line.");
            }

            return ((y - this.y1) * (this.x2 - this.x1) / (this.y2 - this.y1)) + this.x1;
        }

        /// <summary>
        /// Determines if the specified point is on this <see cref="LineD"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the point defined by <paramref name="x"/> and <paramref name="y"/> is on this <see cref="LineD"/>; otherwise, <b>false</b>.
        /// </returns>
        public bool Contains(double x, double y) =>
            LineD.AreEqual(this.x1, this.x2) ? LineD.AreEqual(this.x1, x) : LineD.AreEqual(this.Y(x), y);

        /// <summary>
        /// Determines if the specified <see cref="PointD"/> is on this <see cref="LineD"/>.
        /// </summary>
        /// <param name="point">The <see cref="PointD"/> to test.</param>
        /// <returns>
        /// <b>true</b> if the <see cref="PointD"/> represented by <paramref name="point"/> is on this <see cref="LineD"/>; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Contains(PointD point) => this.Contains(point.X, point.Y);

        /// <summary>
        /// Determines if the specified point is located above this <see cref="LineD"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the specified point is located above this <see cref="LineD"/>; otherwise, <b>false</b>.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot test the condition, the line is vertical.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsAbove(double x, double y) => y < this.Y(x);

        /// <summary>
        /// Determines if the specified point is located below this <see cref="LineD"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the point to test.</param>
        /// <param name="y">The y-coordinate of the point to test.</param>
        /// <returns>
        /// <b>true</b> if the specified point is located below this <see cref="LineD"/>; otherwise, <b>false</b>.
        /// </returns>
        /// <exception cref="InvalidOperationException">
        /// <para><see cref="X1"/> equals <see cref="X2"/>; cannot text the condition, the line is vertical.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsBelow(double x, double y) => y > this.Y(x);

        /// <summary>
        /// Compares two <see cref="double"/> objects.
        /// </summary>
        /// <param name="left">The <see cref="double"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="double"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values are equal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static bool AreEqual(double left, double right) => left.AreEqual(right, LineD.Eps);

        /// <summary>
        /// Compares two <see cref="double"/> objects.
        /// </summary>
        /// <param name="left">The <see cref="double"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="double"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values are unequal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static bool AreNotEqual(double left, double right) => !left.AreEqual(right, LineD.Eps);
    }
}