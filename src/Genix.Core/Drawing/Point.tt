// -----------------------------------------------------------------------
// <copyright file="Point.tt" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Drawing
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using Newtonsoft.Json;

<#
    Tuple<string, string>[] classes = 
    {
        Tuple.Create("int", ""),
        Tuple.Create("float", "F"),
        Tuple.Create("double", "D"),
    };

    foreach (Tuple<string, string> cls in classes)
    {
        string type = cls.Item1;
        string suffix = cls.Item2;
#>

    /// <summary>
    /// Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
    /// </summary>
    [TypeConverter(typeof(Point<#=suffix#>Converter))]
    [JsonConverter(typeof(Point<#=suffix#>JsonConverter))]
    public struct Point<#=suffix#>
        : IEquatable<Point<#=suffix#>>
    {
        /// <summary>
        /// Represents a <see cref="Point<#=suffix#>"/> that has <see cref="X"/> and <see cref="Y"/> values set to zero.
        /// </summary>
        public static readonly Point<#=suffix#> Empty;
<# if (type == "int") { #>

        /// <summary>
        /// Epsilon used in rounding operations.
        /// </summary>
        private const float Eps = 1e-8f;
<# } #>

        /// <summary>
        /// The x-coordinate of this <see cref="Point<#=suffix#>"/>.
        /// </summary>
        private <#=type#> x;

        /// <summary>
        /// The y-coordinate of this <see cref="Point<#=suffix#>"/>.
        /// </summary>
        private <#=type#> y;

        /// <summary>
        /// Initializes a new instance of the <see cref="Point<#=suffix#>"/> struct with the specified coordinates.
        /// </summary>
        /// <param name="x">The horizontal position of the point.</param>
        /// <param name="y">The vertical position of the point.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Point<#=suffix#>(<#=type#> x, <#=type#> y)
        {
            this.x = x;
            this.y = y;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Point<#=suffix#>"/> struct from the <see cref="System.Drawing.Point"/>.
        /// </summary>
        /// <param name="point">The <see cref="System.Drawing.Point"/> that contains the position of the point.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Point<#=suffix#>(System.Drawing.Point point)
        {
            this.x = point.X;
            this.y = point.Y;
        }

        /// <summary>
        /// Gets or sets the x-coordinate of this <see cref="Point<#=suffix#>"/>.
        /// </summary>
        /// <value>
        /// The x-coordinate of this <see cref="Point<#=suffix#>"/>.
        /// </value>
        public <#=type#> X
        {
            get => this.x;
            set => this.x = value;
        }

        /// <summary>
        /// Gets or sets the y-coordinate of this <see cref="Point<#=suffix#>"/>.
        /// </summary>
        /// <value>
        /// The y-coordinate of this <see cref="Point<#=suffix#>"/>.
        /// </value>
        public <#=type#> Y
        {
            get => this.y;
            set => this.y = value;
        }

        /// <summary>
        /// Gets a value indicating whether this <see cref="Point<#=suffix#>"/> is empty.
        /// </summary>
        /// <value>
        /// <b>true</b> if both <see cref="X"/> and <see cref="Y"/> are 0; otherwise, <b>false</b>.
        /// </value>
        public bool IsEmpty => this.x == 0 && this.y == 0;

        /// <summary>
        /// Compares two <see cref="Point<#=suffix#>"/> objects.
        /// The result specifies whether the values of the <see cref="X"/> and <see cref="Y"/> properties of the two <see cref="Point<#=suffix#>"/> objects are equal.
        /// </summary>
        /// <param name="left">The <see cref="Point<#=suffix#>"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="Point<#=suffix#>"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the <see cref="X"/> and <see cref="Y"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(Point<#=suffix#> left, Point<#=suffix#> right) => left.Equals(right);

        /// <summary>
        /// Compares two <see cref="Point<#=suffix#>"/> objects.
        /// The result specifies whether the values of the <see cref="X"/> and <see cref="Y"/> properties of the two <see cref="Point<#=suffix#>"/> objects are unequal.
        /// </summary>
        /// <param name="left">The <see cref="Point<#=suffix#>"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="Point<#=suffix#>"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values of either <see cref="X"/> and <see cref="Y"/> properties of <paramref name="left"/> and <paramref name="right"/> are unequal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(Point<#=suffix#> left, Point<#=suffix#> right) => !left.Equals(right);

        /// <summary>
        /// Initializes a new instance of the <see cref="Point<#=suffix#>"/> structure using the value represented by the specified string.
        /// </summary>
        /// <param name="value">A <see cref="string"/> that contains a <see cref="Point<#=suffix#>"/> in the following format:X Y.</param>
        /// <returns>The <see cref="Point<#=suffix#>"/> this method creates.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="value"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="FormatException">
        /// <paramref name="value"/> does not consist of two values represented by an optional sign followed by a sequence of digits (0 through 9).
        /// </exception>
        public static Point<#=suffix#> Parse(string value)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            string[] split = value.Split(' ');
            if (split?.Length == 2 &&
                <#=type#>.TryParse(split[0], out <#=type#> x) &&
                <#=type#>.TryParse(split[1], out <#=type#> y))
            {
                return new Point<#=suffix#>(x, y);
            }
            else
            {
                throw new ArgumentException(Genix.Core.Properties.Resources.E_InvalidPointFormat, nameof(value));
            }
        }

        /// <summary>
        /// Scales the specified <see cref="Point<#=suffix#>"/> location.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> to scale.</param>
        /// <param name="dx">The horizontal scaling factor.</param>
        /// <param name="dy">The vertical scaling factor.</param>
        /// <returns>The scaled <see cref="Point<#=suffix#>"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Point<#=suffix#> Scale(Point<#=suffix#> point, <#=type#> dx, <#=type#> dy) => new Point<#=suffix#>(point.x * dx, point.y * dy);
<# if (type == "int") { #>

        /// <summary>
        /// Scales the specified <see cref="Point<#=suffix#>"/> location.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> to scale.</param>
        /// <param name="dx">The horizontal scaling factor.</param>
        /// <param name="dy">The vertical scaling factor.</param>
        /// <returns>The scaled <see cref="Point<#=suffix#>"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Point<#=suffix#> Scale(Point<#=suffix#> point, float dx, float dy)
        {
            // note: add epsilon to avoid rounding problems
            return new Point<#=suffix#>((dx * point.x).Round(), (dy * point.y).Round());
        }
<# } #>

        /// <summary>
        /// Translates the specified <see cref="Point<#=suffix#>"/> by the specified amount.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> to translate.</param>
        /// <param name="dx">The amount to offset the x-coordinate.</param>
        /// <param name="dy">The amount to offset the y-coordinate.</param>
        /// <returns>The translated <see cref="Point<#=suffix#>"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Point<#=suffix#> Offset(Point<#=suffix#> point, <#=type#> dx, <#=type#> dy) => new Point<#=suffix#>(point.x + dx, point.y + dy);

        /// <summary>
        /// Translates the specified <see cref="Point<#=suffix#>"/> by the specified <see cref="Point<#=suffix#>"/>.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> to translate.</param>
        /// <param name="offset">The <see cref="Point<#=suffix#>"/> that contains the offset for the <paramref name="point"/>.</param>
        /// <returns>The translated <see cref="Point<#=suffix#>"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Point<#=suffix#> Offset(Point<#=suffix#> point, Point<#=suffix#> offset) => Point<#=suffix#>.Offset(point, offset.x, offset.y);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Point<#=suffix#> other) => other.x == this.x && other.y == this.y;

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if (!(obj is Point))
            {
                return false;
            }

            return this.Equals((Point<#=suffix#>)obj);
        }

        /// <inheritdoc />
        public override int GetHashCode() => unchecked((int)this.x ^ (int)this.y);

        /// <inheritdoc />
        public override string ToString() =>
            this.x.ToString(CultureInfo.CurrentCulture) + " " + this.y.ToString(CultureInfo.CurrentCulture);

        /// <summary>
        /// Sets <see cref="X"/> and <see cref="Y"/> values set to zero.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear() => this.x = this.y = 0;

        /// <summary>
        /// Sets this <see cref="Point<#=suffix#>"/> position.
        /// </summary>
        /// <param name="x">The horizontal position of the point.</param>
        /// <param name="y">The vertical position of the point.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(<#=type#> x, <#=type#> y)
        {
            this.x = x;
            this.y = y;
        }

        /// <summary>
        /// Translates this <see cref="Point<#=suffix#>"/> by the specified amount.
        /// </summary>
        /// <param name="dx">The amount to offset the x-coordinate.</param>
        /// <param name="dy">The amount to offset the y-coordinate.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Offset(<#=type#> dx, <#=type#> dy)
        {
            this.x += dx;
            this.y += dy;
        }

        /// <summary>
        /// Translates this <see cref="Point<#=suffix#>"/> by the specified <see cref="Point<#=suffix#>"/>.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> that contains the offset.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Offset(Point<#=suffix#> point) => this.Offset(point.X, point.Y);

        /// <summary>
        /// Scales this <see cref="Point<#=suffix#>"/> location.
        /// </summary>
        /// <param name="dx">The horizontal scaling factor.</param>
        /// <param name="dy">The vertical scaling factor.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Scale(<#=type#> dx, <#=type#> dy)
        {
            this.x *= dx;
            this.y *= dy;
        }
 <# if (type == "int") { #>

        /// <summary>
        /// Scales this <see cref="Point<#=suffix#>"/> location.
        /// </summary>
        /// <param name="dx">The horizontal scaling factor.</param>
        /// <param name="dy">The vertical scaling factor.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Scale(float dx, float dy)
        {
            // note: add epsilon to avoid rounding problems
            this.x = (dx * this.x).Round();
            this.y = (dy * this.y).Round();
        }
<# } #>

        /// <summary>
        /// Computes the Euclidean distance between this <see cref="Point<#=suffix#>"/> and the specified <see cref="Point<#=suffix#>"/>.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> to compute the distance to.</param>
        /// <returns>
        /// A value that represents the Euclidean distance between this <see cref="Point<#=suffix#>"/> and <paramref name="point"/>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
<# if (type == "int" || type == "float") { #>
        public float DistanceTo(Point<#=suffix#> point) => (float)Math.Sqrt(this.DistanceToSquared(point));
<# } else { #>
        public <#=type#> DistanceTo(Point<#=suffix#> point) => Math.Sqrt(this.DistanceToSquared(point));
<# } #>

        /// <summary>
        /// Computes the distance between this <see cref="Point<#=suffix#>"/> and the specified <see cref="Point<#=suffix#>"/> along x-axis.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> to compute the distance to.</param>
        /// <returns>
        /// A value that represents the distance between this <see cref="Point<#=suffix#>"/> and <paramref name="point"/> along x-axis.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=type#> DistanceToX(Point<#=suffix#> point) => Math.Abs(this.x - point.x);

        /// <summary>
        /// Computes the distance between this <see cref="Point<#=suffix#>"/> and the specified <see cref="Point<#=suffix#>"/> along y-axis.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> to compute the distance to.</param>
        /// <returns>
        /// A value that represents the distance between this <see cref="Point<#=suffix#>"/> and <paramref name="point"/> along y-axis.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=type#> DistanceToY(Point<#=suffix#> point) => Math.Abs(this.y - point.y);

        /// <summary>
        /// Computes the squared Euclidean distance between this <see cref="Point<#=suffix#>"/> and the specified <see cref="Point<#=suffix#>"/>.
        /// </summary>
        /// <param name="point">The <see cref="Point<#=suffix#>"/> to compute the distance to.</param>
        /// <returns>
        /// A value that represents the squared Euclidean distance between this <see cref="Point<#=suffix#>"/> and <paramref name="point"/>.
        /// </returns>
        public <#=type#> DistanceToSquared(Point<#=suffix#> point)
        {
            <#=type#> dx = this.x - point.x;
            <#=type#> dy = this.y - point.y;
            return (dx * dx) + (dy * dy);
        }
    }

    /// <summary>
    /// Provides a unified way of converting <see cref="Point<#=suffix#>"/> to <see cref="string"/>.
    /// </summary>
    internal class Point<#=suffix#>Converter : TypeConverter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Point<#=suffix#>Converter"/> class.
        /// </summary>
        public Point<#=suffix#>Converter()
        {
        }

        /// <inheritdoc />
        public override bool CanConvertTo(ITypeDescriptorContext context, Type destType) => destType == typeof(string);

        /// <inheritdoc />
        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destType)
        {
            if (destType == null)
            {
                throw new ArgumentNullException(nameof(destType));
            }

            if (destType != typeof(string))
            {
                throw new NotSupportedException(
                    string.Format(CultureInfo.InvariantCulture, Genix.Core.Properties.Resources.E_TypeConversionNotSupported, "Point<#=suffix#>Converter", destType.ToString()));
            }

            return ((Point<#=suffix#>)value).ToString();
        }

        /// <inheritdoc />
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type srcType) => srcType == typeof(string);

        /// <inheritdoc />
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value == null)
            {
                return Point<#=suffix#>.Empty;
            }

            if (value.GetType() != typeof(string))
            {
                throw new NotSupportedException(
                    string.Format(CultureInfo.InvariantCulture, Genix.Core.Properties.Resources.E_TypeConversionNotSupported, "Point<#=suffix#>Converter", value.GetType().ToString()));
            }

            return Point<#=suffix#>.Parse((string)value);
        }
    }

    /// <summary>
    /// Represents a Json.NET converter for <see cref="Point<#=suffix#>"/> struct.
    /// </summary>
    public class Point<#=suffix#>JsonConverter : JsonConverter
    {
        /// <inheritdoc />
        public override bool CanConvert(Type objectType) => true;

        /// <inheritdoc />
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value is Point<#=suffix#> point)
            {
                writer.WriteValue(point.ToString());
            }
            else
            {
                throw new JsonSerializationException(string.Format(
                    CultureInfo.InvariantCulture,
                    "Unexpected value when converting point. Expected Point<#=suffix#>, got {0}.",
                    value?.GetType()));
            }
        }

        /// <inheritdoc />
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null)
            {
                throw new JsonSerializationException("Cannot convert null value to Point<#=suffix#>.");
            }

            if (reader.TokenType != JsonToken.String)
            {
                throw new JsonSerializationException(string.Format(
                    CultureInfo.InvariantCulture,
                    "Unexpected token parsing point. Expected String, got {0}.",
                    reader.TokenType));
            }

            return Point<#=suffix#>.Parse(reader.Value.ToString());
        }
    }

    /// <summary>
    /// Compares two <see cref="Point<#=suffix#>"/> objects, first by <see cref="Point<#=suffix#>.X"/> then by <see cref="Point<#=suffix#>.Y"/>.
    /// </summary>
    public class Point<#=suffix#>XYComparer : IComparer<Point<#=suffix#>>
    {
        /// <summary>
        /// Gets a default <see cref="Point<#=suffix#>XYComparer"/> comparer.
        /// </summary>
        /// <value>
        /// The <see cref="Point<#=suffix#>XYComparer"/> object.
        /// </value>
        public static Point<#=suffix#>XYComparer Default { get; } = new Point<#=suffix#>XYComparer();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int Compare(Point<#=suffix#> x, Point<#=suffix#> y)
        {
<# if (type == "int") { #>
            int res = x.X - y.X;
            if (res == 0)
            {
                res = x.Y - y.Y;
            }
<# } else { #>
            int res = x.X.CompareTo(y.X);
            if (res == 0)
            {
                res = x.Y.CompareTo(y.Y);
            }
<# } #>

            return res;
        }
    }

    /// <summary>
    /// Compares two <see cref="Point<#=suffix#>"/> objects, first by <see cref="Point<#=suffix#>.Y"/> then by <see cref="Point<#=suffix#>.X"/>.
    /// </summary>
    public class Point<#=suffix#>YXComparer : IComparer<Point<#=suffix#>>
    {
        /// <summary>
        /// Gets a default <see cref="Point<#=suffix#>YXComparer"/> comparer.
        /// </summary>
        /// <value>
        /// The <see cref="Point<#=suffix#>YXComparer"/> object.
        /// </value>
        public static Point<#=suffix#>YXComparer Default { get; } = new Point<#=suffix#>YXComparer();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int Compare(Point<#=suffix#> x, Point<#=suffix#> y)
        {
<# if (type == "int") { #>
            int res = x.Y - y.Y;
            if (res == 0)
            {
                res = x.X - y.X;
            }
<# } else { #>
            int res = x.Y.CompareTo(y.Y);
            if (res == 0)
            {
                res = x.X.CompareTo(y.X);
            }
<# } #>

            return res;
        }
    }
<#
    }
#>
}