// -----------------------------------------------------------------------
// <copyright file="MinMax.tt" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 9/11/2018 12:00:14 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core
{
    using System;
    using System.Runtime.CompilerServices;

    /// <summary>
    /// Provides mathematical methods for computing minimum and maximum values.
    /// </summary>
    [CLSCompliant(false)]
    public static class MinMax
    {
        /// <summary>
        /// Returns the larger of two 8-bit signed integers.
        /// </summary>
        /// <param name="a">The first of two 8-bit signed integers to compare.</param>
        /// <param name="b">The second of two 8-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static sbyte Max(sbyte a, sbyte b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three 8-bit signed integers.
        /// </summary>
        /// <param name="a">The first of three 8-bit signed integers to compare.</param>
        /// <param name="b">The second of three 8-bit signed integers to compare.</param>
        /// <param name="c">The third of three 8-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static sbyte Max(sbyte a, sbyte b, sbyte c)
        {
            sbyte ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four 8-bit signed integers.
        /// </summary>
        /// <param name="a">The first of four 8-bit signed integers to compare.</param>
        /// <param name="b">The second of four 8-bit signed integers to compare.</param>
        /// <param name="c">The third of four 8-bit signed integers to compare.</param>
        /// <param name="d">The forth of four 8-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static sbyte Max(sbyte a, sbyte b, sbyte c, sbyte d)
        {
            sbyte ab = MinMax.Max(a, b);
            sbyte cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two 8-bit signed integers.
        /// </summary>
        /// <param name="a">The first of two 8-bit signed integers to compare.</param>
        /// <param name="b">The second of two 8-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static sbyte Min(sbyte a, sbyte b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three 8-bit signed integers.
        /// </summary>
        /// <param name="a">The first of three 8-bit signed integers to compare.</param>
        /// <param name="b">The second of three 8-bit signed integers to compare.</param>
        /// <param name="c">The third of three 8-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static sbyte Min(sbyte a, sbyte b, sbyte c)
        {
            sbyte ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four 8-bit signed integers.
        /// </summary>
        /// <param name="a">The first of four 8-bit signed integers to compare.</param>
        /// <param name="b">The second of four 8-bit signed integers to compare.</param>
        /// <param name="c">The third of four 8-bit signed integers to compare.</param>
        /// <param name="d">The forth of four 8-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static sbyte Min(sbyte a, sbyte b, sbyte c, sbyte d)
        {
            sbyte ab = MinMax.Min(a, b);
            sbyte cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two 8-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of two 8-bit unsigned integers to compare.</param>
        /// <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte Max(byte a, byte b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three 8-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of three 8-bit unsigned integers to compare.</param>
        /// <param name="b">The second of three 8-bit unsigned integers to compare.</param>
        /// <param name="c">The third of three 8-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte Max(byte a, byte b, byte c)
        {
            byte ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four 8-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of four 8-bit unsigned integers to compare.</param>
        /// <param name="b">The second of four 8-bit unsigned integers to compare.</param>
        /// <param name="c">The third of four 8-bit unsigned integers to compare.</param>
        /// <param name="d">The forth of four 8-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte Max(byte a, byte b, byte c, byte d)
        {
            byte ab = MinMax.Max(a, b);
            byte cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two 8-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of two 8-bit unsigned integers to compare.</param>
        /// <param name="b">The second of two 8-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte Min(byte a, byte b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three 8-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of three 8-bit unsigned integers to compare.</param>
        /// <param name="b">The second of three 8-bit unsigned integers to compare.</param>
        /// <param name="c">The third of three 8-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte Min(byte a, byte b, byte c)
        {
            byte ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four 8-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of four 8-bit unsigned integers to compare.</param>
        /// <param name="b">The second of four 8-bit unsigned integers to compare.</param>
        /// <param name="c">The third of four 8-bit unsigned integers to compare.</param>
        /// <param name="d">The forth of four 8-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte Min(byte a, byte b, byte c, byte d)
        {
            byte ab = MinMax.Min(a, b);
            byte cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two 16-bit signed integers.
        /// </summary>
        /// <param name="a">The first of two 16-bit signed integers to compare.</param>
        /// <param name="b">The second of two 16-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short Max(short a, short b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three 16-bit signed integers.
        /// </summary>
        /// <param name="a">The first of three 16-bit signed integers to compare.</param>
        /// <param name="b">The second of three 16-bit signed integers to compare.</param>
        /// <param name="c">The third of three 16-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short Max(short a, short b, short c)
        {
            short ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four 16-bit signed integers.
        /// </summary>
        /// <param name="a">The first of four 16-bit signed integers to compare.</param>
        /// <param name="b">The second of four 16-bit signed integers to compare.</param>
        /// <param name="c">The third of four 16-bit signed integers to compare.</param>
        /// <param name="d">The forth of four 16-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short Max(short a, short b, short c, short d)
        {
            short ab = MinMax.Max(a, b);
            short cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two 16-bit signed integers.
        /// </summary>
        /// <param name="a">The first of two 16-bit signed integers to compare.</param>
        /// <param name="b">The second of two 16-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short Min(short a, short b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three 16-bit signed integers.
        /// </summary>
        /// <param name="a">The first of three 16-bit signed integers to compare.</param>
        /// <param name="b">The second of three 16-bit signed integers to compare.</param>
        /// <param name="c">The third of three 16-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short Min(short a, short b, short c)
        {
            short ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four 16-bit signed integers.
        /// </summary>
        /// <param name="a">The first of four 16-bit signed integers to compare.</param>
        /// <param name="b">The second of four 16-bit signed integers to compare.</param>
        /// <param name="c">The third of four 16-bit signed integers to compare.</param>
        /// <param name="d">The forth of four 16-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short Min(short a, short b, short c, short d)
        {
            short ab = MinMax.Min(a, b);
            short cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two 16-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of two 16-bit unsigned integers to compare.</param>
        /// <param name="b">The second of two 16-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort Max(ushort a, ushort b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three 16-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of three 16-bit unsigned integers to compare.</param>
        /// <param name="b">The second of three 16-bit unsigned integers to compare.</param>
        /// <param name="c">The third of three 16-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort Max(ushort a, ushort b, ushort c)
        {
            ushort ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four 16-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of four 16-bit unsigned integers to compare.</param>
        /// <param name="b">The second of four 16-bit unsigned integers to compare.</param>
        /// <param name="c">The third of four 16-bit unsigned integers to compare.</param>
        /// <param name="d">The forth of four 16-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort Max(ushort a, ushort b, ushort c, ushort d)
        {
            ushort ab = MinMax.Max(a, b);
            ushort cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two 16-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of two 16-bit unsigned integers to compare.</param>
        /// <param name="b">The second of two 16-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort Min(ushort a, ushort b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three 16-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of three 16-bit unsigned integers to compare.</param>
        /// <param name="b">The second of three 16-bit unsigned integers to compare.</param>
        /// <param name="c">The third of three 16-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort Min(ushort a, ushort b, ushort c)
        {
            ushort ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four 16-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of four 16-bit unsigned integers to compare.</param>
        /// <param name="b">The second of four 16-bit unsigned integers to compare.</param>
        /// <param name="c">The third of four 16-bit unsigned integers to compare.</param>
        /// <param name="d">The forth of four 16-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort Min(ushort a, ushort b, ushort c, ushort d)
        {
            ushort ab = MinMax.Min(a, b);
            ushort cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two 32-bit signed integers.
        /// </summary>
        /// <param name="a">The first of two 32-bit signed integers to compare.</param>
        /// <param name="b">The second of two 32-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Max(int a, int b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three 32-bit signed integers.
        /// </summary>
        /// <param name="a">The first of three 32-bit signed integers to compare.</param>
        /// <param name="b">The second of three 32-bit signed integers to compare.</param>
        /// <param name="c">The third of three 32-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Max(int a, int b, int c)
        {
            int ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four 32-bit signed integers.
        /// </summary>
        /// <param name="a">The first of four 32-bit signed integers to compare.</param>
        /// <param name="b">The second of four 32-bit signed integers to compare.</param>
        /// <param name="c">The third of four 32-bit signed integers to compare.</param>
        /// <param name="d">The forth of four 32-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Max(int a, int b, int c, int d)
        {
            int ab = MinMax.Max(a, b);
            int cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two 32-bit signed integers.
        /// </summary>
        /// <param name="a">The first of two 32-bit signed integers to compare.</param>
        /// <param name="b">The second of two 32-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Min(int a, int b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three 32-bit signed integers.
        /// </summary>
        /// <param name="a">The first of three 32-bit signed integers to compare.</param>
        /// <param name="b">The second of three 32-bit signed integers to compare.</param>
        /// <param name="c">The third of three 32-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Min(int a, int b, int c)
        {
            int ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four 32-bit signed integers.
        /// </summary>
        /// <param name="a">The first of four 32-bit signed integers to compare.</param>
        /// <param name="b">The second of four 32-bit signed integers to compare.</param>
        /// <param name="c">The third of four 32-bit signed integers to compare.</param>
        /// <param name="d">The forth of four 32-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Min(int a, int b, int c, int d)
        {
            int ab = MinMax.Min(a, b);
            int cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two 32-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of two 32-bit unsigned integers to compare.</param>
        /// <param name="b">The second of two 32-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint Max(uint a, uint b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three 32-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of three 32-bit unsigned integers to compare.</param>
        /// <param name="b">The second of three 32-bit unsigned integers to compare.</param>
        /// <param name="c">The third of three 32-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint Max(uint a, uint b, uint c)
        {
            uint ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four 32-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of four 32-bit unsigned integers to compare.</param>
        /// <param name="b">The second of four 32-bit unsigned integers to compare.</param>
        /// <param name="c">The third of four 32-bit unsigned integers to compare.</param>
        /// <param name="d">The forth of four 32-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint Max(uint a, uint b, uint c, uint d)
        {
            uint ab = MinMax.Max(a, b);
            uint cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two 32-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of two 32-bit unsigned integers to compare.</param>
        /// <param name="b">The second of two 32-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint Min(uint a, uint b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three 32-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of three 32-bit unsigned integers to compare.</param>
        /// <param name="b">The second of three 32-bit unsigned integers to compare.</param>
        /// <param name="c">The third of three 32-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint Min(uint a, uint b, uint c)
        {
            uint ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four 32-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of four 32-bit unsigned integers to compare.</param>
        /// <param name="b">The second of four 32-bit unsigned integers to compare.</param>
        /// <param name="c">The third of four 32-bit unsigned integers to compare.</param>
        /// <param name="d">The forth of four 32-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint Min(uint a, uint b, uint c, uint d)
        {
            uint ab = MinMax.Min(a, b);
            uint cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two 64-bit signed integers.
        /// </summary>
        /// <param name="a">The first of two 64-bit signed integers to compare.</param>
        /// <param name="b">The second of two 64-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Max(long a, long b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three 64-bit signed integers.
        /// </summary>
        /// <param name="a">The first of three 64-bit signed integers to compare.</param>
        /// <param name="b">The second of three 64-bit signed integers to compare.</param>
        /// <param name="c">The third of three 64-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Max(long a, long b, long c)
        {
            long ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four 64-bit signed integers.
        /// </summary>
        /// <param name="a">The first of four 64-bit signed integers to compare.</param>
        /// <param name="b">The second of four 64-bit signed integers to compare.</param>
        /// <param name="c">The third of four 64-bit signed integers to compare.</param>
        /// <param name="d">The forth of four 64-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Max(long a, long b, long c, long d)
        {
            long ab = MinMax.Max(a, b);
            long cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two 64-bit signed integers.
        /// </summary>
        /// <param name="a">The first of two 64-bit signed integers to compare.</param>
        /// <param name="b">The second of two 64-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Min(long a, long b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three 64-bit signed integers.
        /// </summary>
        /// <param name="a">The first of three 64-bit signed integers to compare.</param>
        /// <param name="b">The second of three 64-bit signed integers to compare.</param>
        /// <param name="c">The third of three 64-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Min(long a, long b, long c)
        {
            long ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four 64-bit signed integers.
        /// </summary>
        /// <param name="a">The first of four 64-bit signed integers to compare.</param>
        /// <param name="b">The second of four 64-bit signed integers to compare.</param>
        /// <param name="c">The third of four 64-bit signed integers to compare.</param>
        /// <param name="d">The forth of four 64-bit signed integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Min(long a, long b, long c, long d)
        {
            long ab = MinMax.Min(a, b);
            long cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two 64-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of two 64-bit unsigned integers to compare.</param>
        /// <param name="b">The second of two 64-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong Max(ulong a, ulong b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three 64-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of three 64-bit unsigned integers to compare.</param>
        /// <param name="b">The second of three 64-bit unsigned integers to compare.</param>
        /// <param name="c">The third of three 64-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong Max(ulong a, ulong b, ulong c)
        {
            ulong ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four 64-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of four 64-bit unsigned integers to compare.</param>
        /// <param name="b">The second of four 64-bit unsigned integers to compare.</param>
        /// <param name="c">The third of four 64-bit unsigned integers to compare.</param>
        /// <param name="d">The forth of four 64-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong Max(ulong a, ulong b, ulong c, ulong d)
        {
            ulong ab = MinMax.Max(a, b);
            ulong cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two 64-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of two 64-bit unsigned integers to compare.</param>
        /// <param name="b">The second of two 64-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong Min(ulong a, ulong b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three 64-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of three 64-bit unsigned integers to compare.</param>
        /// <param name="b">The second of three 64-bit unsigned integers to compare.</param>
        /// <param name="c">The third of three 64-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong Min(ulong a, ulong b, ulong c)
        {
            ulong ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four 64-bit unsigned integers.
        /// </summary>
        /// <param name="a">The first of four 64-bit unsigned integers to compare.</param>
        /// <param name="b">The second of four 64-bit unsigned integers to compare.</param>
        /// <param name="c">The third of four 64-bit unsigned integers to compare.</param>
        /// <param name="d">The forth of four 64-bit unsigned integers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong Min(ulong a, ulong b, ulong c, ulong d)
        {
            ulong ab = MinMax.Min(a, b);
            ulong cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two single-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of two single-precision floating point numbers to compare.</param>
        /// <param name="b">The second of two single-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float Max(float a, float b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three single-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of three single-precision floating point numbers to compare.</param>
        /// <param name="b">The second of three single-precision floating point numbers to compare.</param>
        /// <param name="c">The third of three single-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float Max(float a, float b, float c)
        {
            float ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four single-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of four single-precision floating point numbers to compare.</param>
        /// <param name="b">The second of four single-precision floating point numbers to compare.</param>
        /// <param name="c">The third of four single-precision floating point numbers to compare.</param>
        /// <param name="d">The forth of four single-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float Max(float a, float b, float c, float d)
        {
            float ab = MinMax.Max(a, b);
            float cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two single-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of two single-precision floating point numbers to compare.</param>
        /// <param name="b">The second of two single-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float Min(float a, float b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three single-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of three single-precision floating point numbers to compare.</param>
        /// <param name="b">The second of three single-precision floating point numbers to compare.</param>
        /// <param name="c">The third of three single-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float Min(float a, float b, float c)
        {
            float ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four single-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of four single-precision floating point numbers to compare.</param>
        /// <param name="b">The second of four single-precision floating point numbers to compare.</param>
        /// <param name="c">The third of four single-precision floating point numbers to compare.</param>
        /// <param name="d">The forth of four single-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float Min(float a, float b, float c, float d)
        {
            float ab = MinMax.Min(a, b);
            float cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

        /// <summary>
        /// Returns the larger of two double-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of two double-precision floating point numbers to compare.</param>
        /// <param name="b">The second of two double-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double Max(double a, double b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three double-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of three double-precision floating point numbers to compare.</param>
        /// <param name="b">The second of three double-precision floating point numbers to compare.</param>
        /// <param name="c">The third of three double-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double Max(double a, double b, double c)
        {
            double ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four double-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of four double-precision floating point numbers to compare.</param>
        /// <param name="b">The second of four double-precision floating point numbers to compare.</param>
        /// <param name="c">The third of four double-precision floating point numbers to compare.</param>
        /// <param name="d">The forth of four double-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double Max(double a, double b, double c, double d)
        {
            double ab = MinMax.Max(a, b);
            double cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two double-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of two double-precision floating point numbers to compare.</param>
        /// <param name="b">The second of two double-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double Min(double a, double b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three double-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of three double-precision floating point numbers to compare.</param>
        /// <param name="b">The second of three double-precision floating point numbers to compare.</param>
        /// <param name="c">The third of three double-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double Min(double a, double b, double c)
        {
            double ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four double-precision floating point numbers.
        /// </summary>
        /// <param name="a">The first of four double-precision floating point numbers to compare.</param>
        /// <param name="b">The second of four double-precision floating point numbers to compare.</param>
        /// <param name="c">The third of four double-precision floating point numbers to compare.</param>
        /// <param name="d">The forth of four double-precision floating point numbers to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double Min(double a, double b, double c, double d)
        {
            double ab = MinMax.Min(a, b);
            double cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

    }
}