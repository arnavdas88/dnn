// -----------------------------------------------------------------------
// <copyright file="Vectors.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 9/10/2018 12:09:39 AM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core
{
    using System;
    using System.Diagnostics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;

    /// <summary>
    /// Provides mathematical methods for numeric vectors manipulation.
    /// </summary>
	[CLSCompliant(false)]
    public static class Vectors
    {

        /// <summary>
        /// Creates an arrayof 32-bit signed integers with the specified length and starting value.
        /// </summary>
        /// <param name="length">The number of elements in the array.</param>
        /// <param name="value">The initial value for the array values.</param>
        /// <returns>
        /// The allocated array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int[] Create(int length, int value)
        {
            int[] a = new int[length];
            if (value != default(int))
            {
                Vectors.Set(length, value, a, 0);
            }

            return a;
        }

        /// <summary>
        /// Determines whether the two arrays of 32-bit signed integers contain same data.
        /// </summary>
        /// <param name="length">The number of elements to compare.</param>
        /// <param name="x">The first array to compare.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array to compare.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// <b>true</b> if two arrays contain same data; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Equals(int length, int[] x, int offx, int[] y, int offy)
        {
            return NativeMethods.compare_s32(length, x, offx, y, offy) == 0;
        }

        /// <summary>
        /// Copies a range of 32-bit signed integers from a array starting at the specified source index
        /// to another array starting at the specified destination index.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Copy(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.copy_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Copies a range of values from an array of 32-bit signed integers starting at the specified source index
        /// to another array starting at the specified destination index.
        /// <paramref name="x"/> and <paramref name="y"/> can overlap.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Move(int length, int[] x, int offx, int[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.move_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Sets values in the array of 32-bit signed integers
        /// starting at the specified source index to the specified value.
        /// </summary>
        /// <param name="length">The number of elements to set.</param>
        /// <param name="value">The value to set.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set(int length, int value, int[] y, int offy)
        {
            NativeMethods.set_s32(length, value, y, offy);
        }

        /// <summary>
        /// Swaps elements of two arrays of 32-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="x">The first array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Swap(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.swap_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the absolute value of elements of an array of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = Math.Abs(y)</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Abs(int length, int[] y, int offy)
        {
            NativeMethods.abs_ip_s32(length, y, offy);
        }

        /// <summary>
        /// Computes the absolute value of elements of an array of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The array that receives the data.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Abs(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.abs_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, int alpha, int[] y, int offy)
        {
            NativeMethods.addc_ip_s32(length, alpha, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, int[] x, int offx, int alpha, int[] y, int offy)
        {
            NativeMethods.addc_s32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.add_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.add_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, [In] int alpha, int[] y, int offy)
        {
            NativeMethods.subc_ip_s32(length, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, int[] x, int offx, [In] int alpha, int[] y, int offy)
        {
            NativeMethods.subc_s32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.sub_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.sub_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, int alpha, int[] y, int offy)
        {
            NativeMethods.mulc_ip_s32(length, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] := x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, int[] x, int offx, int alpha, int[] y, int offy)
        {
            NativeMethods.mulc_s32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.mul_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.mul_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, int alpha, int[] y, int offy)
        {
            NativeMethods.divc_ip_s32(length, alpha, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, int[] x, int offx, int alpha, int[] y, int offy)
        {
            NativeMethods.divc_s32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of element of an array of 32-bit signed integers and a constant to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, int[] x, int offx, int alpha, int[] y, int offy)
        {
            NativeMethods.addproductc_s32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of elements of two arrays of 32-bit signed integers to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.addproduct_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = y[i] * y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, int[] y, int offy)
        {
            NativeMethods.sqr_ip_s32(length, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.sqr_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Returns the position of minimum value in the array of 32-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMin(int length, int[] x, int offx) => NativeMethods.argmin_s32(length, x, offx);

        /// <summary>
        /// Returns the position of maximum value in the array of 32-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMax(int length, int[] x, int offx) => NativeMethods.argmax_s32(length, x, offx);

        /// <summary>
        /// Returns the position of minimum and maximum values in the array of 32-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The position of minimum value in the array.</param>
        /// <param name="max">The position of maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ArgMinMax(int length, int[] x, int offx, out int min, out int max)
        {
            NativeMethods.argminmax_s32(length, x, offx, out min, out max);
        }

        /// <summary>
        /// Returns the minimum value in the array of 32-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The index in the <paramref name="x"/> at which evaluation begins.</param>
        /// <returns>
        /// The minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Min(int length, int[] x, int offx) => x[Vectors.ArgMin(length, x, offx)];

        /// <summary>
        /// Returns the maximum value in the array of 32-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Max(int length, int[] x, int offx) => x[Vectors.ArgMax(length, x, offx)];

        /// <summary>
        /// Returns the minimum and maximum values in the array of 32-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The minimum value in the array.</param>
        /// <param name="max">The maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinMax(int length, int[] x, int offx, out int min, out int max)
        {
            Vectors.ArgMinMax(length, x, offx, out int argmin, out int argmax);
            min = x[argmin];
            max = x[argmax];
        }

        /// <summary>
        /// Computes a smaller of each element of an array of 32-bit signed integers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, int a, int[] y, int offy)
        {
            NativeMethods.minc_ip_s32(length, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each element of an array of 32-bit signed integers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, int[] x, int offx, int a, int[] y, int offy)
        {
            NativeMethods.minc_s32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.min_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.min_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of 32-bit signed integers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, int a, int[] y, int offy)
        {
            NativeMethods.maxc_ip_s32(length, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of 32-bit signed integers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, int[] x, int offx, int a, int[] y, int offy)
        {
            NativeMethods.maxc_s32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.max_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.max_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 32-bit signed integers.
        /// Elements that are less than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is smaller than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLT(int length, int threshold, int value, int[] y, int offy)
        {
            NativeMethods.threshold_lt_ip_s32(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 32-bit signed integers.
        /// Elements that are greater than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is greater than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdGT(int length, int threshold, int value, int[] y, int offy)
        {
            NativeMethods.threshold_gt_ip_s32(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 32-bit signed integers.
        /// Elements that are smaller or greater than the thresholds, are set to a specified values.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="thresholdLT">The lower threshold value to use for each element.</param>
        /// <param name="valueLT">The value to set for each element that is smaller than the <paramref name="thresholdLT"/>.</param>
        /// <param name="thresholdGT">The upper threshold value to use for each element.</param>
        /// <param name="valueGT">The value to set for each element that is greater than the <paramref name="thresholdGT"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLTGT(int length, int thresholdLT, int valueLT, int thresholdGT, int valueGT, int[] y, int offy)
        {
            NativeMethods.threshold_ltgt_ip_s32(length, thresholdLT, valueLT, thresholdGT, valueGT, y, offy);
        }

        /// <summary>
        /// Creates an arrayof 32-bit unsigned integers with the specified length and starting value.
        /// </summary>
        /// <param name="length">The number of elements in the array.</param>
        /// <param name="value">The initial value for the array values.</param>
        /// <returns>
        /// The allocated array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint[] Create(int length, uint value)
        {
            uint[] a = new uint[length];
            if (value != default(uint))
            {
                Vectors.Set(length, value, a, 0);
            }

            return a;
        }

        /// <summary>
        /// Determines whether the two arrays of 32-bit unsigned integers contain same data.
        /// </summary>
        /// <param name="length">The number of elements to compare.</param>
        /// <param name="x">The first array to compare.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array to compare.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// <b>true</b> if two arrays contain same data; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Equals(int length, uint[] x, int offx, uint[] y, int offy)
        {
            return NativeMethods.compare_u32(length, x, offx, y, offy) == 0;
        }

        /// <summary>
        /// Copies a range of 32-bit unsigned integers from a array starting at the specified source index
        /// to another array starting at the specified destination index.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Copy(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.copy_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Copies a range of values from an array of 32-bit unsigned integers starting at the specified source index
        /// to another array starting at the specified destination index.
        /// <paramref name="x"/> and <paramref name="y"/> can overlap.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Move(int length, uint[] x, int offx, uint[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.move_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Sets values in the array of 32-bit unsigned integers
        /// starting at the specified source index to the specified value.
        /// </summary>
        /// <param name="length">The number of elements to set.</param>
        /// <param name="value">The value to set.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set(int length, uint value, uint[] y, int offy)
        {
            NativeMethods.set_u32(length, value, y, offy);
        }

        /// <summary>
        /// Swaps elements of two arrays of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="x">The first array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Swap(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.swap_u32(length, x, offx, y, offy);
        }
        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, uint alpha, uint[] y, int offy)
        {
            NativeMethods.addc_ip_u32(length, alpha, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, uint[] x, int offx, uint alpha, uint[] y, int offy)
        {
            NativeMethods.addc_u32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.add_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.add_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, [In] uint alpha, uint[] y, int offy)
        {
            NativeMethods.subc_ip_u32(length, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, uint[] x, int offx, [In] uint alpha, uint[] y, int offy)
        {
            NativeMethods.subc_u32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.sub_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.sub_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, uint alpha, uint[] y, int offy)
        {
            NativeMethods.mulc_ip_u32(length, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] := x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, uint[] x, int offx, uint alpha, uint[] y, int offy)
        {
            NativeMethods.mulc_u32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.mul_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.mul_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, uint alpha, uint[] y, int offy)
        {
            NativeMethods.divc_ip_u32(length, alpha, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, uint[] x, int offx, uint alpha, uint[] y, int offy)
        {
            NativeMethods.divc_u32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of element of an array of 32-bit unsigned integers and a constant to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, uint[] x, int offx, uint alpha, uint[] y, int offy)
        {
            NativeMethods.addproductc_u32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of elements of two arrays of 32-bit unsigned integers to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.addproduct_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = y[i] * y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, uint[] y, int offy)
        {
            NativeMethods.sqr_ip_u32(length, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.sqr_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Returns the position of minimum value in the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMin(int length, uint[] x, int offx) => NativeMethods.argmin_u32(length, x, offx);

        /// <summary>
        /// Returns the position of maximum value in the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMax(int length, uint[] x, int offx) => NativeMethods.argmax_u32(length, x, offx);

        /// <summary>
        /// Returns the position of minimum and maximum values in the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The position of minimum value in the array.</param>
        /// <param name="max">The position of maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ArgMinMax(int length, uint[] x, int offx, out int min, out int max)
        {
            NativeMethods.argminmax_u32(length, x, offx, out min, out max);
        }

        /// <summary>
        /// Returns the minimum value in the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The index in the <paramref name="x"/> at which evaluation begins.</param>
        /// <returns>
        /// The minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint Min(int length, uint[] x, int offx) => x[Vectors.ArgMin(length, x, offx)];

        /// <summary>
        /// Returns the maximum value in the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint Max(int length, uint[] x, int offx) => x[Vectors.ArgMax(length, x, offx)];

        /// <summary>
        /// Returns the minimum and maximum values in the array of 32-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The minimum value in the array.</param>
        /// <param name="max">The maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinMax(int length, uint[] x, int offx, out uint min, out uint max)
        {
            Vectors.ArgMinMax(length, x, offx, out int argmin, out int argmax);
            min = x[argmin];
            max = x[argmax];
        }

        /// <summary>
        /// Computes a smaller of each element of an array of 32-bit unsigned integers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, uint a, uint[] y, int offy)
        {
            NativeMethods.minc_ip_u32(length, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each element of an array of 32-bit unsigned integers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, uint[] x, int offx, uint a, uint[] y, int offy)
        {
            NativeMethods.minc_u32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.min_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.min_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of 32-bit unsigned integers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, uint a, uint[] y, int offy)
        {
            NativeMethods.maxc_ip_u32(length, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of 32-bit unsigned integers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, uint[] x, int offx, uint a, uint[] y, int offy)
        {
            NativeMethods.maxc_u32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.max_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.max_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 32-bit unsigned integers.
        /// Elements that are less than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is smaller than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLT(int length, uint threshold, uint value, uint[] y, int offy)
        {
            NativeMethods.threshold_lt_ip_u32(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 32-bit unsigned integers.
        /// Elements that are greater than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is greater than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdGT(int length, uint threshold, uint value, uint[] y, int offy)
        {
            NativeMethods.threshold_gt_ip_u32(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 32-bit unsigned integers.
        /// Elements that are smaller or greater than the thresholds, are set to a specified values.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="thresholdLT">The lower threshold value to use for each element.</param>
        /// <param name="valueLT">The value to set for each element that is smaller than the <paramref name="thresholdLT"/>.</param>
        /// <param name="thresholdGT">The upper threshold value to use for each element.</param>
        /// <param name="valueGT">The value to set for each element that is greater than the <paramref name="thresholdGT"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLTGT(int length, uint thresholdLT, uint valueLT, uint thresholdGT, uint valueGT, uint[] y, int offy)
        {
            NativeMethods.threshold_ltgt_ip_u32(length, thresholdLT, valueLT, thresholdGT, valueGT, y, offy);
        }

        /// <summary>
        /// Performs logical OR operation on two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Or(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.or_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical AND operation on two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void And(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.and_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical XOR operation on two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xor(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.xor_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical XAND (A AND NOT B) operation on two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xand(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.xand_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical OR operation on two arrays of 32-bit unsigned integers not-in-pace.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public static void Or(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.or_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs logical AND operation on two arrays of 32-bit unsigned integers not-in-pace.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public static void And(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.and_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs logical XOR operation on two arrays of 32-bit unsigned integers not-in-pace.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public static void Xor(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.xor_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs logical XAND (A AND NOT B) operation on two arrays of 32-bit unsigned integers not-in-pace.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public static void Xand(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.xand_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Creates an arrayof 64-bit signed integers with the specified length and starting value.
        /// </summary>
        /// <param name="length">The number of elements in the array.</param>
        /// <param name="value">The initial value for the array values.</param>
        /// <returns>
        /// The allocated array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long[] Create(int length, long value)
        {
            long[] a = new long[length];
            if (value != default(long))
            {
                Vectors.Set(length, value, a, 0);
            }

            return a;
        }

        /// <summary>
        /// Determines whether the two arrays of 64-bit signed integers contain same data.
        /// </summary>
        /// <param name="length">The number of elements to compare.</param>
        /// <param name="x">The first array to compare.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array to compare.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// <b>true</b> if two arrays contain same data; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Equals(int length, long[] x, int offx, long[] y, int offy)
        {
            return NativeMethods.compare_s64(length, x, offx, y, offy) == 0;
        }

        /// <summary>
        /// Copies a range of 64-bit signed integers from a array starting at the specified source index
        /// to another array starting at the specified destination index.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Copy(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.copy_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Copies a range of values from an array of 64-bit signed integers starting at the specified source index
        /// to another array starting at the specified destination index.
        /// <paramref name="x"/> and <paramref name="y"/> can overlap.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Move(int length, long[] x, int offx, long[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.move_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Sets values in the array of 64-bit signed integers
        /// starting at the specified source index to the specified value.
        /// </summary>
        /// <param name="length">The number of elements to set.</param>
        /// <param name="value">The value to set.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set(int length, long value, long[] y, int offy)
        {
            NativeMethods.set_s64(length, value, y, offy);
        }

        /// <summary>
        /// Swaps elements of two arrays of 64-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="x">The first array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Swap(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.swap_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the absolute value of elements of an array of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = Math.Abs(y)</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Abs(int length, long[] y, int offy)
        {
            NativeMethods.abs_ip_s64(length, y, offy);
        }

        /// <summary>
        /// Computes the absolute value of elements of an array of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The array that receives the data.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Abs(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.abs_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, long alpha, long[] y, int offy)
        {
            NativeMethods.addc_ip_s64(length, alpha, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, long[] x, int offx, long alpha, long[] y, int offy)
        {
            NativeMethods.addc_s64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.add_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.add_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, [In] long alpha, long[] y, int offy)
        {
            NativeMethods.subc_ip_s64(length, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, long[] x, int offx, [In] long alpha, long[] y, int offy)
        {
            NativeMethods.subc_s64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.sub_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.sub_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, long alpha, long[] y, int offy)
        {
            NativeMethods.mulc_ip_s64(length, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] := x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, long[] x, int offx, long alpha, long[] y, int offy)
        {
            NativeMethods.mulc_s64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.mul_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.mul_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, long alpha, long[] y, int offy)
        {
            NativeMethods.divc_ip_s64(length, alpha, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, long[] x, int offx, long alpha, long[] y, int offy)
        {
            NativeMethods.divc_s64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of element of an array of 64-bit signed integers and a constant to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, long[] x, int offx, long alpha, long[] y, int offy)
        {
            NativeMethods.addproductc_s64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of elements of two arrays of 64-bit signed integers to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.addproduct_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = y[i] * y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, long[] y, int offy)
        {
            NativeMethods.sqr_ip_s64(length, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.sqr_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Returns the position of minimum value in the array of 64-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMin(int length, long[] x, int offx) => NativeMethods.argmin_s64(length, x, offx);

        /// <summary>
        /// Returns the position of maximum value in the array of 64-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMax(int length, long[] x, int offx) => NativeMethods.argmax_s64(length, x, offx);

        /// <summary>
        /// Returns the position of minimum and maximum values in the array of 64-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The position of minimum value in the array.</param>
        /// <param name="max">The position of maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ArgMinMax(int length, long[] x, int offx, out int min, out int max)
        {
            NativeMethods.argminmax_s64(length, x, offx, out min, out max);
        }

        /// <summary>
        /// Returns the minimum value in the array of 64-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The index in the <paramref name="x"/> at which evaluation begins.</param>
        /// <returns>
        /// The minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Min(int length, long[] x, int offx) => x[Vectors.ArgMin(length, x, offx)];

        /// <summary>
        /// Returns the maximum value in the array of 64-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long Max(int length, long[] x, int offx) => x[Vectors.ArgMax(length, x, offx)];

        /// <summary>
        /// Returns the minimum and maximum values in the array of 64-bit signed integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The minimum value in the array.</param>
        /// <param name="max">The maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinMax(int length, long[] x, int offx, out long min, out long max)
        {
            Vectors.ArgMinMax(length, x, offx, out int argmin, out int argmax);
            min = x[argmin];
            max = x[argmax];
        }

        /// <summary>
        /// Computes a smaller of each element of an array of 64-bit signed integers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, long a, long[] y, int offy)
        {
            NativeMethods.minc_ip_s64(length, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each element of an array of 64-bit signed integers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, long[] x, int offx, long a, long[] y, int offy)
        {
            NativeMethods.minc_s64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.min_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.min_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of 64-bit signed integers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, long a, long[] y, int offy)
        {
            NativeMethods.maxc_ip_s64(length, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of 64-bit signed integers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, long[] x, int offx, long a, long[] y, int offy)
        {
            NativeMethods.maxc_s64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.max_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.max_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 64-bit signed integers.
        /// Elements that are less than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is smaller than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLT(int length, long threshold, long value, long[] y, int offy)
        {
            NativeMethods.threshold_lt_ip_s64(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 64-bit signed integers.
        /// Elements that are greater than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is greater than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdGT(int length, long threshold, long value, long[] y, int offy)
        {
            NativeMethods.threshold_gt_ip_s64(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 64-bit signed integers.
        /// Elements that are smaller or greater than the thresholds, are set to a specified values.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="thresholdLT">The lower threshold value to use for each element.</param>
        /// <param name="valueLT">The value to set for each element that is smaller than the <paramref name="thresholdLT"/>.</param>
        /// <param name="thresholdGT">The upper threshold value to use for each element.</param>
        /// <param name="valueGT">The value to set for each element that is greater than the <paramref name="thresholdGT"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLTGT(int length, long thresholdLT, long valueLT, long thresholdGT, long valueGT, long[] y, int offy)
        {
            NativeMethods.threshold_ltgt_ip_s64(length, thresholdLT, valueLT, thresholdGT, valueGT, y, offy);
        }

        /// <summary>
        /// Creates an arrayof 64-bit unsigned integers with the specified length and starting value.
        /// </summary>
        /// <param name="length">The number of elements in the array.</param>
        /// <param name="value">The initial value for the array values.</param>
        /// <returns>
        /// The allocated array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong[] Create(int length, ulong value)
        {
            ulong[] a = new ulong[length];
            if (value != default(ulong))
            {
                Vectors.Set(length, value, a, 0);
            }

            return a;
        }

        /// <summary>
        /// Determines whether the two arrays of 64-bit unsigned integers contain same data.
        /// </summary>
        /// <param name="length">The number of elements to compare.</param>
        /// <param name="x">The first array to compare.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array to compare.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// <b>true</b> if two arrays contain same data; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Equals(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            return NativeMethods.compare_u64(length, x, offx, y, offy) == 0;
        }

        /// <summary>
        /// Copies a range of 64-bit unsigned integers from a array starting at the specified source index
        /// to another array starting at the specified destination index.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Copy(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.copy_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Copies a range of values from an array of 64-bit unsigned integers starting at the specified source index
        /// to another array starting at the specified destination index.
        /// <paramref name="x"/> and <paramref name="y"/> can overlap.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Move(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.move_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Sets values in the array of 64-bit unsigned integers
        /// starting at the specified source index to the specified value.
        /// </summary>
        /// <param name="length">The number of elements to set.</param>
        /// <param name="value">The value to set.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set(int length, ulong value, ulong[] y, int offy)
        {
            NativeMethods.set_u64(length, value, y, offy);
        }

        /// <summary>
        /// Swaps elements of two arrays of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="x">The first array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Swap(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.swap_u64(length, x, offx, y, offy);
        }
        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.addc_ip_u64(length, alpha, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ulong[] x, int offx, ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.addc_u64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.add_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.add_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, [In] ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.subc_ip_u64(length, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ulong[] x, int offx, [In] ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.subc_u64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.sub_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.sub_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.mulc_ip_u64(length, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] := x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ulong[] x, int offx, ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.mulc_u64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.mul_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.mul_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.divc_ip_u64(length, alpha, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ulong[] x, int offx, ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.divc_u64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of element of an array of 64-bit unsigned integers and a constant to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, ulong[] x, int offx, ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.addproductc_u64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of elements of two arrays of 64-bit unsigned integers to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.addproduct_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = y[i] * y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, ulong[] y, int offy)
        {
            NativeMethods.sqr_ip_u64(length, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.sqr_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Returns the position of minimum value in the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMin(int length, ulong[] x, int offx) => NativeMethods.argmin_u64(length, x, offx);

        /// <summary>
        /// Returns the position of maximum value in the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMax(int length, ulong[] x, int offx) => NativeMethods.argmax_u64(length, x, offx);

        /// <summary>
        /// Returns the position of minimum and maximum values in the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The position of minimum value in the array.</param>
        /// <param name="max">The position of maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ArgMinMax(int length, ulong[] x, int offx, out int min, out int max)
        {
            NativeMethods.argminmax_u64(length, x, offx, out min, out max);
        }

        /// <summary>
        /// Returns the minimum value in the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The index in the <paramref name="x"/> at which evaluation begins.</param>
        /// <returns>
        /// The minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong Min(int length, ulong[] x, int offx) => x[Vectors.ArgMin(length, x, offx)];

        /// <summary>
        /// Returns the maximum value in the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong Max(int length, ulong[] x, int offx) => x[Vectors.ArgMax(length, x, offx)];

        /// <summary>
        /// Returns the minimum and maximum values in the array of 64-bit unsigned integers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The minimum value in the array.</param>
        /// <param name="max">The maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinMax(int length, ulong[] x, int offx, out ulong min, out ulong max)
        {
            Vectors.ArgMinMax(length, x, offx, out int argmin, out int argmax);
            min = x[argmin];
            max = x[argmax];
        }

        /// <summary>
        /// Computes a smaller of each element of an array of 64-bit unsigned integers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, ulong a, ulong[] y, int offy)
        {
            NativeMethods.minc_ip_u64(length, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each element of an array of 64-bit unsigned integers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, ulong[] x, int offx, ulong a, ulong[] y, int offy)
        {
            NativeMethods.minc_u64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.min_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.min_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of 64-bit unsigned integers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, ulong a, ulong[] y, int offy)
        {
            NativeMethods.maxc_ip_u64(length, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of 64-bit unsigned integers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, ulong[] x, int offx, ulong a, ulong[] y, int offy)
        {
            NativeMethods.maxc_u64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.max_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.max_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 64-bit unsigned integers.
        /// Elements that are less than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is smaller than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLT(int length, ulong threshold, ulong value, ulong[] y, int offy)
        {
            NativeMethods.threshold_lt_ip_u64(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 64-bit unsigned integers.
        /// Elements that are greater than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is greater than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdGT(int length, ulong threshold, ulong value, ulong[] y, int offy)
        {
            NativeMethods.threshold_gt_ip_u64(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of 64-bit unsigned integers.
        /// Elements that are smaller or greater than the thresholds, are set to a specified values.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="thresholdLT">The lower threshold value to use for each element.</param>
        /// <param name="valueLT">The value to set for each element that is smaller than the <paramref name="thresholdLT"/>.</param>
        /// <param name="thresholdGT">The upper threshold value to use for each element.</param>
        /// <param name="valueGT">The value to set for each element that is greater than the <paramref name="thresholdGT"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLTGT(int length, ulong thresholdLT, ulong valueLT, ulong thresholdGT, ulong valueGT, ulong[] y, int offy)
        {
            NativeMethods.threshold_ltgt_ip_u64(length, thresholdLT, valueLT, thresholdGT, valueGT, y, offy);
        }

        /// <summary>
        /// Performs logical OR operation on two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Or(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.or_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical AND operation on two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void And(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.and_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical XOR operation on two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xor(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.xor_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical XAND (A AND NOT B) operation on two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xand(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.xand_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical OR operation on two arrays of 64-bit unsigned integers not-in-pace.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public static void Or(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.or_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs logical AND operation on two arrays of 64-bit unsigned integers not-in-pace.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public static void And(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.and_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs logical XOR operation on two arrays of 64-bit unsigned integers not-in-pace.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public static void Xor(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.xor_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs logical XAND (A AND NOT B) operation on two arrays of 64-bit unsigned integers not-in-pace.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public static void Xand(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.xand_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Creates an arrayof single-precision floating point numbers with the specified length and starting value.
        /// </summary>
        /// <param name="length">The number of elements in the array.</param>
        /// <param name="value">The initial value for the array values.</param>
        /// <returns>
        /// The allocated array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float[] Create(int length, float value)
        {
            float[] a = new float[length];
            if (value != default(float))
            {
                Vectors.Set(length, value, a, 0);
            }

            return a;
        }

        /// <summary>
        /// Determines whether the two arrays of single-precision floating point numbers contain same data.
        /// </summary>
        /// <param name="length">The number of elements to compare.</param>
        /// <param name="x">The first array to compare.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array to compare.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// <b>true</b> if two arrays contain same data; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Equals(int length, float[] x, int offx, float[] y, int offy)
        {
            return NativeMethods.compare_f32(length, x, offx, y, offy) == 0;
        }

        /// <summary>
        /// Copies a range of single-precision floating point numbers from a array starting at the specified source index
        /// to another array starting at the specified destination index.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Copy(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.copy_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Copies a range of values from an array of single-precision floating point numbers starting at the specified source index
        /// to another array starting at the specified destination index.
        /// <paramref name="x"/> and <paramref name="y"/> can overlap.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Move(int length, float[] x, int offx, float[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.move_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Sets values in the array of single-precision floating point numbers
        /// starting at the specified source index to the specified value.
        /// </summary>
        /// <param name="length">The number of elements to set.</param>
        /// <param name="value">The value to set.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set(int length, float value, float[] y, int offy)
        {
            NativeMethods.set_f32(length, value, y, offy);
        }

        /// <summary>
        /// Swaps elements of two arrays of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="x">The first array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Swap(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.swap_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the absolute value of elements of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = Math.Abs(y)</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Abs(int length, float[] y, int offy)
        {
            NativeMethods.abs_ip_f32(length, y, offy);
        }

        /// <summary>
        /// Computes the absolute value of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The array that receives the data.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Abs(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.abs_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Abs(int, float[], int, float[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Abs(int, float[], int, float[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="y">The <see cref="Abs(int, float[], int, float[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="dy">The array that contains gradient for <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/> and <paramref name="dy"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>dx[i] += x[i] == y[i] ? dy[i] : -dy[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AbsGradient(int length, float[] x, float[] dx, int offx, bool cleardx, float[] y, float[] dy, int offy)
        {
            NativeMethods.abs_gradient_f32(length, x, dx, offx, cleardx, y, dy, offy);
        }
        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, float alpha, float[] y, int offy)
        {
            NativeMethods.addc_ip_f32(length, alpha, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, float[] x, int offx, float alpha, float[] y, int offy)
        {
            NativeMethods.addc_f32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.add_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.add_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, [In] float alpha, float[] y, int offy)
        {
            NativeMethods.subc_ip_f32(length, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, float[] x, int offx, [In] float alpha, float[] y, int offy)
        {
            NativeMethods.subc_f32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.sub_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.sub_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, float alpha, float[] y, int offy)
        {
            NativeMethods.mulc_ip_f32(length, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] := x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, float[] x, int offx, float alpha, float[] y, int offy)
        {
            NativeMethods.mulc_f32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.mul_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.mul_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, float alpha, float[] y, int offy)
        {
            NativeMethods.divc_ip_f32(length, alpha, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, float[] x, int offx, float alpha, float[] y, int offy)
        {
            NativeMethods.divc_f32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of element of an array of single-precision floating point numbers and a constant to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, float[] x, int offx, float alpha, float[] y, int offy)
        {
            NativeMethods.addproductc_f32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of elements of two arrays of single-precision floating point numbers to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.addproduct_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = y[i] * y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, float[] y, int offy)
        {
            NativeMethods.sqr_ip_f32(length, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.sqr_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Returns the position of minimum value in the array of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMin(int length, float[] x, int offx) => NativeMethods.argmin_f32(length, x, offx);

        /// <summary>
        /// Returns the position of maximum value in the array of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMax(int length, float[] x, int offx) => NativeMethods.argmax_f32(length, x, offx);

        /// <summary>
        /// Returns the position of minimum and maximum values in the array of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The position of minimum value in the array.</param>
        /// <param name="max">The position of maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ArgMinMax(int length, float[] x, int offx, out int min, out int max)
        {
            NativeMethods.argminmax_f32(length, x, offx, out min, out max);
        }

        /// <summary>
        /// Returns the minimum value in the array of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The index in the <paramref name="x"/> at which evaluation begins.</param>
        /// <returns>
        /// The minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float Min(int length, float[] x, int offx) => x[Vectors.ArgMin(length, x, offx)];

        /// <summary>
        /// Returns the maximum value in the array of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float Max(int length, float[] x, int offx) => x[Vectors.ArgMax(length, x, offx)];

        /// <summary>
        /// Returns the minimum and maximum values in the array of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The minimum value in the array.</param>
        /// <param name="max">The maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinMax(int length, float[] x, int offx, out float min, out float max)
        {
            Vectors.ArgMinMax(length, x, offx, out int argmin, out int argmax);
            min = x[argmin];
            max = x[argmax];
        }

        /// <summary>
        /// Computes a smaller of each element of an array of single-precision floating point numbers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, float a, float[] y, int offy)
        {
            NativeMethods.minc_ip_f32(length, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each element of an array of single-precision floating point numbers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, float[] x, int offx, float a, float[] y, int offy)
        {
            NativeMethods.minc_f32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.min_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.min_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of single-precision floating point numbers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, float a, float[] y, int offy)
        {
            NativeMethods.maxc_ip_f32(length, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of single-precision floating point numbers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, float[] x, int offx, float a, float[] y, int offy)
        {
            NativeMethods.maxc_f32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.max_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.max_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of single-precision floating point numbers.
        /// Elements that are less than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is smaller than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLT(int length, float threshold, float value, float[] y, int offy)
        {
            NativeMethods.threshold_lt_ip_f32(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of single-precision floating point numbers.
        /// Elements that are greater than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is greater than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdGT(int length, float threshold, float value, float[] y, int offy)
        {
            NativeMethods.threshold_gt_ip_f32(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of single-precision floating point numbers.
        /// Elements that are smaller or greater than the thresholds, are set to a specified values.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="thresholdLT">The lower threshold value to use for each element.</param>
        /// <param name="valueLT">The value to set for each element that is smaller than the <paramref name="thresholdLT"/>.</param>
        /// <param name="thresholdGT">The upper threshold value to use for each element.</param>
        /// <param name="valueGT">The value to set for each element that is greater than the <paramref name="thresholdGT"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLTGT(int length, float thresholdLT, float valueLT, float thresholdGT, float valueGT, float[] y, int offy)
        {
            NativeMethods.threshold_ltgt_ip_f32(length, thresholdLT, valueLT, thresholdGT, valueGT, y, offy);
        }

        /// <summary>
        /// Computes a square root of elements of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = sqrt(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sqrt(int length, float[] y, int offy)
        {
            NativeMethods.sqrt_ip_f32(length, y, offy);
        }

        /// <summary>
        /// Computes a square root of elements of an array of single-precision floating point numbers not in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = sqrt(x[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sqrt(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.sqrt_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a natural logarithm of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Log(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.log_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes an exponential of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Exp(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.exp_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a sines of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sin(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.sin_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Sin(int, float[], int, float[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Sin(int, float[], int, float[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="dy">The array that contains gradient <see cref="Sin(int, float[], int, float[], int)"/> method argument <c>y</c>.</param>
        /// <param name="offdy">The starting position in <paramref name="dy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SinGradient(int length, float[] x, float[] dx, int offx, bool cleardx, float[] dy, int offdy)
        {
            NativeMethods.sin_gradient_f32(length, x, dx, offx, cleardx, dy, offdy);
        }

        /// <summary>
        /// Computes a cosines of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Cos(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.cos_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Cos(int, float[], int, float[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Cos(int, float[], int, float[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="dy">The array that contains gradient <see cref="Cos(int, float[], int, float[], int)"/> method argument <c>y</c>.</param>
        /// <param name="offdy">The starting position in <paramref name="dy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void CosGradient(int length, float[] x, float[] dx, int offx, bool cleardx, float[] dy, int offdy)
        {
            NativeMethods.cos_gradient_f32(length, x, dx, offx, cleardx, dy, offdy);
        }

        /// <summary>
        /// Computes the L1-Norm (sum of magnitudes) of the array of single-precision floating point numbers elements.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The L1-Norm of elements in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float L1Norm(int length, float[] x, int offx)
        {
            return NativeMethods.nrm1_f32(length, x, offx);
        }

        /// <summary>
        /// Computes the L2-Norm (Euclidian norm) of the array of single-precision floating point numbers elements.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The L2-Norm of elements in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float L2Norm(int length, float[] x, int offx)
        {
            return NativeMethods.nrm2_f32(length, x, offx);
        }

        /// <summary>
        /// Computes the Manhattan distance between elements of two arrays of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The first array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Manhattan distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sum(abs(x[i] - y[i])).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float ManhattanDistance(int length, float[] x, int offx, float[] y, int offy)
        {
            return NativeMethods.manhattan_distance_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the squared Euclidean distance between elements of two arrays of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The first array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Euclidean distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sum((x[i] - y[i])^2).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float EuclideanDistanceSquared(int length, float[] x, int offx, float[] y, int offy)
        {
            return NativeMethods.euclidean_distance_squared_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the Euclidean distance between elements of two arrays of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The first array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Euclidean distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sqrt(sum((x[i] - y[i])^2)).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float EuclideanDistance(int length, float[] x, int offx, float[] y, int offy)
        {
            return NativeMethods.euclidean_distance_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Creates an arrayof double-precision floating point numbers with the specified length and starting value.
        /// </summary>
        /// <param name="length">The number of elements in the array.</param>
        /// <param name="value">The initial value for the array values.</param>
        /// <returns>
        /// The allocated array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double[] Create(int length, double value)
        {
            double[] a = new double[length];
            if (value != default(double))
            {
                Vectors.Set(length, value, a, 0);
            }

            return a;
        }

        /// <summary>
        /// Determines whether the two arrays of double-precision floating point numbers contain same data.
        /// </summary>
        /// <param name="length">The number of elements to compare.</param>
        /// <param name="x">The first array to compare.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array to compare.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// <b>true</b> if two arrays contain same data; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Equals(int length, double[] x, int offx, double[] y, int offy)
        {
            return NativeMethods.compare_f64(length, x, offx, y, offy) == 0;
        }

        /// <summary>
        /// Copies a range of double-precision floating point numbers from a array starting at the specified source index
        /// to another array starting at the specified destination index.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Copy(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.copy_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Copies a range of values from an array of double-precision floating point numbers starting at the specified source index
        /// to another array starting at the specified destination index.
        /// <paramref name="x"/> and <paramref name="y"/> can overlap.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Move(int length, double[] x, int offx, double[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.move_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Sets values in the array of double-precision floating point numbers
        /// starting at the specified source index to the specified value.
        /// </summary>
        /// <param name="length">The number of elements to set.</param>
        /// <param name="value">The value to set.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Set(int length, double value, double[] y, int offy)
        {
            NativeMethods.set_f64(length, value, y, offy);
        }

        /// <summary>
        /// Swaps elements of two arrays of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to swap.</param>
        /// <param name="x">The first array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Swap(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.swap_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the absolute value of elements of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = Math.Abs(y)</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Abs(int length, double[] y, int offy)
        {
            NativeMethods.abs_ip_f64(length, y, offy);
        }

        /// <summary>
        /// Computes the absolute value of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The array that receives the data.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Abs(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.abs_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Abs(int, double[], int, double[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Abs(int, double[], int, double[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="y">The <see cref="Abs(int, double[], int, double[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="dy">The array that contains gradient for <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/> and <paramref name="dy"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>dx[i] += x[i] == y[i] ? dy[i] : -dy[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AbsGradient(int length, double[] x, double[] dx, int offx, bool cleardx, double[] y, double[] dy, int offy)
        {
            NativeMethods.abs_gradient_f64(length, x, dx, offx, cleardx, y, dy, offy);
        }
        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, double alpha, double[] y, int offy)
        {
            NativeMethods.addc_ip_f64(length, alpha, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to add.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, double[] x, int offx, double alpha, double[] y, int offy)
        {
            NativeMethods.addc_f64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.add_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.add_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, [In] double alpha, double[] y, int offy)
        {
            NativeMethods.subc_ip_f64(length, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to subtract.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, double[] x, int offx, [In] double alpha, double[] y, int offy)
        {
            NativeMethods.subc_f64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.sub_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to subtract.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.sub_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, double alpha, double[] y, int offy)
        {
            NativeMethods.mulc_ip_f64(length, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] := x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, double[] x, int offx, double alpha, double[] y, int offy)
        {
            NativeMethods.mulc_f64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.mul_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.mul_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, double alpha, double[] y, int offy)
        {
            NativeMethods.divc_ip_f64(length, alpha, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to divide.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to divide.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, double[] x, int offx, double alpha, double[] y, int offy)
        {
            NativeMethods.divc_f64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of element of an array of double-precision floating point numbers and a constant to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to add.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * alpha</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, double[] x, int offx, double alpha, double[] y, int offy)
        {
            NativeMethods.addproductc_f64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds product of elements of two arrays of double-precision floating point numbers to the elements of destination array.
        /// </summary>
        /// <param name="length">The number of elements to multiply.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.addproduct_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = y[i] * y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, double[] y, int offy)
        {
            NativeMethods.sqr_ip_f64(length, y, offy);
        }

        /// <summary>
        /// Squares elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Square(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.sqr_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Returns the position of minimum value in the array of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMin(int length, double[] x, int offx) => NativeMethods.argmin_f64(length, x, offx);

        /// <summary>
        /// Returns the position of maximum value in the array of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The position of maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ArgMax(int length, double[] x, int offx) => NativeMethods.argmax_f64(length, x, offx);

        /// <summary>
        /// Returns the position of minimum and maximum values in the array of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The position of minimum value in the array.</param>
        /// <param name="max">The position of maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ArgMinMax(int length, double[] x, int offx, out int min, out int max)
        {
            NativeMethods.argminmax_f64(length, x, offx, out min, out max);
        }

        /// <summary>
        /// Returns the minimum value in the array of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The index in the <paramref name="x"/> at which evaluation begins.</param>
        /// <returns>
        /// The minimum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double Min(int length, double[] x, int offx) => x[Vectors.ArgMin(length, x, offx)];

        /// <summary>
        /// Returns the maximum value in the array of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The maximum value in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double Max(int length, double[] x, int offx) => x[Vectors.ArgMax(length, x, offx)];

        /// <summary>
        /// Returns the minimum and maximum values in the array of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The minimum value in the array.</param>
        /// <param name="max">The maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinMax(int length, double[] x, int offx, out double min, out double max)
        {
            Vectors.ArgMinMax(length, x, offx, out int argmin, out int argmax);
            min = x[argmin];
            max = x[argmax];
        }

        /// <summary>
        /// Computes a smaller of each element of an array of double-precision floating point numbers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, double a, double[] y, int offy)
        {
            NativeMethods.minc_ip_f64(length, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each element of an array of double-precision floating point numbers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinC(int length, double[] x, int offx, double a, double[] y, int offy)
        {
            NativeMethods.minc_f64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.min_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a smaller of each pair of elements of the two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Min(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.min_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of double-precision floating point numbers and a scalar value in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, double a, double[] y, int offy)
        {
            NativeMethods.maxc_ip_f64(length, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each element of an array of double-precision floating point numbers and a scalar value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="a">The scalar value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MaxC(int length, double[] x, int offx, double a, double[] y, int offy)
        {
            NativeMethods.maxc_f64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.max_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a larger of each pair of elements of the two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Max(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.max_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of double-precision floating point numbers.
        /// Elements that are less than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is smaller than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLT(int length, double threshold, double value, double[] y, int offy)
        {
            NativeMethods.threshold_lt_ip_f64(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of double-precision floating point numbers.
        /// Elements that are greater than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is greater than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdGT(int length, double threshold, double value, double[] y, int offy)
        {
            NativeMethods.threshold_gt_ip_f64(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of double-precision floating point numbers.
        /// Elements that are smaller or greater than the thresholds, are set to a specified values.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="thresholdLT">The lower threshold value to use for each element.</param>
        /// <param name="valueLT">The value to set for each element that is smaller than the <paramref name="thresholdLT"/>.</param>
        /// <param name="thresholdGT">The upper threshold value to use for each element.</param>
        /// <param name="valueGT">The value to set for each element that is greater than the <paramref name="thresholdGT"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLTGT(int length, double thresholdLT, double valueLT, double thresholdGT, double valueGT, double[] y, int offy)
        {
            NativeMethods.threshold_ltgt_ip_f64(length, thresholdLT, valueLT, thresholdGT, valueGT, y, offy);
        }

        /// <summary>
        /// Computes a square root of elements of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = sqrt(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sqrt(int length, double[] y, int offy)
        {
            NativeMethods.sqrt_ip_f64(length, y, offy);
        }

        /// <summary>
        /// Computes a square root of elements of an array of double-precision floating point numbers not in-place.
        /// </summary>
        /// <param name="length">The number of elements to square.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = sqrt(x[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sqrt(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.sqrt_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a natural logarithm of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Log(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.log_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes an exponential of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Exp(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.exp_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a sines of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sin(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.sin_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Sin(int, double[], int, double[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Sin(int, double[], int, double[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="dy">The array that contains gradient <see cref="Sin(int, double[], int, double[], int)"/> method argument <c>y</c>.</param>
        /// <param name="offdy">The starting position in <paramref name="dy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SinGradient(int length, double[] x, double[] dx, int offx, bool cleardx, double[] dy, int offdy)
        {
            NativeMethods.sin_gradient_f64(length, x, dx, offx, cleardx, dy, offdy);
        }

        /// <summary>
        /// Computes a cosines of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Cos(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.cos_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Cos(int, double[], int, double[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Cos(int, double[], int, double[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="dy">The array that contains gradient <see cref="Cos(int, double[], int, double[], int)"/> method argument <c>y</c>.</param>
        /// <param name="offdy">The starting position in <paramref name="dy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void CosGradient(int length, double[] x, double[] dx, int offx, bool cleardx, double[] dy, int offdy)
        {
            NativeMethods.cos_gradient_f64(length, x, dx, offx, cleardx, dy, offdy);
        }

        /// <summary>
        /// Computes the L1-Norm (sum of magnitudes) of the array of double-precision floating point numbers elements.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The L1-Norm of elements in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double L1Norm(int length, double[] x, int offx)
        {
            return NativeMethods.nrm1_f64(length, x, offx);
        }

        /// <summary>
        /// Computes the L2-Norm (Euclidian norm) of the array of double-precision floating point numbers elements.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The L2-Norm of elements in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double L2Norm(int length, double[] x, int offx)
        {
            return NativeMethods.nrm2_f64(length, x, offx);
        }

        /// <summary>
        /// Computes the Manhattan distance between elements of two arrays of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The first array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Manhattan distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sum(abs(x[i] - y[i])).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double ManhattanDistance(int length, double[] x, int offx, double[] y, int offy)
        {
            return NativeMethods.manhattan_distance_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the squared Euclidean distance between elements of two arrays of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The first array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Euclidean distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sum((x[i] - y[i])^2).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double EuclideanDistanceSquared(int length, double[] x, int offx, double[] y, int offy)
        {
            return NativeMethods.euclidean_distance_squared_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the Euclidean distance between elements of two arrays of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The first array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Euclidean distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sqrt(sum((x[i] - y[i])^2)).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double EuclideanDistance(int length, double[] x, int offx, double[] y, int offy)
        {
            return NativeMethods.euclidean_distance_f64(length, x, offx, y, offy);
        }

        [SuppressUnmanagedCodeSecurity]
        private static class NativeMethods
        {
            private const string DllName = "Genix.Core.Native.dll";

            [DllImport(NativeMethods.DllName)]
            public static extern int compare_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void copy_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void move_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void set_s32(int n, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void swap_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_ip_s32(int n, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_s32(int n, [In] int[] a, int offa, [Out] int[] y, int offy);


            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_s32(int n, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_s32(int n, [In] int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_s32(int n, [In] int[] x, int offx, [In] int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_s32(int n, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_s32(int n, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_s32(int n, [In] int[] x, int offx, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_ip_s32(int n, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmin_s32(int n, [In] int[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmax_s32(int n, [In] int[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern void argminmax_s32(int n, [In] int[] x, int offx, out int winmin, out int winmax);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_ip_s32(int n, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_ip_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_ip_s32(int n, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_ip_s32(int n, [In] int[] x, int offx, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_lt_ip_s32(int n, int threshold, int value, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_gt_ip_s32(int n, int threshold, int value, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_ltgt_ip_s32(int n, int thresholdLT, int valueLT, int thresholdGT, int valueGT, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int compare_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void copy_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void move_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void set_u32(int n, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void swap_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_u32(int n, [In] uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_u32(int n, [In] uint[] x, int offx, [In] uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_u32(int n, [In] uint[] x, int offx, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_ip_u32(int n, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmin_u32(int n, [In] uint[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmax_u32(int n, [In] uint[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern void argminmax_u32(int n, [In] uint[] x, int offx, out int winmin, out int winmax);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_ip_u32(int n, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_ip_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_ip_u32(int n, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_ip_u32(int n, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_lt_ip_u32(int n, uint threshold, uint value, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_gt_ip_u32(int n, uint threshold, uint value, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_ltgt_ip_u32(int n, uint thresholdLT, uint valueLT, uint thresholdGT, uint valueGT, [In, Out] uint[] y, int offy);
            [DllImport(NativeMethods.DllName)]
            public static extern void or_ip_u32(int length, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void and_ip_u32(int length, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xor_ip_u32(int length, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xand_ip_u32(int length, [In] uint[] x, int offx, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void or_u32(int length, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void and_u32(int length, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xor_u32(int length, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xand_u32(int length, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int compare_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void copy_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void move_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void set_s64(int n, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void swap_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_ip_s64(int n, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_s64(int n, [In] long[] a, int offa, [Out] long[] y, int offy);


            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_s64(int n, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_s64(int n, [In] long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_s64(int n, [In] long[] x, int offx, [In] long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_s64(int n, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_s64(int n, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_s64(int n, [In] long[] x, int offx, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_ip_s64(int n, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmin_s64(int n, [In] long[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmax_s64(int n, [In] long[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern void argminmax_s64(int n, [In] long[] x, int offx, out int winmin, out int winmax);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_ip_s64(int n, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_ip_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_ip_s64(int n, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_ip_s64(int n, [In] long[] x, int offx, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_lt_ip_s64(int n, long threshold, long value, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_gt_ip_s64(int n, long threshold, long value, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_ltgt_ip_s64(int n, long thresholdLT, long valueLT, long thresholdGT, long valueGT, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int compare_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void copy_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void move_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void set_u64(int n, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void swap_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_u64(int n, [In] ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_u64(int n, [In] ulong[] x, int offx, [In] ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_u64(int n, [In] ulong[] x, int offx, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_ip_u64(int n, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmin_u64(int n, [In] ulong[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmax_u64(int n, [In] ulong[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern void argminmax_u64(int n, [In] ulong[] x, int offx, out int winmin, out int winmax);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_ip_u64(int n, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_ip_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_ip_u64(int n, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_ip_u64(int n, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_lt_ip_u64(int n, ulong threshold, ulong value, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_gt_ip_u64(int n, ulong threshold, ulong value, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_ltgt_ip_u64(int n, ulong thresholdLT, ulong valueLT, ulong thresholdGT, ulong valueGT, [In, Out] ulong[] y, int offy);
            [DllImport(NativeMethods.DllName)]
            public static extern void or_ip_u64(int length, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void and_ip_u64(int length, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xor_ip_u64(int length, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xand_ip_u64(int length, [In] ulong[] x, int offx, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void or_u64(int length, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void and_u64(int length, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xor_u64(int length, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xand_u64(int length, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int compare_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void copy_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void move_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void set_f32(int n, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void swap_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_ip_f32(int n, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_f32(int n, [In] float[] a, int offa, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_gradient_f32(
                int n,
                [In] float[] x,
                [Out] float[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] float[] y,
                [In] float[] dy,
                int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_f32(int n, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_f32(int n, [In] float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_f32(int n, [In] float[] x, int offx, [In] float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_f32(int n, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_f32(int n, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_f32(int n, [In] float[] x, int offx, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_ip_f32(int n, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmin_f32(int n, [In] float[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmax_f32(int n, [In] float[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern void argminmax_f32(int n, [In] float[] x, int offx, out int winmin, out int winmax);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_ip_f32(int n, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_ip_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_ip_f32(int n, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_ip_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_lt_ip_f32(int n, float threshold, float value, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_gt_ip_f32(int n, float threshold, float value, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_ltgt_ip_f32(int n, float thresholdLT, float valueLT, float thresholdGT, float valueGT, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqrt_ip_f32(int n, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqrt_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void log_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void exp_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_gradient_f32(
                int n,
                [In] float[] x,
                [Out] float[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] float[] dy,
                int offdy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_gradient_f32(
                int n,
                [In] float[] x,
                [Out] float[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] float[] dy,
                int offdy);

            [DllImport(NativeMethods.DllName)]
            public static extern float nrm1_f32(int n, [In] float[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern float nrm2_f32(int n, [In] float[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern float manhattan_distance_f32(int n, [In] float[] x, int offx, [In] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern float euclidean_distance_squared_f32(int n, [In] float[] x, int offx, [In] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern float euclidean_distance_f32(int n, [In] float[] x, int offx, [In] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int compare_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void copy_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void move_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void set_f64(int n, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void swap_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_ip_f64(int n, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_f64(int n, [In] double[] a, int offa, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void abs_gradient_f64(
                int n,
                [In] double[] x,
                [Out] double[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] double[] y,
                [In] double[] dy,
                int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_f64(int n, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_f64(int n, [In] double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_f64(int n, [In] double[] x, int offx, [In] double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_f64(int n, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_f64(int n, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_f64(int n, [In] double[] x, int offx, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_ip_f64(int n, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqr_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmin_f64(int n, [In] double[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern int argmax_f64(int n, [In] double[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern void argminmax_f64(int n, [In] double[] x, int offx, out int winmin, out int winmax);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_ip_f64(int n, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void minc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_ip_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void min_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_ip_f64(int n, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void maxc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_ip_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void max_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_lt_ip_f64(int n, double threshold, double value, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_gt_ip_f64(int n, double threshold, double value, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_ltgt_ip_f64(int n, double thresholdLT, double valueLT, double thresholdGT, double valueGT, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqrt_ip_f64(int n, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sqrt_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void log_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void exp_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_gradient_f64(
                int n,
                [In] double[] x,
                [Out] double[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] double[] dy,
                int offdy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_gradient_f64(
                int n,
                [In] double[] x,
                [Out] double[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] double[] dy,
                int offdy);

            [DllImport(NativeMethods.DllName)]
            public static extern double nrm1_f64(int n, [In] double[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern double nrm2_f64(int n, [In] double[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern double manhattan_distance_f64(int n, [In] double[] x, int offx, [In] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern double euclidean_distance_squared_f64(int n, [In] double[] x, int offx, [In] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern double euclidean_distance_f64(int n, [In] double[] x, int offx, [In] double[] y, int offy);
        }
    }
}