<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
<#@ include file="..\T4\MethodDescriptor.ttinclude"#>
// -----------------------------------------------------------------------
// <copyright file="Trigonometry.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

<#
    MethodDescriptor[] methods = new MethodDescriptor[]
    {
        new MethodDescriptor()
        {
            Name = "Sin",
            NativeName = "sin",
            Argument = ArgumentType.Vector,
            Summary = "Computes a sine logarithm of elements of an array of {0}",
            HasInPlace = true,
            HasGradient = true,
            Op = "y[i] = sin(x[i])",
            OpInPlace = "y[i] = sin(y[i])",
            SupportedTypes = "float;double",
        },
        new MethodDescriptor()
        {
            Name = "Cos",
            NativeName = "cos",
            Argument = ArgumentType.Vector,
            Summary = "Computes a cosine logarithm of elements of an array of {0}",
            HasInPlace = true,
            HasGradient = true,
            Op = "y[i] = cos(x[i])",
            OpInPlace = "y[i] = cos(y[i])",
            SupportedTypes = "float;double",
        },
        new MethodDescriptor()
        {
            Name = "Atan2",
            NativeName = "atan2",
            Argument = ArgumentType.TwoVectors,
            Summary = "Computes four-quadrant inverse tangent of elements of two arrays of {0}",
            HasInPlace = false,
            HasGradient = false,
            Op = "y[i] = atan2(a[i], b[i])",
            SupportedTypes = "float;double",
        },
    };
#>

namespace Genix.Core
{
    using System;
    using System.Diagnostics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;

    /// <content>
    /// Provides trigonometry methods for vectors manipulation.
    /// </content>
    [CLSCompliant(false)]
    public static class Trigonometry
    {
<#
    Tuple<string, string>[] types = 
    {
        Tuple.Create("float", "single-precision floating point numbers"),
        Tuple.Create("double", "double-precision floating point numbers"),
    };

    foreach (Tuple<string, string> type in types)
    {
        string typeName = type.Item1;
        string typeDescription = type.Item2;

        foreach (MethodDescriptor method in methods.Where(x => string.IsNullOrEmpty(x.SupportedTypes) || x.SupportedTypes.Split(new char[] {';'}).Contains(typeName)))
        {
            RenderMethod(method, typeName, typeDescription);
        } 
    }
#>

        [SuppressUnmanagedCodeSecurity]
        private static class NativeMethods
        {
            private const string DllName = "Genix.Core.Native.dll";
<#
    foreach (Tuple<string, string> type in types)
    {
        string typeName = type.Item1;

        foreach (MethodDescriptor method in methods.Where(x => string.IsNullOrEmpty(x.SupportedTypes) || x.SupportedTypes.Split(new char[] {';'}).Contains(typeName)))
        {
            RenderNativeMethod(method, typeName);
        }
    }
#>
        }
    }
}
