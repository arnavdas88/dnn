<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
<#@ include file="..\T4\MethodDescriptor.ttinclude"#>
// -----------------------------------------------------------------------
// <copyright file="Vectors.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

<#
    MethodDescriptor[] methods = new MethodDescriptor[]
    {
        new MethodDescriptor()
        {
            Name = "Copy",
            NativeName = "copy",
            Argument = ArgumentType.Vector,
            Summary = "Copies a range of {0} from an array starting at the specified source index to another array starting at the specified destination index",
            HasIncrement = true,
            Op = "y = x"
        },
        new MethodDescriptor()
        {
            Name = "Move",
            NativeName = "move",
            Argument = ArgumentType.Vector,
            Summary = "Copies an overlapping range of {0} from an array starting at the specified source index to another array starting at the specified destination index",
            Op = "y = x",
        },
        new MethodDescriptor()
        {
            Name = "Set",
            NativeName = "set",
            Argument = ArgumentType.Constant,
            Summary = "Sets all elements in the array of {0} starting at the specified source index to the specified value",
            HasIncrement = true,
            Op = "y[i] = a",
        },
        new MethodDescriptor()
        {
            Name = "Swap",
            NativeName = "swap",
            Argument = ArgumentType.Vector,
            Summary = "Swaps elements of two arrays of {0}",
            Op = "y = x, x = y",
        },
        new MethodDescriptor()
        {
            Name = "Neg",
            NativeName = "neg",
            Argument = ArgumentType.Vector,
            Summary = "Changes sign if elements in the array of {0}",
            HasInPlace = true,
            Op = "y[i] = -x[i]",
            OpInPlace = "y[i] = -y[i]",
            SupportedTypes = "sbyte;short;int;long;float;double",
        },
        new MethodDescriptor()
        {
            Name = "Abs",
            NativeName = "abs",
            Argument = ArgumentType.Vector,
            Summary = "Computes an absolute value of elements of an array of {0}",
            HasInPlace = true,
            HasGradient = true,
            Op = "y = abs(x)",
            OpInPlace = "y = abs(y)",
            SupportedTypes = "sbyte;short;int;long;float;double",
        },
        new MethodDescriptor()
        {
            Name = "Pow",
            NativeName = "powx",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Raises elements of an array of {0} to the scalar power",
            HasInPlace = true,
            HasGradient = true,
            ConstantName = "power",
            ConstantDescription = "The constant value for power.",
            Op = "y[i] = x[i] ^ power",
            OpInPlace = "y[i] = y[i] ^ power",
            OpGradient = "dx[i] += power * x[i] ^ (power - 1) * dy[i]",
            SupportedTypes = "float;double",
            },
        new MethodDescriptor()
        {
            Name = "Square",
            NativeName = "sqr",
            Argument = ArgumentType.Vector,
            Summary = "Squares elements of an array of {0}",
            HasInPlace = true,
            Op = "y[i] = x[i] * x[i]",
            OpInPlace = "y[i] = y[i] * y[i]",
            },
        new MethodDescriptor()
        {
            Name = "Sqrt",
            NativeName = "sqrt",
            Argument = ArgumentType.Vector,
            Summary = "Computes a square root of elements of an array of {0}",
            HasInPlace = true,
            Op = "y[i] = sqrt(x[i])",
            OpInPlace = "y[i] = sqrt(y[i])",
            SupportedTypes = "float;double",
            },
        new MethodDescriptor()
        {
            Name = "Log",
            NativeName = "log",
            Argument = ArgumentType.Vector,
            Summary = "Computes a natural logarithm of elements of an array of {0}",
            HasInPlace = true,
            Op = "y[i] = ln(x[i])",
            OpInPlace = "y[i] = ln(y[i])",
            SupportedTypes = "float;double",
            },
        new MethodDescriptor()
        {
            Name = "Exp",
            NativeName = "exp",
            Argument = ArgumentType.Vector,
            Summary = "Computes an exponential logarithm of elements of an array of {0}",
            HasInPlace = true,
            Op = "y[i] = exp(x[i])",
            OpInPlace = "y[i] = exp(y[i])",
            SupportedTypes = "float;double",
        },
        new MethodDescriptor()
        {
            Name = "ArgMin",
            NativeName = "argmin",
            Argument = ArgumentType.VectorAggregate,
            Summary = "Returns the position of minimum value in the array of {0}",
            HasInPlace = true,
            HasNotInPlace = false,
            HasIncrement = true,
            ReturnType = "int",
            Returns = "The zero-based index of minimum value in the array.",
            OpInPlace = "argmin(x)",
            },
        new MethodDescriptor()
        {
            Name = "Min",
            NativeName = "_min",
            Argument = ArgumentType.VectorAggregate,
            Summary = "Returns the minimum value in the array of {0}",
            HasInPlace = true,
            HasNotInPlace = false,
            HasIncrement = true,
            Returns = "The minimum value in the array.",
            OpInPlace = "x[argmin(x)]",
            },
        new MethodDescriptor()
        {
            Name = "ArgMax",
            NativeName = "argmax",
            Argument = ArgumentType.VectorAggregate,
            Summary = "Returns the position of maximum value in the array of {0}",
            HasInPlace = true,
            HasNotInPlace = false,
            HasIncrement = true,
            ReturnType = "int",
            Returns = "The zero-based index of maximum value in the array.",
            OpInPlace = "argmax(x)",
            },
        new MethodDescriptor()
        {
            Name = "Max",
            NativeName = "_max",
            Argument = ArgumentType.VectorAggregate,
            Summary = "Returns the maximum value in the array of {0}",
            HasInPlace = true,
            HasNotInPlace = false,
            HasIncrement = true,
            Returns = "The maximum value in the array.",
            OpInPlace = "x[argmax(x)]",
            },
        new MethodDescriptor()
        {
            Name = "MinC",
            NativeName = "minc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Computes a smaller of each element of an array of {0} and a constant value",
            HasInPlace = true,
            Op = "y[i] = min(y[i], a)",
            OpInPlace = "y[i] = min(x[i], a)",
            },
        new MethodDescriptor()
        {
            Name = "Min",
            NativeName = "min",
            Argument = ArgumentType.TwoVectors,
            Summary = "Computes a smaller of each element of two arrays of {0}",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y = min(a, b)",
            OpInPlace = "y = min(x, y)",
            },
        new MethodDescriptor()
        {
            Name = "MaxC",
            NativeName = "maxc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Computes a larger of each element of an array of {0} and a constant value",
            HasInPlace = true,
            Op = "y[i] = max(y[i], a)",
            OpInPlace = "y[i] = max(x[i], a)",
            },
        new MethodDescriptor()
        {
            Name = "Max",
            NativeName = "max",
            Argument = ArgumentType.TwoVectors,
            Summary = "Computes a larger of each element of two arrays of {0}",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y = max(a, b)",
            OpInPlace = "y = max(x, y)",
        },
        new MethodDescriptor()
        {
            Name = "SoftMax",
            NativeName = "softmax",
            Argument = ArgumentType.Vector,
            Summary = "Computes softmax probabilities for values of array of {0}",
            HasInPlace = true,
            Op = "y = softmax(x)",
            OpInPlace = "y = softmax(y)",
            SupportedTypes = "float;double",
        },
        new MethodDescriptor()
        {
            Name = "SoftMax",
            NativeName = "softmax_batch",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Computes softmax probabilities for values of batch array of {0}",
            HasInPlace = true,
            ConstantName = "batchLength",
            ConstantType = "int",
            ConstantDescription = "The length of a batch in the source array.",
            Op = "y = softmax(x)",
            OpInPlace = "y = softmax(y)",
            SupportedTypes = "float;double",
        },
        new MethodDescriptor()
        {
            Name = "SwapBits",
            NativeName = "swap_bits",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Reverses the order of groups of bits in each byte an array of {0}",
            HasInPlace = true,
            ConstantName = "bitCount",
            ConstantType = "int",
            ConstantDescription = "The number of bits in a group (1, 2, or 4).",
            Op = "{TBD}",
            OpInPlace = "{TBD}",
            SupportedTypes = "uint;ulong",
        },
        new MethodDescriptor()
        {
            Name = "Not",
            NativeName = "not",
            Argument = ArgumentType.Vector,
            Summary = "Performs logical NOT on array of {0}",
            HasInPlace = true,
            Op = "y[i] = ~x[i]",
            OpInPlace = "y[i] == ~y[i]",
            SupportedTypes = "uint;ulong",
        },
        new MethodDescriptor()
        {
            Name = "OrC",
            NativeName = "orc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Performs logical OR operation between elements of an array of {0} and a constant value",
            HasInPlace = true,
            Op = "y[i] = x[i] | a",
            OpInPlace = "y[i] |= a",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "Or",
            NativeName = "or",
            Argument = ArgumentType.TwoVectors,
            Summary = "Performs logical OR operation between elements of two arrays of {0}",
            HasInPlace = true,
            Op = "y = a | b",
            OpInPlace = "y |= x",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "Or",
            NativeName = "or3",
            Argument = ArgumentType.ThreeVectors,
            Summary = "Performs logical OR operation between elements of three arrays of {0}",
            Op = "y = a | b | c",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "Or",
            NativeName = "or4",
            Argument = ArgumentType.FourVectors,
            Summary = "Performs logical OR operation between elements of four arrays of {0}",
            Op = "y = a | b | c | d",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "AndC",
            NativeName = "andc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Performs logical AND operation between elements of an array of {0} and a constant value",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y[i] = x[i] &amp; a",
            OpInPlace = "y[i] &amp;= a",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "And",
            NativeName = "and",
            Argument = ArgumentType.TwoVectors,
            Summary = "Performs logical AND operation between elements of two arrays of {0}",
            HasInPlace = true,
            Op = "y = a &amp; b",
            OpInPlace = "y &amp;= x",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "And",
            NativeName = "and3",
            Argument = ArgumentType.ThreeVectors,
            Summary = "Performs logical AND operation between elements of three arrays of {0}",
            Op = "y = a &amp; b &amp; c",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "And",
            NativeName = "and4",
            Argument = ArgumentType.FourVectors,
            Summary = "Performs logical AND operation between elements of four arrays of {0}",
            Op = "y = a &amp; b &amp; c &amp; d",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "XorC",
            NativeName = "xorc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Performs logical XOR operation between elements of an array of {0} and a constant value",
            HasInPlace = true,
            Op = "y[i] = x[i] ^ a",
            OpInPlace = "y[i] ^= a",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "Xor",
            NativeName = "xor",
            Argument = ArgumentType.TwoVectors,
            Summary = "Performs logical XOR operation between elements of two arrays of {0}",
            HasInPlace = true,
            Op = "y = a ^ b",
            OpInPlace = "y ^= x",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "XandC",
            NativeName = "xandc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Performs logical XAND (A AND NOT B) operation between elements of an array of {0} and a constant value",
            HasInPlace = true,
            Op = "y[i] = x[i] &amp; ~a",
            OpInPlace = "y[i] &amp;= ~a",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "Xand",
            NativeName = "xand",
            Argument = ArgumentType.TwoVectors,
            Summary = "Performs logical XAND (A AND NOT B) operation between elements of two arrays of {0}",
            HasInPlace = true,
            Op = "y = a &amp; ~b",
            OpInPlace = "y &amp;= ~x",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "Shr",
            NativeName = "shr",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Shifts bits in the array of {0} to the right (from MSB to LSB)",
            ConstantName = "shift",
            ConstantType = "int",
            ConstantDescription = "The number of bits by which the method shifts each element.",
            HasInPlace = true,
            Op = "y = x &gt;&gt; shift",
            OpInPlace = "y &gt;&gt;= shift",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "Shl",
            NativeName = "shl",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Shifts bits in the array of {0} to the left (from LSB to MSB)",
            ConstantName = "shift",
            ConstantType = "int",
            ConstantDescription = "The number of bits by which the method shifts each element.",
            HasInPlace = true,
            Op = "y = x &lt;&lt; shift",
            OpInPlace = "y &lt;&lt;= shift",
            SupportedTypes = "uint;ulong",
            },
        new MethodDescriptor()
        {
            Name = "Sum",
            NativeName = "sum",
            Argument = ArgumentType.VectorAggregate,
            Summary = "Computes the sum of all elements in the array of {0}",
            HasInPlace = true,
            HasNotInPlace = false,
            Returns = "The sum of elements in the array.",
            OpInPlace = "sum(x[i])"
            },
        new MethodDescriptor()
        {
            Name = "CumulativeSum",
            NativeName = "cumulative_sum",
            Argument = ArgumentType.VectorAggregate,
            Summary = "Computes the cumulative sum of elements of an array of {0}",
            HasInPlace = true,
            Returns = "The sum of elements in <paramref name=\"x\"/>",
            Op = "sum(x[i])",
            OpInPlace = "sum(x[i])"
            },
        new MethodDescriptor()
        {
            Name = "Variance",
            NativeName = "variance",
            Argument = ArgumentType.VectorAggregate,
            Summary = "Computes the variance of all elements in the array of {0}",
            HasInPlace = true,
            HasNotInPlace = false,
            Returns = "The variance of elements in the array.",
            OpInPlace = "variance(x)",
            SupportedTypes = "float;double",
            },
        new MethodDescriptor()
        {
            Name = "HammingDistance",
            NativeName = "hamming_distance",
            Argument = ArgumentType.TwoVectorsAggregate,
            Summary = "Computes the Hamming distance between the two arrays of {0}",
            HasInPlace = true,
            HasNotInPlace = false,
            Returns = "The computed Hamming distance between the two arrays of {0}.",
            OpInPlace = "popcnt(a ^ b)",
            SupportedTypes = "uint;ulong",
            },
        };
#>

namespace Genix.Core
{
    using System;
    using System.Diagnostics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;

    /// <summary>
    /// Provides mathematical methods for numeric vectors manipulation.
    /// </summary>
    [CLSCompliant(false)]
    public static class Vectors
    {
<#
	Tuple<string, string, bool, bool>[] types = 
	{
		Tuple.Create("sbyte", "8-bit signed integers", true, false),
		Tuple.Create("byte", "8-bit unsigned integers", false, false),
		Tuple.Create("short", "16-bit signed integers", true, false),
		Tuple.Create("ushort", "16-bit unsigned integers", false, false),
		Tuple.Create("int", "32-bit signed integers", true, false),
		Tuple.Create("uint", "32-bit unsigned integers", false, false),
		Tuple.Create("long", "64-bit signed integers", true, false),
		Tuple.Create("ulong", "64-bit unsigned integers", false, false),
		Tuple.Create("float", "single-precision floating point numbers", true, true),
		Tuple.Create("double", "double-precision floating point numbers", true, true),
	};

	foreach (Tuple<string, string, bool, bool> type in types)
	{
		string typeName = type.Item1;
		string typeDescription = type.Item2;
		bool isSigned = type.Item3;
		bool isFloating = type.Item4;
#>

        /// <summary>
        /// Creates an array of <#=typeDescription#> with the specified length and starting value.
        /// </summary>
        /// <param name="length">The number of elements in the array.</param>
        /// <param name="value">The initial value for the array values.</param>
        /// <returns>
        /// The allocated array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typeName#>[] Create(int length, <#=typeName#> value)
        {
            <#=typeName#>[] a = new <#=typeName#>[length];
            if (value != default(<#=typeName#>))
            {
                Vectors.Set(length, value, a, 0);
            }

            return a;
        }

        /// <summary>
        /// Determines whether the two arrays of <#=typeDescription#> contain same data.
        /// </summary>
        /// <param name="length">The number of elements to compare.</param>
        /// <param name="x">The first array to compare.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array to compare.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// <b>true</b> if two arrays contain same data; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Equals(int length, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            return NativeMethods.compare_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx, y, offy) == 0;
        }
<#
    foreach (MethodDescriptor method in methods.Where(x => string.IsNullOrEmpty(x.SupportedTypes) || x.SupportedTypes.Split(new char[] {';'}).Contains(typeName)))
    {
        RenderMethod(method, typeName, typeDescription);
    } 
#>

        /// <summary>
        /// Clips elements of an array of <#=typeDescription#> to a specified minimum and maximum values.
        /// </summary>
        /// <param name="length">The number of elements to clip.</param>
        /// <param name="minValue">The minimum value to clip by.</param>
        /// <param name="maxValue">The maximum value to clip by.</param>
        /// <param name="x">The source destination array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>x(offx + i) := min(max(x(offx + i), minValue), maxValue)</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Clip(int length, <#=typeName#> minValue, <#=typeName#> maxValue, <#=typeName#>[] x, int offx)
        {
<#
        if (isFloating)
        {
#>
            if (!<#=typeName#>.IsNaN(minValue))
            {
                Vectors.MaxC(length, minValue, x, offx);
            }

            if (!<#=typeName#>.IsNaN(maxValue))
            {
                Vectors.MinC(length, maxValue, x, offx);
            }
<#
        }
        else
        {
#>
            Vectors.MaxC(length, minValue, x, offx);
            Vectors.MinC(length, maxValue, x, offx);
<#
        }
#>
        }

        /// <summary>
        /// Creates an array of <#=typeDescription#> initialized to one values.
        /// </summary>
        /// <param name="length">The number of elements in the array.</param>
        /// <param name="a">The allocated array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Ones(int length, out <#=typeName#>[] a)
        {
            a = new <#=typeName#>[length];
            Vectors.Set(length, 1, a, 0);
        }

        /// <summary>
        /// Copies a range of values from a array of <#=typeDescription#> starting at the specified source index
        /// to another array starting at the specified destination index
        /// specified number of times.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="count">The number of times to copy <paramref name="x"/>.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Tile(int length, int count, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            for (int i = 0; i < count; i++, offy += length)
            {
                Vectors.Copy(length, x, offx, y, offy);
            }
        }

        /// <summary>
        /// Copies a range of values from a array of <#=typeDescription#> to another array specified number of times.
        /// </summary>
        /// <param name="length">The number of elements to copy.</param>
        /// <param name="count">The number of times to copy <paramref name="x"/>.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The destination.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Tile(int length, int count, <#=typeName#>* x, <#=typeName#>* y)
        {
            for (int i = 0; i < count; i++, y += length)
            {
                Vectors.Copy(length, x, y);
            }
        }

        /// <summary>
        /// Returns the position of minimum and maximum values in the array of <#=typeDescription#>.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The position of minimum value in the array.</param>
        /// <param name="max">The position of maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ArgMinMax(int length, <#=typeName#>[] x, int offx, out int min, out int max)
        {
            NativeMethods.argminmax_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx, out min, out max);
        }

        /// <summary>
        /// Returns the minimum and maximum values in the array of <#=typeDescription#>.
        /// </summary>
        /// <param name="length">The number of elements to evaluate.</param>
        /// <param name="x">The array that contains data used for evaluation.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="min">The minimum value in the array.</param>
        /// <param name="max">The maximum value in the array.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinMax(int length, <#=typeName#>[] x, int offx, out <#=typeName#> min, out <#=typeName#> max)
        {
            Vectors.ArgMinMax(length, x, offx, out int argmin, out int argmax);
            min = x[argmin];
            max = x[argmax];
        }
<#          if (typeName == "float" || typeName == "double") { #>

        /// <summary>
        /// Computes the derivative of the arguments of the <see cref="Vectors.Min(int, <#=typeName#>[], int, <#=typeName#>[], int, <#=typeName#>[], int)"/>
        /// and <see cref="Vectors.Max(int, <#=typeName#>[], int, <#=typeName#>[], int, <#=typeName#>[], int)"/> methods.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">One of the <see cref="Vectors.Min(int, <#=typeName#>[], int, <#=typeName#>[], int, <#=typeName#>[], int)"/> or
        /// <see cref="Vectors.Max(int, <#=typeName#>[], int, <#=typeName#>[], int, <#=typeName#>[], int)"/> methods input arrays <c>a</c> or <c>b</c>.</param>
        /// <param name="dx">The array that contains calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The index in the <paramref name="x"/> and <paramref name="dx"/> at which computation begins.</param>
        /// <param name="cleardx">Specifies whether the <paramref name="dx"/> should be cleared before operation.</param>
        /// <param name="y">The <see cref="Vectors.Min(int, <#=typeName#>[], int, <#=typeName#>[], int, <#=typeName#>[], int)"/> or
        /// <see cref="Vectors.Max(int, <#=typeName#>[], int, <#=typeName#>[], int, <#=typeName#>[], int)"/> methods output array <paramref name="y"/>.</param>
        /// <param name="dy">The array that contains gradient for <paramref name="y"/>.</param>
        /// <param name="offy">The index in the <paramref name="y"/> and <paramref name="dy"/> at which calculation begins.</param>
        /// <remarks>
        /// The method performs operation defined as <c>dx[i] += x[i] == y[i] ? dy[i] : 0</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MinMaxGradient(int length, <#=typeName#>[] x, <#=typeName#>[] dx, int offx, bool cleardx, <#=typeName#>[] y, <#=typeName#>[] dy, int offy)
        {
            NativeMethods.minmax_gradient_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, dx, offx, cleardx, y, dy, offy);
        }
<#          } #>
 
        /// <summary>
        /// Performs thresholding of elements of an array of <#=typeDescription#>.
        /// Elements that are less than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is smaller than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLT(int length, <#=typeName#> threshold, <#=typeName#> value, <#=typeName#>[] y, int offy)
        {
            NativeMethods.threshold_lt_ip_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of <#=typeDescription#>.
        /// Elements that are greater than the threshold, are set to a specified value.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="threshold">The threshold value to use for each element.</param>
        /// <param name="value">The value to set for each element that is greater than the <paramref name="threshold"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdGT(int length, <#=typeName#> threshold, <#=typeName#> value, <#=typeName#>[] y, int offy)
        {
            NativeMethods.threshold_gt_ip_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, threshold, value, y, offy);
        }

        /// <summary>
        /// Performs thresholding of elements of an array of <#=typeDescription#>.
        /// Elements that are smaller or greater than the thresholds, are set to a specified values.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="thresholdLT">The lower threshold value to use for each element.</param>
        /// <param name="valueLT">The value to set for each element that is smaller than the <paramref name="thresholdLT"/>.</param>
        /// <param name="thresholdGT">The upper threshold value to use for each element.</param>
        /// <param name="valueGT">The value to set for each element that is greater than the <paramref name="thresholdGT"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void ThresholdLTGT(int length, <#=typeName#> thresholdLT, <#=typeName#> valueLT, <#=typeName#> thresholdGT, <#=typeName#> valueGT, <#=typeName#>[] y, int offy)
        {
            NativeMethods.threshold_ltgt_ip_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, thresholdLT, valueLT, thresholdGT, valueGT, y, offy);
        }
<#
        if (isFloating)
        {
#>

        /// <summary>
        /// Computes the L1-Norm (sum of magnitudes) of the array of <#=typeDescription#> elements.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The L1-Norm of elements in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typeName#> L1Norm(int length, <#=typeName#>[] x, int offx)
        {
            return NativeMethods.nrm1_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx);
        }

        /// <summary>
        /// Computes the L2-Norm (Euclidian norm) of the array of <#=typeDescription#> elements.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <returns>
        /// The L2-Norm of elements in the array.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typeName#> L2Norm(int length, <#=typeName#>[] x, int offx)
        {
            return NativeMethods.nrm2_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx);
        }

        /// <summary>
        /// Computes the Manhattan distance between elements of two arrays of <#=typeDescription#>.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Manhattan distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sum(abs(x[i] - y[i])).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typeName#> ManhattanDistance(int length, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            return NativeMethods.manhattan_distance_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the squared Euclidean distance between elements of two arrays of <#=typeDescription#>.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Euclidean distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sum((x[i] - y[i])^2).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typeName#> EuclideanDistanceSquared(int length, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            return NativeMethods.euclidean_distance_squared_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes the Euclidean distance between elements of two arrays of <#=typeDescription#>.
        /// </summary>
        /// <param name="length">The number of elements to calculate.</param>
        /// <param name="x">The first array <paramref name="x"/>.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The second array <paramref name="y"/>.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <returns>
        /// The Euclidean distance between elements of two arrays.
        /// </returns>
        /// <remarks>
        /// The method performs operation defined as sqrt(sum((x[i] - y[i])^2)).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=typeName#> EuclideanDistance(int length, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            return NativeMethods.euclidean_distance_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx, y, offy);
        }
<#      }#>

        /// <summary>
        /// Sorts the elements in a range of elements in an array of <#=typeDescription#>.
        /// </summary>
        /// <param name="length">The number of elements in the range to sort.</param>
        /// <param name="x">The array to sort.</param>
        /// <param name="offx">The index in the <paramref name="x"/> at which sorting begins.</param>
        /// <param name="ascending"><b>true</b> to use ascending sorting order; <b>false</b> to use descending sorting order.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sort(int length, <#=typeName#>[] x, int offx, bool ascending)
        {
            NativeMethods.qsort_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx, ascending);
        }

        /// <summary>
        /// Sorts the elements in a range of elements in a pair of arrays
        /// (one contains the keys and the other contains the corresponding items)
        /// based on the keys in the first array.
        /// </summary>
        /// <param name="length">The number of elements in the range to sort.</param>
        /// <param name="x">The array that contains the keys to sort.</param>
        /// <param name="offx">The index in the <paramref name="x"/> at which sorting begins.</param>
        /// <param name="y">The array that contains the items that correspond to each of the keys in the <paramref name="x"/>.</param>
        /// <param name="offy">The index in the <paramref name="y"/> at which sorting begins.</param>
        /// <param name="ascending"><b>true</b> to use ascending sorting order; <b>false</b> to use descending sorting order.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sort(int length, <#=typeName#>[] x, int offx, int[] y, int offy, bool ascending)
        {
            NativeMethods.qsortv_<#=MethodDescriptor.Type2Suffix(typeName)#>(length, x, offx, y, offy, ascending);
        }
<#  }#>

        [SuppressUnmanagedCodeSecurity]
        private static class NativeMethods
        {
            private const string DllName = "Genix.Core.Native.dll";
<#
    foreach (Tuple<string, string, bool, bool> type in types)
    {
        string typeName = type.Item1;
        string typeDescription = type.Item2;
        bool isSigned = type.Item3;
        bool isFloating = type.Item4;
#>

            [DllImport(NativeMethods.DllName)]
            public static extern int compare_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, [In] <#=typeName#>[] x, int offx, [Out] <#=typeName#>[] y, int offy);
<#
        foreach (MethodDescriptor method in methods.Where(x => string.IsNullOrEmpty(x.SupportedTypes) || x.SupportedTypes.Split(new char[] {';'}).Contains(typeName)))
        {
            RenderNativeMethod(method, typeName);
        }
#>

            [DllImport(NativeMethods.DllName)]
            public static extern void argminmax_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, [In] <#=typeName#>[] x, int offx, out int winmin, out int winmax);

<#          if (typeName == "float" || typeName == "double") { #>
            [DllImport(NativeMethods.DllName)]
            public static extern void minmax_gradient_<#=MethodDescriptor.Type2Suffix(typeName)#>(
                int n,
                [In] <#=typeName#>[] x,
                [Out] <#=typeName#>[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] <#=typeName#>[] y,
                [In] <#=typeName#>[] dy,
                int offy);
<#          } #>

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_lt_ip_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, <#=typeName#> threshold, <#=typeName#> value, [In, Out] <#=typeName#>[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_gt_ip_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, <#=typeName#> threshold, <#=typeName#> value, [In, Out] <#=typeName#>[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void threshold_ltgt_ip_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, <#=typeName#> thresholdLT, <#=typeName#> valueLT, <#=typeName#> thresholdGT, <#=typeName#> valueGT, [In, Out] <#=typeName#>[] y, int offy);
<#      if (isFloating)
        {#>

            [DllImport(NativeMethods.DllName)]
            public static extern <#=typeName#> nrm1_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, [In] <#=typeName#>[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern <#=typeName#> nrm2_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, [In] <#=typeName#>[] x, int offx);

            [DllImport(NativeMethods.DllName)]
            public static extern <#=typeName#> manhattan_distance_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, [In] <#=typeName#>[] x, int offx, [In] <#=typeName#>[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern <#=typeName#> euclidean_distance_squared_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, [In] <#=typeName#>[] x, int offx, [In] <#=typeName#>[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern <#=typeName#> euclidean_distance_<#=MethodDescriptor.Type2Suffix(typeName)#>(int n, [In] <#=typeName#>[] x, int offx, [In] <#=typeName#>[] y, int offy);
<#      }#>

            [DllImport(NativeMethods.DllName)]
            public static extern void qsort_<#=MethodDescriptor.Type2Suffix(typeName)#>(
                int n,
                [In, Out] <#=typeName#>[] x,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool ascending);

            [DllImport(NativeMethods.DllName)]
            public static extern void qsortv_<#=MethodDescriptor.Type2Suffix(typeName)#>(
                int n,
                [In, Out] <#=typeName#>[] x,
                int offx,
                [In, Out] int[] y,
                int offy,
                [MarshalAs(UnmanagedType.Bool)] bool ascending);
<#  }#>
        }
    }
}
