// -----------------------------------------------------------------------
// <copyright file="Trigonometry.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 11/28/2018 12:04:24 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Genix.Core
{
    using System;
    using System.Diagnostics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;

    /// <content>
    /// Provides trigonometry methods for vectors manipulation.
    /// </content>
    [CLSCompliant(false)]
    public static class Trigonometry
    {

        /// <summary>
        /// Computes a sine logarithm of elements of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = sin(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sin(int length, float[] y, int offy)
        {
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.sin_ip_f32(length, y, offy);
        }

        /// <summary>
        /// Computes a sine logarithm of elements of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = sin(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sin(int length, float* y)
        {
            NativeMethods.sin_ip_f32(length, y, 0);
        }

        /// <summary>
        /// Computes a sine logarithm of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// <para>The method performs operation defined as <c>y[i] = sin(x[i])</c>.</para>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sin(int length, float[] x, int offx, float[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.sin_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a sine logarithm of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// <para>The method performs operation defined as <c>y[i] = sin(x[i])</c>.</para>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sin(int length, float* x, float* y)
        {
            NativeMethods.sin_f32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Sin(int, float[], int, float[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Sin(int, float[], int, float[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="y">The <see cref="Sin(int, float[], int, float[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="dy">The array that contains gradient <see cref="Sin(int, float[], int, float[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="offdy">The starting element position in <paramref name="dy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SinGradient(int length, float[] x, float[] dx, int offx, bool cleardx, float[] y, float[] dy, int offdy)
        {
            NativeMethods.sin_gradient_f32(length, x, dx, offx, cleardx, y, dy, offdy);
        }

        /// <summary>
        /// Computes a cosine logarithm of elements of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = cos(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Cos(int length, float[] y, int offy)
        {
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.cos_ip_f32(length, y, offy);
        }

        /// <summary>
        /// Computes a cosine logarithm of elements of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = cos(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Cos(int length, float* y)
        {
            NativeMethods.cos_ip_f32(length, y, 0);
        }

        /// <summary>
        /// Computes a cosine logarithm of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// <para>The method performs operation defined as <c>y[i] = cos(x[i])</c>.</para>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Cos(int length, float[] x, int offx, float[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.cos_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a cosine logarithm of elements of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// <para>The method performs operation defined as <c>y[i] = cos(x[i])</c>.</para>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Cos(int length, float* x, float* y)
        {
            NativeMethods.cos_f32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Cos(int, float[], int, float[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Cos(int, float[], int, float[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="y">The <see cref="Cos(int, float[], int, float[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="dy">The array that contains gradient <see cref="Cos(int, float[], int, float[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="offdy">The starting element position in <paramref name="dy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void CosGradient(int length, float[] x, float[] dx, int offx, bool cleardx, float[] y, float[] dy, int offdy)
        {
            NativeMethods.cos_gradient_f32(length, x, dx, offx, cleardx, y, dy, offdy);
        }

        /// <summary>
        /// Computes four-quadrant inverse tangent of elements of two arrays of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = atan2(a[i], b[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Atan2(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.atan2_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Computes four-quadrant inverse tangent of elements of two arrays of single-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = atan2(a[i], b[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Atan2(int length, float* a, float* b, float* y)
        {
            NativeMethods.atan2_f32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Computes a sine logarithm of elements of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = sin(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sin(int length, double[] y, int offy)
        {
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.sin_ip_f64(length, y, offy);
        }

        /// <summary>
        /// Computes a sine logarithm of elements of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = sin(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sin(int length, double* y)
        {
            NativeMethods.sin_ip_f64(length, y, 0);
        }

        /// <summary>
        /// Computes a sine logarithm of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// <para>The method performs operation defined as <c>y[i] = sin(x[i])</c>.</para>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sin(int length, double[] x, int offx, double[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.sin_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a sine logarithm of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// <para>The method performs operation defined as <c>y[i] = sin(x[i])</c>.</para>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sin(int length, double* x, double* y)
        {
            NativeMethods.sin_f64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Sin(int, double[], int, double[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Sin(int, double[], int, double[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="y">The <see cref="Sin(int, double[], int, double[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="dy">The array that contains gradient <see cref="Sin(int, double[], int, double[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="offdy">The starting element position in <paramref name="dy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SinGradient(int length, double[] x, double[] dx, int offx, bool cleardx, double[] y, double[] dy, int offdy)
        {
            NativeMethods.sin_gradient_f64(length, x, dx, offx, cleardx, y, dy, offdy);
        }

        /// <summary>
        /// Computes a cosine logarithm of elements of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = cos(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Cos(int length, double[] y, int offy)
        {
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.cos_ip_f64(length, y, offy);
        }

        /// <summary>
        /// Computes a cosine logarithm of elements of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = cos(y[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Cos(int length, double* y)
        {
            NativeMethods.cos_ip_f64(length, y, 0);
        }

        /// <summary>
        /// Computes a cosine logarithm of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// <para>The method performs operation defined as <c>y[i] = cos(x[i])</c>.</para>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Cos(int length, double[] x, int offx, double[] y, int offy)
        {
            Debug.Assert(x.Length > offx + length - 1, "The source array should be big enough.");
            Debug.Assert(y.Length > offy + length - 1, "The destination array should be big enough.");
            NativeMethods.cos_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Computes a cosine logarithm of elements of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// <para>The method performs operation defined as <c>y[i] = cos(x[i])</c>.</para>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Cos(int length, double* x, double* y)
        {
            NativeMethods.cos_f64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Computes the derivative of the argument of the <see cref="Cos(int, double[], int, double[], int)"/> method.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The <see cref="Cos(int, double[], int, double[], int)"/> method argument <paramref name="x"/>.</param>
        /// <param name="dx">The destination array that receives calculated gradient for <paramref name="x"/>.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/> and <paramref name="dx"/>.</param>
        /// <param name="cleardx">Specifies whether <paramref name="dx"/> should be cleared before computation starts.</param>
        /// <param name="y">The <see cref="Cos(int, double[], int, double[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="dy">The array that contains gradient <see cref="Cos(int, double[], int, double[], int)"/> method argument <paramref name="y"/>.</param>
        /// <param name="offdy">The starting element position in <paramref name="dy"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void CosGradient(int length, double[] x, double[] dx, int offx, bool cleardx, double[] y, double[] dy, int offdy)
        {
            NativeMethods.cos_gradient_f64(length, x, dx, offx, cleardx, y, dy, offdy);
        }

        /// <summary>
        /// Computes four-quadrant inverse tangent of elements of two arrays of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = atan2(a[i], b[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Atan2(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.atan2_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Computes four-quadrant inverse tangent of elements of two arrays of double-precision floating point numbers.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = atan2(a[i], b[i])</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Atan2(int length, double* a, double* b, double* y)
        {
            NativeMethods.atan2_f64(length, a, 0, b, 0, y, 0);
        }

        [SuppressUnmanagedCodeSecurity]
        private static class NativeMethods
        {
            private const string DllName = "Genix.Core.Native.dll";

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_ip_f32(int n, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sin_ip_f32(int n, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sin_f32(int n, [In] float* x, int offx, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_gradient_f32(
                int n,
                [In] float[] x,
                [Out] float[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] float[] y,
                [In] float[] dy,
                int offdy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_ip_f32(int n, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void cos_ip_f32(int n, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_f32(int n, [In] float[] x, int offx, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void cos_f32(int n, [In] float* x, int offx, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_gradient_f32(
                int n,
                [In] float[] x,
                [Out] float[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] float[] y,
                [In] float[] dy,
                int offdy);

            [DllImport(NativeMethods.DllName)]
            public static extern void atan2_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void atan2_f32(int n, [In] float* a, int offa, [In] float* b, int offb, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_ip_f64(int n, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sin_ip_f64(int n, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sin_f64(int n, [In] double* x, int offx, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sin_gradient_f64(
                int n,
                [In] double[] x,
                [Out] double[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] double[] y,
                [In] double[] dy,
                int offdy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_ip_f64(int n, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void cos_ip_f64(int n, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_f64(int n, [In] double[] x, int offx, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void cos_f64(int n, [In] double* x, int offx, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void cos_gradient_f64(
                int n,
                [In] double[] x,
                [Out] double[] dx,
                int offx,
                [MarshalAs(UnmanagedType.Bool)] bool cleardx,
                [In] double[] y,
                [In] double[] dy,
                int offdy);

            [DllImport(NativeMethods.DllName)]
            public static extern void atan2_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void atan2_f64(int n, [In] double* a, int offa, [In] double* b, int offb, [Out] double* y, int offy);
        }
    }
}
