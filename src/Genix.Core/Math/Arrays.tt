<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
// -----------------------------------------------------------------------
// <copyright file="Arrays.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core
{
    using System;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;

    /// <summary>
    /// Provides array manipulation methods.
    /// </summary>
    [CLSCompliant(false)]
    public static partial class Arrays
    {
<#
				Tuple<string, string, string>[] types = 
								{
								Tuple.Create("uint", "u32", "32-bit unsigned integers"),
								Tuple.Create("ulong", "u64", "64-bit unsigned integers"),
								};

				foreach (Tuple<string, string, string> type in types)
				{
								string typeName = type.Item1;
								string nativeSuffix = type.Item2;
								string typeDescription = type.Item3;
#>
        /// <summary>
        /// Performs logical OR operation on two arrays of <#=typeDescription#> in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Or(int length, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            NativeMethods.or_ip_<#=nativeSuffix#>(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical AND operation on two arrays of <#=typeDescription#> in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void And(int length, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            NativeMethods.and_ip_<#=nativeSuffix#>(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical XOR operation on two arrays of <#=typeDescription#> in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xor(int length, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            NativeMethods.xor_ip_<#=nativeSuffix#>(length, x, offx, y, offy);
        }

        /// <summary>
        /// Performs logical XAND (A AND NOT B) operation on two arrays of <#=typeDescription#> in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Xand(int length, <#=typeName#>[] x, int offx, <#=typeName#>[] y, int offy)
        {
            NativeMethods.xand_ip_<#=nativeSuffix#>(length, x, offx, y, offy);
        }

<#
				}
#>
        [SuppressUnmanagedCodeSecurity]
        private static partial class NativeMethods
        {
            ////private const string DllName = "Genix.Core.Native.dll";
<#
				foreach (Tuple<string, string, string> type in types)
				{
								string typeName = type.Item1;
								string nativeSuffix = type.Item2;
								string typeDescription = type.Item3;
#>

            [DllImport(NativeMethods.DllName)]
            public static extern void or_ip_<#=nativeSuffix#>(int length, [In] <#=typeName#>[] x, int offx, [Out] <#=typeName#>[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void and_ip_<#=nativeSuffix#>(int length, [In] <#=typeName#>[] x, int offx, [Out] <#=typeName#>[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xor_ip_<#=nativeSuffix#>(int length, [In] <#=typeName#>[] x, int offx, [Out] <#=typeName#>[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void xand_ip_<#=nativeSuffix#>(int length, [In] <#=typeName#>[] x, int offx, [Out] <#=typeName#>[] y, int offy);
<#
				}
#>
        }
    }
}