// -----------------------------------------------------------------------
// <copyright file="MinMax.tt" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core
{
    using System;
    using System.Runtime.CompilerServices;

    /// <summary>
    /// Provides mathematical methods for computing minimum and maximum values.
    /// </summary>
    [CLSCompliant(false)]
    public static class MinMax
    {
<#
				Tuple<string, string>[] types = 
								{
								Tuple.Create("sbyte", "8-bit signed integers"),
								Tuple.Create("byte", "8-bit unsigned integers"),
								Tuple.Create("short", "16-bit signed integers"),
								Tuple.Create("ushort", "16-bit unsigned integers"),
								Tuple.Create("int", "32-bit signed integers"),
								Tuple.Create("uint", "32-bit unsigned integers"),
								Tuple.Create("long", "64-bit signed integers"),
								Tuple.Create("ulong", "64-bit unsigned integers"),
								Tuple.Create("float", "single-precision floating point numbers"),
								Tuple.Create("double", "double-precision floating point numbers"),
								};

				foreach (Tuple<string, string> type in types)
				{
								string name = type.Item1;
								string desc = type.Item2;
#>
        /// <summary>
        /// Returns the larger of two <#=desc#>.
        /// </summary>
        /// <param name="a">The first of two <#=desc#> to compare.</param>
        /// <param name="b">The second of two <#=desc#> to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=name#> Max(<#=name#> a, <#=name#> b) => a >= b ? a : b;

        /// <summary>
        /// Returns the larger of three <#=desc#>.
        /// </summary>
        /// <param name="a">The first of three <#=desc#> to compare.</param>
        /// <param name="b">The second of three <#=desc#> to compare.</param>
        /// <param name="c">The third of three <#=desc#> to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=name#> Max(<#=name#> a, <#=name#> b, <#=name#> c)
        {
            <#=name#> ab = MinMax.Max(a, b);
            return MinMax.Max(ab, c);
        }

        /// <summary>
        /// Returns the larger of four <#=desc#>.
        /// </summary>
        /// <param name="a">The first of four <#=desc#> to compare.</param>
        /// <param name="b">The second of four <#=desc#> to compare.</param>
        /// <param name="c">The third of four <#=desc#> to compare.</param>
        /// <param name="d">The forth of four <#=desc#> to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is larger.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=name#> Max(<#=name#> a, <#=name#> b, <#=name#> c, <#=name#> d)
        {
            <#=name#> ab = MinMax.Max(a, b);
            <#=name#> cd = MinMax.Max(c, d);
            return MinMax.Max(ab, cd);
        }

        /// <summary>
        /// Returns the smaller of two <#=desc#>.
        /// </summary>
        /// <param name="a">The first of two <#=desc#> to compare.</param>
        /// <param name="b">The second of two <#=desc#> to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=name#> Min(<#=name#> a, <#=name#> b) => a <= b ? a : b;

        /// <summary>
        /// Returns the smaller of three <#=desc#>.
        /// </summary>
        /// <param name="a">The first of three <#=desc#> to compare.</param>
        /// <param name="b">The second of three <#=desc#> to compare.</param>
        /// <param name="c">The third of three <#=desc#> to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=name#> Min(<#=name#> a, <#=name#> b, <#=name#> c)
        {
            <#=name#> ab = MinMax.Min(a, b);
            return MinMax.Min(ab, c);
        }

        /// <summary>
        /// Returns the smaller of four <#=desc#>.
        /// </summary>
        /// <param name="a">The first of four <#=desc#> to compare.</param>
        /// <param name="b">The second of four <#=desc#> to compare.</param>
        /// <param name="c">The third of four <#=desc#> to compare.</param>
        /// <param name="d">The forth of four <#=desc#> to compare.</param>
        /// <returns>
        /// Parameter <paramref name="a"/> or <paramref name="b"/> or <paramref name="c"/> or <paramref name="d"/>, whichever is smaller.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=name#> Min(<#=name#> a, <#=name#> b, <#=name#> c, <#=name#> d)
        {
            <#=name#> ab = MinMax.Min(a, b);
            <#=name#> cd = MinMax.Min(c, d);
            return MinMax.Min(ab, cd);
        }

<#
				}
#>
    }
}