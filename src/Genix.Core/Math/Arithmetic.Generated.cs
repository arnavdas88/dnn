// -----------------------------------------------------------------------
// <copyright file="Arithmetic.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 11/29/2018 12:14:49 AM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Genix.Core
{
    using System;
    using System.Diagnostics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;

    /// <content>
    /// Provides arithmetic operations on vectors.
    /// </content>
    [CLSCompliant(false)]
    public static partial class Mathematics
    {

        /// <summary>
        /// Adds the elements of two arrays of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, sbyte[] x, int offx, sbyte[] y, int offy)
        {
            NativeMethods.add_ip_s8(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, sbyte* x, sbyte* y)
        {
            NativeMethods.add_ip_s8(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, sbyte[] x, int offx, int incx, sbyte[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_s8(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, sbyte* x, int incx, sbyte* y, int incy)
        {
            NativeMethods.add_inc_ip_s8(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, sbyte[] a, int offa, sbyte[] b, int offb, sbyte[] y, int offy)
        {
            NativeMethods.add_s8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, sbyte* a, sbyte* b, sbyte* y)
        {
            NativeMethods.add_s8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, sbyte[] a, int offa, int inca, sbyte[] b, int offb, int incb, sbyte[] y, int offy, int incy)
        {
            NativeMethods.add_inc_s8(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, sbyte* a, int inca, sbyte* b, int incb, sbyte* y, int incy)
        {
            NativeMethods.add_inc_s8(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.addc_ip_s8(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, sbyte a, sbyte* y)
        {
            NativeMethods.addc_ip_s8(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_s8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.addc_inc_ip_s8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, sbyte[] x, int offx, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.addc_s8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, sbyte* x, sbyte a, sbyte* y)
        {
            NativeMethods.addc_s8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, sbyte[] x, int offx, int incx, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_s8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, sbyte* x, int incx, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.addc_inc_s8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 8-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, sbyte[] x, int offx, sbyte alpha, sbyte[] y, int offy)
        {
            NativeMethods.addproductc_s8(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 8-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, sbyte* x, sbyte alpha, sbyte* y)
        {
            NativeMethods.addproductc_s8(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 8-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, sbyte[] a, int offa, sbyte[] b, int offb, sbyte[] y, int offy)
        {
            NativeMethods.addproduct_s8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 8-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, sbyte* a, sbyte* b, sbyte* y)
        {
            NativeMethods.addproduct_s8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, sbyte[] x, int offx, sbyte[] y, int offy)
        {
            NativeMethods.sub_ip_s8(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, sbyte* x, sbyte* y)
        {
            NativeMethods.sub_ip_s8(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, sbyte[] x, int offx, int incx, sbyte[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_s8(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, sbyte* x, int incx, sbyte* y, int incy)
        {
            NativeMethods.sub_inc_ip_s8(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, sbyte[] a, int offa, sbyte[] b, int offb, sbyte[] y, int offy)
        {
            NativeMethods.sub_s8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, sbyte* a, sbyte* b, sbyte* y)
        {
            NativeMethods.sub_s8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, sbyte[] a, int offa, int inca, sbyte[] b, int offb, int incb, sbyte[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_s8(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, sbyte* a, int inca, sbyte* b, int incb, sbyte* y, int incy)
        {
            NativeMethods.sub_inc_s8(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.subc_ip_s8(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, sbyte a, sbyte* y)
        {
            NativeMethods.subc_ip_s8(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_s8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.subc_inc_ip_s8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, sbyte[] x, int offx, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.subc_s8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, sbyte* x, sbyte a, sbyte* y)
        {
            NativeMethods.subc_s8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, sbyte[] x, int offx, int incx, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_s8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, sbyte* x, int incx, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.subc_inc_s8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit signed integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.subrevc_ip_s8(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit signed integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, sbyte a, sbyte* y)
        {
            NativeMethods.subrevc_ip_s8(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit signed integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_s8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit signed integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_s8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit signed integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, sbyte[] x, int offx, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.subrevc_s8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit signed integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, sbyte* x, sbyte a, sbyte* y)
        {
            NativeMethods.subrevc_s8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit signed integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, sbyte[] x, int offx, int incx, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_s8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit signed integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, sbyte* x, int incx, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.subrevc_inc_s8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, sbyte[] x, int offx, sbyte[] y, int offy)
        {
            NativeMethods.mul_ip_s8(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, sbyte* x, sbyte* y)
        {
            NativeMethods.mul_ip_s8(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, sbyte[] x, int offx, int incx, sbyte[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_s8(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, sbyte* x, int incx, sbyte* y, int incy)
        {
            NativeMethods.mul_inc_ip_s8(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, sbyte[] a, int offa, sbyte[] b, int offb, sbyte[] y, int offy)
        {
            NativeMethods.mul_s8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, sbyte* a, sbyte* b, sbyte* y)
        {
            NativeMethods.mul_s8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, sbyte[] a, int offa, int inca, sbyte[] b, int offb, int incb, sbyte[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_s8(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, sbyte* a, int inca, sbyte* b, int incb, sbyte* y, int incy)
        {
            NativeMethods.mul_inc_s8(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.mulc_ip_s8(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, sbyte a, sbyte* y)
        {
            NativeMethods.mulc_ip_s8(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_s8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.mulc_inc_ip_s8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, sbyte[] x, int offx, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.mulc_s8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, sbyte* x, sbyte a, sbyte* y)
        {
            NativeMethods.mulc_s8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, sbyte[] x, int offx, int incx, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_s8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, sbyte* x, int incx, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.mulc_inc_s8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, sbyte[] x, int offx, sbyte[] y, int offy)
        {
            NativeMethods.div_ip_s8(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, sbyte* x, sbyte* y)
        {
            NativeMethods.div_ip_s8(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, sbyte[] x, int offx, int incx, sbyte[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_s8(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, sbyte* x, int incx, sbyte* y, int incy)
        {
            NativeMethods.div_inc_ip_s8(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, sbyte[] a, int offa, sbyte[] b, int offb, sbyte[] y, int offy)
        {
            NativeMethods.div_s8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, sbyte* a, sbyte* b, sbyte* y)
        {
            NativeMethods.div_s8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, sbyte[] a, int offa, int inca, sbyte[] b, int offb, int incb, sbyte[] y, int offy, int incy)
        {
            NativeMethods.div_inc_s8(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, sbyte* a, int inca, sbyte* b, int incb, sbyte* y, int incy)
        {
            NativeMethods.div_inc_s8(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.divc_ip_s8(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, sbyte a, sbyte* y)
        {
            NativeMethods.divc_ip_s8(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_s8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.divc_inc_ip_s8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, sbyte[] x, int offx, sbyte a, sbyte[] y, int offy)
        {
            NativeMethods.divc_s8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, sbyte* x, sbyte a, sbyte* y)
        {
            NativeMethods.divc_s8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, sbyte[] x, int offx, int incx, sbyte a, sbyte[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_s8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, sbyte* x, int incx, sbyte a, sbyte* y, int incy)
        {
            NativeMethods.divc_inc_s8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, byte[] x, int offx, byte[] y, int offy)
        {
            NativeMethods.add_ip_u8(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, byte* x, byte* y)
        {
            NativeMethods.add_ip_u8(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, byte[] x, int offx, int incx, byte[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_u8(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, byte* x, int incx, byte* y, int incy)
        {
            NativeMethods.add_inc_ip_u8(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, byte[] a, int offa, byte[] b, int offb, byte[] y, int offy)
        {
            NativeMethods.add_u8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, byte* a, byte* b, byte* y)
        {
            NativeMethods.add_u8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, byte[] a, int offa, int inca, byte[] b, int offb, int incb, byte[] y, int offy, int incy)
        {
            NativeMethods.add_inc_u8(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, byte* a, int inca, byte* b, int incb, byte* y, int incy)
        {
            NativeMethods.add_inc_u8(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, byte a, byte[] y, int offy)
        {
            NativeMethods.addc_ip_u8(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, byte a, byte* y)
        {
            NativeMethods.addc_ip_u8(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_u8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, byte a, byte* y, int incy)
        {
            NativeMethods.addc_inc_ip_u8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, byte[] x, int offx, byte a, byte[] y, int offy)
        {
            NativeMethods.addc_u8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, byte* x, byte a, byte* y)
        {
            NativeMethods.addc_u8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, byte[] x, int offx, int incx, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_u8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, byte* x, int incx, byte a, byte* y, int incy)
        {
            NativeMethods.addc_inc_u8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 8-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, byte[] x, int offx, byte alpha, byte[] y, int offy)
        {
            NativeMethods.addproductc_u8(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 8-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, byte* x, byte alpha, byte* y)
        {
            NativeMethods.addproductc_u8(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 8-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, byte[] a, int offa, byte[] b, int offb, byte[] y, int offy)
        {
            NativeMethods.addproduct_u8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 8-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, byte* a, byte* b, byte* y)
        {
            NativeMethods.addproduct_u8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, byte[] x, int offx, byte[] y, int offy)
        {
            NativeMethods.sub_ip_u8(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, byte* x, byte* y)
        {
            NativeMethods.sub_ip_u8(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, byte[] x, int offx, int incx, byte[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_u8(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, byte* x, int incx, byte* y, int incy)
        {
            NativeMethods.sub_inc_ip_u8(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, byte[] a, int offa, byte[] b, int offb, byte[] y, int offy)
        {
            NativeMethods.sub_u8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, byte* a, byte* b, byte* y)
        {
            NativeMethods.sub_u8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, byte[] a, int offa, int inca, byte[] b, int offb, int incb, byte[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_u8(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, byte* a, int inca, byte* b, int incb, byte* y, int incy)
        {
            NativeMethods.sub_inc_u8(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, byte a, byte[] y, int offy)
        {
            NativeMethods.subc_ip_u8(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, byte a, byte* y)
        {
            NativeMethods.subc_ip_u8(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_u8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, byte a, byte* y, int incy)
        {
            NativeMethods.subc_inc_ip_u8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, byte[] x, int offx, byte a, byte[] y, int offy)
        {
            NativeMethods.subc_u8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, byte* x, byte a, byte* y)
        {
            NativeMethods.subc_u8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, byte[] x, int offx, int incx, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_u8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, byte* x, int incx, byte a, byte* y, int incy)
        {
            NativeMethods.subc_inc_u8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit unsigned integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, byte a, byte[] y, int offy)
        {
            NativeMethods.subrevc_ip_u8(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit unsigned integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, byte a, byte* y)
        {
            NativeMethods.subrevc_ip_u8(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit unsigned integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_u8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit unsigned integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, byte a, byte* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_u8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit unsigned integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, byte[] x, int offx, byte a, byte[] y, int offy)
        {
            NativeMethods.subrevc_u8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit unsigned integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, byte* x, byte a, byte* y)
        {
            NativeMethods.subrevc_u8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit unsigned integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, byte[] x, int offx, int incx, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_u8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 8-bit unsigned integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, byte* x, int incx, byte a, byte* y, int incy)
        {
            NativeMethods.subrevc_inc_u8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, byte[] x, int offx, byte[] y, int offy)
        {
            NativeMethods.mul_ip_u8(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, byte* x, byte* y)
        {
            NativeMethods.mul_ip_u8(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, byte[] x, int offx, int incx, byte[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_u8(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, byte* x, int incx, byte* y, int incy)
        {
            NativeMethods.mul_inc_ip_u8(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, byte[] a, int offa, byte[] b, int offb, byte[] y, int offy)
        {
            NativeMethods.mul_u8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, byte* a, byte* b, byte* y)
        {
            NativeMethods.mul_u8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, byte[] a, int offa, int inca, byte[] b, int offb, int incb, byte[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_u8(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, byte* a, int inca, byte* b, int incb, byte* y, int incy)
        {
            NativeMethods.mul_inc_u8(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, byte a, byte[] y, int offy)
        {
            NativeMethods.mulc_ip_u8(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, byte a, byte* y)
        {
            NativeMethods.mulc_ip_u8(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_u8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, byte a, byte* y, int incy)
        {
            NativeMethods.mulc_inc_ip_u8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, byte[] x, int offx, byte a, byte[] y, int offy)
        {
            NativeMethods.mulc_u8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, byte* x, byte a, byte* y)
        {
            NativeMethods.mulc_u8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, byte[] x, int offx, int incx, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_u8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 8-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, byte* x, int incx, byte a, byte* y, int incy)
        {
            NativeMethods.mulc_inc_u8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, byte[] x, int offx, byte[] y, int offy)
        {
            NativeMethods.div_ip_u8(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, byte* x, byte* y)
        {
            NativeMethods.div_ip_u8(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, byte[] x, int offx, int incx, byte[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_u8(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, byte* x, int incx, byte* y, int incy)
        {
            NativeMethods.div_inc_ip_u8(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, byte[] a, int offa, byte[] b, int offb, byte[] y, int offy)
        {
            NativeMethods.div_u8(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, byte* a, byte* b, byte* y)
        {
            NativeMethods.div_u8(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, byte[] a, int offa, int inca, byte[] b, int offb, int incb, byte[] y, int offy, int incy)
        {
            NativeMethods.div_inc_u8(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 8-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, byte* a, int inca, byte* b, int incb, byte* y, int incy)
        {
            NativeMethods.div_inc_u8(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, byte a, byte[] y, int offy)
        {
            NativeMethods.divc_ip_u8(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, byte a, byte* y)
        {
            NativeMethods.divc_ip_u8(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_u8(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, byte a, byte* y, int incy)
        {
            NativeMethods.divc_inc_ip_u8(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, byte[] x, int offx, byte a, byte[] y, int offy)
        {
            NativeMethods.divc_u8(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, byte* x, byte a, byte* y)
        {
            NativeMethods.divc_u8(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, byte[] x, int offx, int incx, byte a, byte[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_u8(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 8-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, byte* x, int incx, byte a, byte* y, int incy)
        {
            NativeMethods.divc_inc_u8(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, short[] x, int offx, short[] y, int offy)
        {
            NativeMethods.add_ip_s16(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, short* x, short* y)
        {
            NativeMethods.add_ip_s16(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, short[] x, int offx, int incx, short[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_s16(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, short* x, int incx, short* y, int incy)
        {
            NativeMethods.add_inc_ip_s16(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, short[] a, int offa, short[] b, int offb, short[] y, int offy)
        {
            NativeMethods.add_s16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, short* a, short* b, short* y)
        {
            NativeMethods.add_s16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, short[] a, int offa, int inca, short[] b, int offb, int incb, short[] y, int offy, int incy)
        {
            NativeMethods.add_inc_s16(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, short* a, int inca, short* b, int incb, short* y, int incy)
        {
            NativeMethods.add_inc_s16(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, short a, short[] y, int offy)
        {
            NativeMethods.addc_ip_s16(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, short a, short* y)
        {
            NativeMethods.addc_ip_s16(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, short a, short[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_s16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, short a, short* y, int incy)
        {
            NativeMethods.addc_inc_ip_s16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, short[] x, int offx, short a, short[] y, int offy)
        {
            NativeMethods.addc_s16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, short* x, short a, short* y)
        {
            NativeMethods.addc_s16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, short[] x, int offx, int incx, short a, short[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_s16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, short* x, int incx, short a, short* y, int incy)
        {
            NativeMethods.addc_inc_s16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 16-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, short[] x, int offx, short alpha, short[] y, int offy)
        {
            NativeMethods.addproductc_s16(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 16-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, short* x, short alpha, short* y)
        {
            NativeMethods.addproductc_s16(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 16-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, short[] a, int offa, short[] b, int offb, short[] y, int offy)
        {
            NativeMethods.addproduct_s16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 16-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, short* a, short* b, short* y)
        {
            NativeMethods.addproduct_s16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, short[] x, int offx, short[] y, int offy)
        {
            NativeMethods.sub_ip_s16(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, short* x, short* y)
        {
            NativeMethods.sub_ip_s16(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, short[] x, int offx, int incx, short[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_s16(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, short* x, int incx, short* y, int incy)
        {
            NativeMethods.sub_inc_ip_s16(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, short[] a, int offa, short[] b, int offb, short[] y, int offy)
        {
            NativeMethods.sub_s16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, short* a, short* b, short* y)
        {
            NativeMethods.sub_s16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, short[] a, int offa, int inca, short[] b, int offb, int incb, short[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_s16(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, short* a, int inca, short* b, int incb, short* y, int incy)
        {
            NativeMethods.sub_inc_s16(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, short a, short[] y, int offy)
        {
            NativeMethods.subc_ip_s16(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, short a, short* y)
        {
            NativeMethods.subc_ip_s16(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, short a, short[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_s16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, short a, short* y, int incy)
        {
            NativeMethods.subc_inc_ip_s16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, short[] x, int offx, short a, short[] y, int offy)
        {
            NativeMethods.subc_s16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, short* x, short a, short* y)
        {
            NativeMethods.subc_s16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, short[] x, int offx, int incx, short a, short[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_s16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, short* x, int incx, short a, short* y, int incy)
        {
            NativeMethods.subc_inc_s16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit signed integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, short a, short[] y, int offy)
        {
            NativeMethods.subrevc_ip_s16(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit signed integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, short a, short* y)
        {
            NativeMethods.subrevc_ip_s16(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit signed integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, short a, short[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_s16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit signed integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, short a, short* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_s16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit signed integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, short[] x, int offx, short a, short[] y, int offy)
        {
            NativeMethods.subrevc_s16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit signed integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, short* x, short a, short* y)
        {
            NativeMethods.subrevc_s16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit signed integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, short[] x, int offx, int incx, short a, short[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_s16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit signed integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, short* x, int incx, short a, short* y, int incy)
        {
            NativeMethods.subrevc_inc_s16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, short[] x, int offx, short[] y, int offy)
        {
            NativeMethods.mul_ip_s16(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, short* x, short* y)
        {
            NativeMethods.mul_ip_s16(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, short[] x, int offx, int incx, short[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_s16(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, short* x, int incx, short* y, int incy)
        {
            NativeMethods.mul_inc_ip_s16(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, short[] a, int offa, short[] b, int offb, short[] y, int offy)
        {
            NativeMethods.mul_s16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, short* a, short* b, short* y)
        {
            NativeMethods.mul_s16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, short[] a, int offa, int inca, short[] b, int offb, int incb, short[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_s16(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, short* a, int inca, short* b, int incb, short* y, int incy)
        {
            NativeMethods.mul_inc_s16(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, short a, short[] y, int offy)
        {
            NativeMethods.mulc_ip_s16(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, short a, short* y)
        {
            NativeMethods.mulc_ip_s16(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, short a, short[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_s16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, short a, short* y, int incy)
        {
            NativeMethods.mulc_inc_ip_s16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, short[] x, int offx, short a, short[] y, int offy)
        {
            NativeMethods.mulc_s16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, short* x, short a, short* y)
        {
            NativeMethods.mulc_s16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, short[] x, int offx, int incx, short a, short[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_s16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, short* x, int incx, short a, short* y, int incy)
        {
            NativeMethods.mulc_inc_s16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, short[] x, int offx, short[] y, int offy)
        {
            NativeMethods.div_ip_s16(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, short* x, short* y)
        {
            NativeMethods.div_ip_s16(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, short[] x, int offx, int incx, short[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_s16(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, short* x, int incx, short* y, int incy)
        {
            NativeMethods.div_inc_ip_s16(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, short[] a, int offa, short[] b, int offb, short[] y, int offy)
        {
            NativeMethods.div_s16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, short* a, short* b, short* y)
        {
            NativeMethods.div_s16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, short[] a, int offa, int inca, short[] b, int offb, int incb, short[] y, int offy, int incy)
        {
            NativeMethods.div_inc_s16(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, short* a, int inca, short* b, int incb, short* y, int incy)
        {
            NativeMethods.div_inc_s16(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, short a, short[] y, int offy)
        {
            NativeMethods.divc_ip_s16(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, short a, short* y)
        {
            NativeMethods.divc_ip_s16(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, short a, short[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_s16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, short a, short* y, int incy)
        {
            NativeMethods.divc_inc_ip_s16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, short[] x, int offx, short a, short[] y, int offy)
        {
            NativeMethods.divc_s16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, short* x, short a, short* y)
        {
            NativeMethods.divc_s16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, short[] x, int offx, int incx, short a, short[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_s16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, short* x, int incx, short a, short* y, int incy)
        {
            NativeMethods.divc_inc_s16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ushort[] x, int offx, ushort[] y, int offy)
        {
            NativeMethods.add_ip_u16(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, ushort* x, ushort* y)
        {
            NativeMethods.add_ip_u16(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ushort[] x, int offx, int incx, ushort[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_u16(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, ushort* x, int incx, ushort* y, int incy)
        {
            NativeMethods.add_inc_ip_u16(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ushort[] a, int offa, ushort[] b, int offb, ushort[] y, int offy)
        {
            NativeMethods.add_u16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, ushort* a, ushort* b, ushort* y)
        {
            NativeMethods.add_u16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ushort[] a, int offa, int inca, ushort[] b, int offb, int incb, ushort[] y, int offy, int incy)
        {
            NativeMethods.add_inc_u16(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, ushort* a, int inca, ushort* b, int incb, ushort* y, int incy)
        {
            NativeMethods.add_inc_u16(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ushort a, ushort[] y, int offy)
        {
            NativeMethods.addc_ip_u16(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, ushort a, ushort* y)
        {
            NativeMethods.addc_ip_u16(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_u16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, ushort a, ushort* y, int incy)
        {
            NativeMethods.addc_inc_ip_u16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ushort[] x, int offx, ushort a, ushort[] y, int offy)
        {
            NativeMethods.addc_u16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, ushort* x, ushort a, ushort* y)
        {
            NativeMethods.addc_u16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ushort[] x, int offx, int incx, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_u16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, ushort* x, int incx, ushort a, ushort* y, int incy)
        {
            NativeMethods.addc_inc_u16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 16-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, ushort[] x, int offx, ushort alpha, ushort[] y, int offy)
        {
            NativeMethods.addproductc_u16(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 16-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, ushort* x, ushort alpha, ushort* y)
        {
            NativeMethods.addproductc_u16(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 16-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, ushort[] a, int offa, ushort[] b, int offb, ushort[] y, int offy)
        {
            NativeMethods.addproduct_u16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 16-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, ushort* a, ushort* b, ushort* y)
        {
            NativeMethods.addproduct_u16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ushort[] x, int offx, ushort[] y, int offy)
        {
            NativeMethods.sub_ip_u16(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, ushort* x, ushort* y)
        {
            NativeMethods.sub_ip_u16(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ushort[] x, int offx, int incx, ushort[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_u16(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, ushort* x, int incx, ushort* y, int incy)
        {
            NativeMethods.sub_inc_ip_u16(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ushort[] a, int offa, ushort[] b, int offb, ushort[] y, int offy)
        {
            NativeMethods.sub_u16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, ushort* a, ushort* b, ushort* y)
        {
            NativeMethods.sub_u16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ushort[] a, int offa, int inca, ushort[] b, int offb, int incb, ushort[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_u16(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, ushort* a, int inca, ushort* b, int incb, ushort* y, int incy)
        {
            NativeMethods.sub_inc_u16(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ushort a, ushort[] y, int offy)
        {
            NativeMethods.subc_ip_u16(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, ushort a, ushort* y)
        {
            NativeMethods.subc_ip_u16(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_u16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, ushort a, ushort* y, int incy)
        {
            NativeMethods.subc_inc_ip_u16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ushort[] x, int offx, ushort a, ushort[] y, int offy)
        {
            NativeMethods.subc_u16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, ushort* x, ushort a, ushort* y)
        {
            NativeMethods.subc_u16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ushort[] x, int offx, int incx, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_u16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, ushort* x, int incx, ushort a, ushort* y, int incy)
        {
            NativeMethods.subc_inc_u16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit unsigned integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, ushort a, ushort[] y, int offy)
        {
            NativeMethods.subrevc_ip_u16(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit unsigned integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, ushort a, ushort* y)
        {
            NativeMethods.subrevc_ip_u16(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit unsigned integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_u16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit unsigned integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, ushort a, ushort* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_u16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit unsigned integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, ushort[] x, int offx, ushort a, ushort[] y, int offy)
        {
            NativeMethods.subrevc_u16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit unsigned integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, ushort* x, ushort a, ushort* y)
        {
            NativeMethods.subrevc_u16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit unsigned integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, ushort[] x, int offx, int incx, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_u16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 16-bit unsigned integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, ushort* x, int incx, ushort a, ushort* y, int incy)
        {
            NativeMethods.subrevc_inc_u16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ushort[] x, int offx, ushort[] y, int offy)
        {
            NativeMethods.mul_ip_u16(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, ushort* x, ushort* y)
        {
            NativeMethods.mul_ip_u16(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ushort[] x, int offx, int incx, ushort[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_u16(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, ushort* x, int incx, ushort* y, int incy)
        {
            NativeMethods.mul_inc_ip_u16(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ushort[] a, int offa, ushort[] b, int offb, ushort[] y, int offy)
        {
            NativeMethods.mul_u16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, ushort* a, ushort* b, ushort* y)
        {
            NativeMethods.mul_u16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ushort[] a, int offa, int inca, ushort[] b, int offb, int incb, ushort[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_u16(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, ushort* a, int inca, ushort* b, int incb, ushort* y, int incy)
        {
            NativeMethods.mul_inc_u16(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ushort a, ushort[] y, int offy)
        {
            NativeMethods.mulc_ip_u16(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, ushort a, ushort* y)
        {
            NativeMethods.mulc_ip_u16(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_u16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, ushort a, ushort* y, int incy)
        {
            NativeMethods.mulc_inc_ip_u16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ushort[] x, int offx, ushort a, ushort[] y, int offy)
        {
            NativeMethods.mulc_u16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, ushort* x, ushort a, ushort* y)
        {
            NativeMethods.mulc_u16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ushort[] x, int offx, int incx, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_u16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 16-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, ushort* x, int incx, ushort a, ushort* y, int incy)
        {
            NativeMethods.mulc_inc_u16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, ushort[] x, int offx, ushort[] y, int offy)
        {
            NativeMethods.div_ip_u16(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, ushort* x, ushort* y)
        {
            NativeMethods.div_ip_u16(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, ushort[] x, int offx, int incx, ushort[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_u16(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, ushort* x, int incx, ushort* y, int incy)
        {
            NativeMethods.div_inc_ip_u16(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, ushort[] a, int offa, ushort[] b, int offb, ushort[] y, int offy)
        {
            NativeMethods.div_u16(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, ushort* a, ushort* b, ushort* y)
        {
            NativeMethods.div_u16(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, ushort[] a, int offa, int inca, ushort[] b, int offb, int incb, ushort[] y, int offy, int incy)
        {
            NativeMethods.div_inc_u16(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 16-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, ushort* a, int inca, ushort* b, int incb, ushort* y, int incy)
        {
            NativeMethods.div_inc_u16(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ushort a, ushort[] y, int offy)
        {
            NativeMethods.divc_ip_u16(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, ushort a, ushort* y)
        {
            NativeMethods.divc_ip_u16(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_u16(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, ushort a, ushort* y, int incy)
        {
            NativeMethods.divc_inc_ip_u16(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ushort[] x, int offx, ushort a, ushort[] y, int offy)
        {
            NativeMethods.divc_u16(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, ushort* x, ushort a, ushort* y)
        {
            NativeMethods.divc_u16(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ushort[] x, int offx, int incx, ushort a, ushort[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_u16(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 16-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, ushort* x, int incx, ushort a, ushort* y, int incy)
        {
            NativeMethods.divc_inc_u16(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.add_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, int* x, int* y)
        {
            NativeMethods.add_ip_s32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, int[] x, int offx, int incx, int[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_s32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, int* x, int incx, int* y, int incy)
        {
            NativeMethods.add_inc_ip_s32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.add_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, int* a, int* b, int* y)
        {
            NativeMethods.add_s32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, int[] a, int offa, int inca, int[] b, int offb, int incb, int[] y, int offy, int incy)
        {
            NativeMethods.add_inc_s32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, int* a, int inca, int* b, int incb, int* y, int incy)
        {
            NativeMethods.add_inc_s32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, int a, int[] y, int offy)
        {
            NativeMethods.addc_ip_s32(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, int a, int* y)
        {
            NativeMethods.addc_ip_s32(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, int a, int[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_s32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, int a, int* y, int incy)
        {
            NativeMethods.addc_inc_ip_s32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, int[] x, int offx, int a, int[] y, int offy)
        {
            NativeMethods.addc_s32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, int* x, int a, int* y)
        {
            NativeMethods.addc_s32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, int[] x, int offx, int incx, int a, int[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_s32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, int* x, int incx, int a, int* y, int incy)
        {
            NativeMethods.addc_inc_s32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 32-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, int[] x, int offx, int alpha, int[] y, int offy)
        {
            NativeMethods.addproductc_s32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 32-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, int* x, int alpha, int* y)
        {
            NativeMethods.addproductc_s32(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 32-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.addproduct_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 32-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, int* a, int* b, int* y)
        {
            NativeMethods.addproduct_s32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.sub_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, int* x, int* y)
        {
            NativeMethods.sub_ip_s32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, int[] x, int offx, int incx, int[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_s32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, int* x, int incx, int* y, int incy)
        {
            NativeMethods.sub_inc_ip_s32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.sub_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, int* a, int* b, int* y)
        {
            NativeMethods.sub_s32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, int[] a, int offa, int inca, int[] b, int offb, int incb, int[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_s32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, int* a, int inca, int* b, int incb, int* y, int incy)
        {
            NativeMethods.sub_inc_s32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, int a, int[] y, int offy)
        {
            NativeMethods.subc_ip_s32(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, int a, int* y)
        {
            NativeMethods.subc_ip_s32(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, int a, int[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_s32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, int a, int* y, int incy)
        {
            NativeMethods.subc_inc_ip_s32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, int[] x, int offx, int a, int[] y, int offy)
        {
            NativeMethods.subc_s32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, int* x, int a, int* y)
        {
            NativeMethods.subc_s32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, int[] x, int offx, int incx, int a, int[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_s32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, int* x, int incx, int a, int* y, int incy)
        {
            NativeMethods.subc_inc_s32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit signed integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, int a, int[] y, int offy)
        {
            NativeMethods.subrevc_ip_s32(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit signed integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, int a, int* y)
        {
            NativeMethods.subrevc_ip_s32(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit signed integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, int a, int[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_s32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit signed integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, int a, int* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_s32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit signed integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, int[] x, int offx, int a, int[] y, int offy)
        {
            NativeMethods.subrevc_s32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit signed integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, int* x, int a, int* y)
        {
            NativeMethods.subrevc_s32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit signed integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, int[] x, int offx, int incx, int a, int[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_s32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit signed integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, int* x, int incx, int a, int* y, int incy)
        {
            NativeMethods.subrevc_inc_s32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.mul_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, int* x, int* y)
        {
            NativeMethods.mul_ip_s32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, int[] x, int offx, int incx, int[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_s32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, int* x, int incx, int* y, int incy)
        {
            NativeMethods.mul_inc_ip_s32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.mul_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, int* a, int* b, int* y)
        {
            NativeMethods.mul_s32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, int[] a, int offa, int inca, int[] b, int offb, int incb, int[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_s32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, int* a, int inca, int* b, int incb, int* y, int incy)
        {
            NativeMethods.mul_inc_s32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, int a, int[] y, int offy)
        {
            NativeMethods.mulc_ip_s32(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, int a, int* y)
        {
            NativeMethods.mulc_ip_s32(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, int a, int[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_s32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, int a, int* y, int incy)
        {
            NativeMethods.mulc_inc_ip_s32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, int[] x, int offx, int a, int[] y, int offy)
        {
            NativeMethods.mulc_s32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, int* x, int a, int* y)
        {
            NativeMethods.mulc_s32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, int[] x, int offx, int incx, int a, int[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_s32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, int* x, int incx, int a, int* y, int incy)
        {
            NativeMethods.mulc_inc_s32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, int[] x, int offx, int[] y, int offy)
        {
            NativeMethods.div_ip_s32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, int* x, int* y)
        {
            NativeMethods.div_ip_s32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, int[] x, int offx, int incx, int[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_s32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, int* x, int incx, int* y, int incy)
        {
            NativeMethods.div_inc_ip_s32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, int[] a, int offa, int[] b, int offb, int[] y, int offy)
        {
            NativeMethods.div_s32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, int* a, int* b, int* y)
        {
            NativeMethods.div_s32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, int[] a, int offa, int inca, int[] b, int offb, int incb, int[] y, int offy, int incy)
        {
            NativeMethods.div_inc_s32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, int* a, int inca, int* b, int incb, int* y, int incy)
        {
            NativeMethods.div_inc_s32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, int a, int[] y, int offy)
        {
            NativeMethods.divc_ip_s32(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, int a, int* y)
        {
            NativeMethods.divc_ip_s32(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, int a, int[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_s32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, int a, int* y, int incy)
        {
            NativeMethods.divc_inc_ip_s32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, int[] x, int offx, int a, int[] y, int offy)
        {
            NativeMethods.divc_s32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, int* x, int a, int* y)
        {
            NativeMethods.divc_s32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, int[] x, int offx, int incx, int a, int[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_s32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, int* x, int incx, int a, int* y, int incy)
        {
            NativeMethods.divc_inc_s32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.add_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, uint* x, uint* y)
        {
            NativeMethods.add_ip_u32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, uint[] x, int offx, int incx, uint[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_u32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, uint* x, int incx, uint* y, int incy)
        {
            NativeMethods.add_inc_ip_u32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.add_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, uint* a, uint* b, uint* y)
        {
            NativeMethods.add_u32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, uint[] a, int offa, int inca, uint[] b, int offb, int incb, uint[] y, int offy, int incy)
        {
            NativeMethods.add_inc_u32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, uint* a, int inca, uint* b, int incb, uint* y, int incy)
        {
            NativeMethods.add_inc_u32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, uint a, uint[] y, int offy)
        {
            NativeMethods.addc_ip_u32(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, uint a, uint* y)
        {
            NativeMethods.addc_ip_u32(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_u32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, uint a, uint* y, int incy)
        {
            NativeMethods.addc_inc_ip_u32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, uint[] x, int offx, uint a, uint[] y, int offy)
        {
            NativeMethods.addc_u32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, uint* x, uint a, uint* y)
        {
            NativeMethods.addc_u32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, uint[] x, int offx, int incx, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_u32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, uint* x, int incx, uint a, uint* y, int incy)
        {
            NativeMethods.addc_inc_u32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 32-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, uint[] x, int offx, uint alpha, uint[] y, int offy)
        {
            NativeMethods.addproductc_u32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 32-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, uint* x, uint alpha, uint* y)
        {
            NativeMethods.addproductc_u32(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 32-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.addproduct_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 32-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, uint* a, uint* b, uint* y)
        {
            NativeMethods.addproduct_u32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.sub_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, uint* x, uint* y)
        {
            NativeMethods.sub_ip_u32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, uint[] x, int offx, int incx, uint[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_u32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, uint* x, int incx, uint* y, int incy)
        {
            NativeMethods.sub_inc_ip_u32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.sub_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, uint* a, uint* b, uint* y)
        {
            NativeMethods.sub_u32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, uint[] a, int offa, int inca, uint[] b, int offb, int incb, uint[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_u32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, uint* a, int inca, uint* b, int incb, uint* y, int incy)
        {
            NativeMethods.sub_inc_u32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, uint a, uint[] y, int offy)
        {
            NativeMethods.subc_ip_u32(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, uint a, uint* y)
        {
            NativeMethods.subc_ip_u32(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_u32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, uint a, uint* y, int incy)
        {
            NativeMethods.subc_inc_ip_u32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, uint[] x, int offx, uint a, uint[] y, int offy)
        {
            NativeMethods.subc_u32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, uint* x, uint a, uint* y)
        {
            NativeMethods.subc_u32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, uint[] x, int offx, int incx, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_u32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, uint* x, int incx, uint a, uint* y, int incy)
        {
            NativeMethods.subc_inc_u32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit unsigned integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, uint a, uint[] y, int offy)
        {
            NativeMethods.subrevc_ip_u32(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit unsigned integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, uint a, uint* y)
        {
            NativeMethods.subrevc_ip_u32(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit unsigned integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_u32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit unsigned integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, uint a, uint* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_u32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit unsigned integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, uint[] x, int offx, uint a, uint[] y, int offy)
        {
            NativeMethods.subrevc_u32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit unsigned integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, uint* x, uint a, uint* y)
        {
            NativeMethods.subrevc_u32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit unsigned integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, uint[] x, int offx, int incx, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_u32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 32-bit unsigned integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, uint* x, int incx, uint a, uint* y, int incy)
        {
            NativeMethods.subrevc_inc_u32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.mul_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, uint* x, uint* y)
        {
            NativeMethods.mul_ip_u32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, uint[] x, int offx, int incx, uint[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_u32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, uint* x, int incx, uint* y, int incy)
        {
            NativeMethods.mul_inc_ip_u32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.mul_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, uint* a, uint* b, uint* y)
        {
            NativeMethods.mul_u32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, uint[] a, int offa, int inca, uint[] b, int offb, int incb, uint[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_u32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, uint* a, int inca, uint* b, int incb, uint* y, int incy)
        {
            NativeMethods.mul_inc_u32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, uint a, uint[] y, int offy)
        {
            NativeMethods.mulc_ip_u32(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, uint a, uint* y)
        {
            NativeMethods.mulc_ip_u32(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_u32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, uint a, uint* y, int incy)
        {
            NativeMethods.mulc_inc_ip_u32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, uint[] x, int offx, uint a, uint[] y, int offy)
        {
            NativeMethods.mulc_u32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, uint* x, uint a, uint* y)
        {
            NativeMethods.mulc_u32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, uint[] x, int offx, int incx, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_u32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 32-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, uint* x, int incx, uint a, uint* y, int incy)
        {
            NativeMethods.mulc_inc_u32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, uint[] x, int offx, uint[] y, int offy)
        {
            NativeMethods.div_ip_u32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, uint* x, uint* y)
        {
            NativeMethods.div_ip_u32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, uint[] x, int offx, int incx, uint[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_u32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, uint* x, int incx, uint* y, int incy)
        {
            NativeMethods.div_inc_ip_u32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, uint[] a, int offa, uint[] b, int offb, uint[] y, int offy)
        {
            NativeMethods.div_u32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, uint* a, uint* b, uint* y)
        {
            NativeMethods.div_u32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, uint[] a, int offa, int inca, uint[] b, int offb, int incb, uint[] y, int offy, int incy)
        {
            NativeMethods.div_inc_u32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 32-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, uint* a, int inca, uint* b, int incb, uint* y, int incy)
        {
            NativeMethods.div_inc_u32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, uint a, uint[] y, int offy)
        {
            NativeMethods.divc_ip_u32(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, uint a, uint* y)
        {
            NativeMethods.divc_ip_u32(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_u32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, uint a, uint* y, int incy)
        {
            NativeMethods.divc_inc_ip_u32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, uint[] x, int offx, uint a, uint[] y, int offy)
        {
            NativeMethods.divc_u32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, uint* x, uint a, uint* y)
        {
            NativeMethods.divc_u32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, uint[] x, int offx, int incx, uint a, uint[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_u32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 32-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, uint* x, int incx, uint a, uint* y, int incy)
        {
            NativeMethods.divc_inc_u32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.add_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, long* x, long* y)
        {
            NativeMethods.add_ip_s64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, long[] x, int offx, int incx, long[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_s64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, long* x, int incx, long* y, int incy)
        {
            NativeMethods.add_inc_ip_s64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.add_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, long* a, long* b, long* y)
        {
            NativeMethods.add_s64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, long[] a, int offa, int inca, long[] b, int offb, int incb, long[] y, int offy, int incy)
        {
            NativeMethods.add_inc_s64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, long* a, int inca, long* b, int incb, long* y, int incy)
        {
            NativeMethods.add_inc_s64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, long a, long[] y, int offy)
        {
            NativeMethods.addc_ip_s64(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, long a, long* y)
        {
            NativeMethods.addc_ip_s64(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, long a, long[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_s64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, long a, long* y, int incy)
        {
            NativeMethods.addc_inc_ip_s64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, long[] x, int offx, long a, long[] y, int offy)
        {
            NativeMethods.addc_s64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, long* x, long a, long* y)
        {
            NativeMethods.addc_s64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, long[] x, int offx, int incx, long a, long[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_s64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, long* x, int incx, long a, long* y, int incy)
        {
            NativeMethods.addc_inc_s64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 64-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, long[] x, int offx, long alpha, long[] y, int offy)
        {
            NativeMethods.addproductc_s64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 64-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, long* x, long alpha, long* y)
        {
            NativeMethods.addproductc_s64(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 64-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.addproduct_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 64-bit signed integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, long* a, long* b, long* y)
        {
            NativeMethods.addproduct_s64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.sub_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, long* x, long* y)
        {
            NativeMethods.sub_ip_s64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, long[] x, int offx, int incx, long[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_s64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, long* x, int incx, long* y, int incy)
        {
            NativeMethods.sub_inc_ip_s64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.sub_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, long* a, long* b, long* y)
        {
            NativeMethods.sub_s64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, long[] a, int offa, int inca, long[] b, int offb, int incb, long[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_s64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, long* a, int inca, long* b, int incb, long* y, int incy)
        {
            NativeMethods.sub_inc_s64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, long a, long[] y, int offy)
        {
            NativeMethods.subc_ip_s64(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, long a, long* y)
        {
            NativeMethods.subc_ip_s64(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, long a, long[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_s64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, long a, long* y, int incy)
        {
            NativeMethods.subc_inc_ip_s64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, long[] x, int offx, long a, long[] y, int offy)
        {
            NativeMethods.subc_s64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, long* x, long a, long* y)
        {
            NativeMethods.subc_s64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, long[] x, int offx, int incx, long a, long[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_s64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, long* x, int incx, long a, long* y, int incy)
        {
            NativeMethods.subc_inc_s64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit signed integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, long a, long[] y, int offy)
        {
            NativeMethods.subrevc_ip_s64(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit signed integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, long a, long* y)
        {
            NativeMethods.subrevc_ip_s64(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit signed integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, long a, long[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_s64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit signed integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, long a, long* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_s64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit signed integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, long[] x, int offx, long a, long[] y, int offy)
        {
            NativeMethods.subrevc_s64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit signed integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, long* x, long a, long* y)
        {
            NativeMethods.subrevc_s64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit signed integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, long[] x, int offx, int incx, long a, long[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_s64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit signed integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, long* x, int incx, long a, long* y, int incy)
        {
            NativeMethods.subrevc_inc_s64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.mul_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, long* x, long* y)
        {
            NativeMethods.mul_ip_s64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, long[] x, int offx, int incx, long[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_s64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, long* x, int incx, long* y, int incy)
        {
            NativeMethods.mul_inc_ip_s64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.mul_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, long* a, long* b, long* y)
        {
            NativeMethods.mul_s64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, long[] a, int offa, int inca, long[] b, int offb, int incb, long[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_s64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, long* a, int inca, long* b, int incb, long* y, int incy)
        {
            NativeMethods.mul_inc_s64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, long a, long[] y, int offy)
        {
            NativeMethods.mulc_ip_s64(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, long a, long* y)
        {
            NativeMethods.mulc_ip_s64(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, long a, long[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_s64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, long a, long* y, int incy)
        {
            NativeMethods.mulc_inc_ip_s64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, long[] x, int offx, long a, long[] y, int offy)
        {
            NativeMethods.mulc_s64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, long* x, long a, long* y)
        {
            NativeMethods.mulc_s64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, long[] x, int offx, int incx, long a, long[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_s64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, long* x, int incx, long a, long* y, int incy)
        {
            NativeMethods.mulc_inc_s64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, long[] x, int offx, long[] y, int offy)
        {
            NativeMethods.div_ip_s64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit signed integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, long* x, long* y)
        {
            NativeMethods.div_ip_s64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, long[] x, int offx, int incx, long[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_s64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit signed integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, long* x, int incx, long* y, int incy)
        {
            NativeMethods.div_inc_ip_s64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, long[] a, int offa, long[] b, int offb, long[] y, int offy)
        {
            NativeMethods.div_s64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit signed integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, long* a, long* b, long* y)
        {
            NativeMethods.div_s64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, long[] a, int offa, int inca, long[] b, int offb, int incb, long[] y, int offy, int incy)
        {
            NativeMethods.div_inc_s64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit signed integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, long* a, int inca, long* b, int incb, long* y, int incy)
        {
            NativeMethods.div_inc_s64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, long a, long[] y, int offy)
        {
            NativeMethods.divc_ip_s64(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, long a, long* y)
        {
            NativeMethods.divc_ip_s64(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, long a, long[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_s64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, long a, long* y, int incy)
        {
            NativeMethods.divc_inc_ip_s64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, long[] x, int offx, long a, long[] y, int offy)
        {
            NativeMethods.divc_s64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, long* x, long a, long* y)
        {
            NativeMethods.divc_s64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, long[] x, int offx, int incx, long a, long[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_s64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit signed integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, long* x, int incx, long a, long* y, int incy)
        {
            NativeMethods.divc_inc_s64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.add_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, ulong* x, ulong* y)
        {
            NativeMethods.add_ip_u64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ulong[] x, int offx, int incx, ulong[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_u64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, ulong* x, int incx, ulong* y, int incy)
        {
            NativeMethods.add_inc_ip_u64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.add_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, ulong* a, ulong* b, ulong* y)
        {
            NativeMethods.add_u64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, ulong[] a, int offa, int inca, ulong[] b, int offb, int incb, ulong[] y, int offy, int incy)
        {
            NativeMethods.add_inc_u64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, ulong* a, int inca, ulong* b, int incb, ulong* y, int incy)
        {
            NativeMethods.add_inc_u64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ulong a, ulong[] y, int offy)
        {
            NativeMethods.addc_ip_u64(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, ulong a, ulong* y)
        {
            NativeMethods.addc_ip_u64(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_u64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, ulong a, ulong* y, int incy)
        {
            NativeMethods.addc_inc_ip_u64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ulong[] x, int offx, ulong a, ulong[] y, int offy)
        {
            NativeMethods.addc_u64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, ulong* x, ulong a, ulong* y)
        {
            NativeMethods.addc_u64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, ulong[] x, int offx, int incx, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_u64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, ulong* x, int incx, ulong a, ulong* y, int incy)
        {
            NativeMethods.addc_inc_u64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 64-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, ulong[] x, int offx, ulong alpha, ulong[] y, int offy)
        {
            NativeMethods.addproductc_u64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of 64-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, ulong* x, ulong alpha, ulong* y)
        {
            NativeMethods.addproductc_u64(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 64-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.addproduct_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of 64-bit unsigned integers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, ulong* a, ulong* b, ulong* y)
        {
            NativeMethods.addproduct_u64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.sub_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, ulong* x, ulong* y)
        {
            NativeMethods.sub_ip_u64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ulong[] x, int offx, int incx, ulong[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_u64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, ulong* x, int incx, ulong* y, int incy)
        {
            NativeMethods.sub_inc_ip_u64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.sub_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, ulong* a, ulong* b, ulong* y)
        {
            NativeMethods.sub_u64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, ulong[] a, int offa, int inca, ulong[] b, int offb, int incb, ulong[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_u64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, ulong* a, int inca, ulong* b, int incb, ulong* y, int incy)
        {
            NativeMethods.sub_inc_u64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ulong a, ulong[] y, int offy)
        {
            NativeMethods.subc_ip_u64(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, ulong a, ulong* y)
        {
            NativeMethods.subc_ip_u64(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_u64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, ulong a, ulong* y, int incy)
        {
            NativeMethods.subc_inc_ip_u64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ulong[] x, int offx, ulong a, ulong[] y, int offy)
        {
            NativeMethods.subc_u64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, ulong* x, ulong a, ulong* y)
        {
            NativeMethods.subc_u64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, ulong[] x, int offx, int incx, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_u64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, ulong* x, int incx, ulong a, ulong* y, int incy)
        {
            NativeMethods.subc_inc_u64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit unsigned integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, ulong a, ulong[] y, int offy)
        {
            NativeMethods.subrevc_ip_u64(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit unsigned integers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, ulong a, ulong* y)
        {
            NativeMethods.subrevc_ip_u64(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit unsigned integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_u64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit unsigned integers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, ulong a, ulong* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_u64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit unsigned integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, ulong[] x, int offx, ulong a, ulong[] y, int offy)
        {
            NativeMethods.subrevc_u64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit unsigned integers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, ulong* x, ulong a, ulong* y)
        {
            NativeMethods.subrevc_u64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit unsigned integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, ulong[] x, int offx, int incx, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_u64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of 64-bit unsigned integers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, ulong* x, int incx, ulong a, ulong* y, int incy)
        {
            NativeMethods.subrevc_inc_u64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.mul_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, ulong* x, ulong* y)
        {
            NativeMethods.mul_ip_u64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ulong[] x, int offx, int incx, ulong[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_u64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, ulong* x, int incx, ulong* y, int incy)
        {
            NativeMethods.mul_inc_ip_u64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.mul_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, ulong* a, ulong* b, ulong* y)
        {
            NativeMethods.mul_u64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, ulong[] a, int offa, int inca, ulong[] b, int offb, int incb, ulong[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_u64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, ulong* a, int inca, ulong* b, int incb, ulong* y, int incy)
        {
            NativeMethods.mul_inc_u64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ulong a, ulong[] y, int offy)
        {
            NativeMethods.mulc_ip_u64(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, ulong a, ulong* y)
        {
            NativeMethods.mulc_ip_u64(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_u64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, ulong a, ulong* y, int incy)
        {
            NativeMethods.mulc_inc_ip_u64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ulong[] x, int offx, ulong a, ulong[] y, int offy)
        {
            NativeMethods.mulc_u64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, ulong* x, ulong a, ulong* y)
        {
            NativeMethods.mulc_u64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, ulong[] x, int offx, int incx, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_u64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of 64-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, ulong* x, int incx, ulong a, ulong* y, int incy)
        {
            NativeMethods.mulc_inc_u64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, ulong[] x, int offx, ulong[] y, int offy)
        {
            NativeMethods.div_ip_u64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit unsigned integers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, ulong* x, ulong* y)
        {
            NativeMethods.div_ip_u64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, ulong[] x, int offx, int incx, ulong[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_u64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit unsigned integers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, ulong* x, int incx, ulong* y, int incy)
        {
            NativeMethods.div_inc_ip_u64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, ulong[] a, int offa, ulong[] b, int offb, ulong[] y, int offy)
        {
            NativeMethods.div_u64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit unsigned integers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, ulong* a, ulong* b, ulong* y)
        {
            NativeMethods.div_u64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, ulong[] a, int offa, int inca, ulong[] b, int offb, int incb, ulong[] y, int offy, int incy)
        {
            NativeMethods.div_inc_u64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of 64-bit unsigned integers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, ulong* a, int inca, ulong* b, int incb, ulong* y, int incy)
        {
            NativeMethods.div_inc_u64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ulong a, ulong[] y, int offy)
        {
            NativeMethods.divc_ip_u64(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, ulong a, ulong* y)
        {
            NativeMethods.divc_ip_u64(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_u64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, ulong a, ulong* y, int incy)
        {
            NativeMethods.divc_inc_ip_u64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ulong[] x, int offx, ulong a, ulong[] y, int offy)
        {
            NativeMethods.divc_u64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, ulong* x, ulong a, ulong* y)
        {
            NativeMethods.divc_u64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, ulong[] x, int offx, int incx, ulong a, ulong[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_u64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of 64-bit unsigned integers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, ulong* x, int incx, ulong a, ulong* y, int incy)
        {
            NativeMethods.divc_inc_u64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.add_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, float* x, float* y)
        {
            NativeMethods.add_ip_f32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, float[] x, int offx, int incx, float[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_f32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, float* x, int incx, float* y, int incy)
        {
            NativeMethods.add_inc_ip_f32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.add_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, float* a, float* b, float* y)
        {
            NativeMethods.add_f32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, float[] a, int offa, int inca, float[] b, int offb, int incb, float[] y, int offy, int incy)
        {
            NativeMethods.add_inc_f32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, float* a, int inca, float* b, int incb, float* y, int incy)
        {
            NativeMethods.add_inc_f32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, float a, float[] y, int offy)
        {
            NativeMethods.addc_ip_f32(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, float a, float* y)
        {
            NativeMethods.addc_ip_f32(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, float a, float[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_f32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, float a, float* y, int incy)
        {
            NativeMethods.addc_inc_ip_f32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, float[] x, int offx, float a, float[] y, int offy)
        {
            NativeMethods.addc_f32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, float* x, float a, float* y)
        {
            NativeMethods.addc_f32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, float[] x, int offx, int incx, float a, float[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_f32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, float* x, int incx, float a, float* y, int incy)
        {
            NativeMethods.addc_inc_f32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of single-precision floating point numbers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, float[] x, int offx, float alpha, float[] y, int offy)
        {
            NativeMethods.addproductc_f32(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of single-precision floating point numbers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, float* x, float alpha, float* y)
        {
            NativeMethods.addproductc_f32(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of single-precision floating point numbers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.addproduct_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of single-precision floating point numbers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, float* a, float* b, float* y)
        {
            NativeMethods.addproduct_f32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.sub_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, float* x, float* y)
        {
            NativeMethods.sub_ip_f32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, float[] x, int offx, int incx, float[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_f32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, float* x, int incx, float* y, int incy)
        {
            NativeMethods.sub_inc_ip_f32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.sub_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, float* a, float* b, float* y)
        {
            NativeMethods.sub_f32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, float[] a, int offa, int inca, float[] b, int offb, int incb, float[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_f32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, float* a, int inca, float* b, int incb, float* y, int incy)
        {
            NativeMethods.sub_inc_f32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, float a, float[] y, int offy)
        {
            NativeMethods.subc_ip_f32(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, float a, float* y)
        {
            NativeMethods.subc_ip_f32(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, float a, float[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_f32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, float a, float* y, int incy)
        {
            NativeMethods.subc_inc_ip_f32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, float[] x, int offx, float a, float[] y, int offy)
        {
            NativeMethods.subc_f32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, float* x, float a, float* y)
        {
            NativeMethods.subc_f32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, float[] x, int offx, int incx, float a, float[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_f32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, float* x, int incx, float a, float* y, int incy)
        {
            NativeMethods.subc_inc_f32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of single-precision floating point numbers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, float a, float[] y, int offy)
        {
            NativeMethods.subrevc_ip_f32(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of single-precision floating point numbers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, float a, float* y)
        {
            NativeMethods.subrevc_ip_f32(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of single-precision floating point numbers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, float a, float[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_f32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of single-precision floating point numbers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, float a, float* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_f32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of single-precision floating point numbers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, float[] x, int offx, float a, float[] y, int offy)
        {
            NativeMethods.subrevc_f32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of single-precision floating point numbers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, float* x, float a, float* y)
        {
            NativeMethods.subrevc_f32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of single-precision floating point numbers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, float[] x, int offx, int incx, float a, float[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_f32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of single-precision floating point numbers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, float* x, int incx, float a, float* y, int incy)
        {
            NativeMethods.subrevc_inc_f32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.mul_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, float* x, float* y)
        {
            NativeMethods.mul_ip_f32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, float[] x, int offx, int incx, float[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_f32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, float* x, int incx, float* y, int incy)
        {
            NativeMethods.mul_inc_ip_f32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.mul_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, float* a, float* b, float* y)
        {
            NativeMethods.mul_f32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, float[] a, int offa, int inca, float[] b, int offb, int incb, float[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_f32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, float* a, int inca, float* b, int incb, float* y, int incy)
        {
            NativeMethods.mul_inc_f32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, float a, float[] y, int offy)
        {
            NativeMethods.mulc_ip_f32(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, float a, float* y)
        {
            NativeMethods.mulc_ip_f32(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, float a, float[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_f32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, float a, float* y, int incy)
        {
            NativeMethods.mulc_inc_ip_f32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, float[] x, int offx, float a, float[] y, int offy)
        {
            NativeMethods.mulc_f32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, float* x, float a, float* y)
        {
            NativeMethods.mulc_f32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, float[] x, int offx, int incx, float a, float[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_f32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of single-precision floating point numbers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, float* x, int incx, float a, float* y, int incy)
        {
            NativeMethods.mulc_inc_f32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, float[] x, int offx, float[] y, int offy)
        {
            NativeMethods.div_ip_f32(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of single-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, float* x, float* y)
        {
            NativeMethods.div_ip_f32(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, float[] x, int offx, int incx, float[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_f32(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of single-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, float* x, int incx, float* y, int incy)
        {
            NativeMethods.div_inc_ip_f32(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, float[] a, int offa, float[] b, int offb, float[] y, int offy)
        {
            NativeMethods.div_f32(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of single-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, float* a, float* b, float* y)
        {
            NativeMethods.div_f32(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, float[] a, int offa, int inca, float[] b, int offb, int incb, float[] y, int offy, int incy)
        {
            NativeMethods.div_inc_f32(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of single-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, float* a, int inca, float* b, int incb, float* y, int incy)
        {
            NativeMethods.div_inc_f32(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, float a, float[] y, int offy)
        {
            NativeMethods.divc_ip_f32(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, float a, float* y)
        {
            NativeMethods.divc_ip_f32(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, float a, float[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_f32(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, float a, float* y, int incy)
        {
            NativeMethods.divc_inc_ip_f32(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, float[] x, int offx, float a, float[] y, int offy)
        {
            NativeMethods.divc_f32(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, float* x, float a, float* y)
        {
            NativeMethods.divc_f32(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, float[] x, int offx, int incx, float a, float[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_f32(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of single-precision floating point numbers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, float* x, int incx, float a, float* y, int incy)
        {
            NativeMethods.divc_inc_f32(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.add_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, double* x, double* y)
        {
            NativeMethods.add_ip_f64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, double[] x, int offx, int incx, double[] y, int offy, int incy)
        {
            NativeMethods.add_inc_ip_f64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y += x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, double* x, int incx, double* y, int incy)
        {
            NativeMethods.add_inc_ip_f64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.add_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, double* a, double* b, double* y)
        {
            NativeMethods.add_f64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Add(int length, double[] a, int offa, int inca, double[] b, int offb, int incb, double[] y, int offy, int incy)
        {
            NativeMethods.add_inc_f64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Adds the elements of two arrays of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a + b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Add(int length, double* a, int inca, double* b, int incb, double* y, int incy)
        {
            NativeMethods.add_inc_f64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, double a, double[] y, int offy)
        {
            NativeMethods.addc_ip_f64(length, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, double a, double* y)
        {
            NativeMethods.addc_ip_f64(length, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, double a, double[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_ip_f64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, double a, double* y, int incy)
        {
            NativeMethods.addc_inc_ip_f64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, double[] x, int offx, double a, double[] y, int offy)
        {
            NativeMethods.addc_f64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, double* x, double a, double* y)
        {
            NativeMethods.addc_f64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddC(int length, double[] x, int offx, int incx, double a, double[] y, int offy, int incy)
        {
            NativeMethods.addc_inc_f64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Adds a constant value to each element of an array of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] + a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddC(int length, double* x, int incx, double a, double* y, int incy)
        {
            NativeMethods.addc_inc_f64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of double-precision floating point numbers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProductC(int length, double[] x, int offx, double alpha, double[] y, int offy)
        {
            NativeMethods.addproductc_f64(length, x, offx, alpha, y, offy);
        }

        /// <summary>
        /// Adds a product of a constant value and elements of an array of double-precision floating point numbers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="alpha">The scalar to multiply.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProductC(int length, double* x, double alpha, double* y)
        {
            NativeMethods.addproductc_f64(length, x, 0, alpha, y, 0);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of double-precision floating point numbers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void AddProduct(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.addproduct_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Adds a product of elements of two arrays of double-precision floating point numbers to elements of a destination array.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] += a[i] * b[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void AddProduct(int length, double* a, double* b, double* y)
        {
            NativeMethods.addproduct_f64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.sub_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, double* x, double* y)
        {
            NativeMethods.sub_ip_f64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, double[] x, int offx, int incx, double[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_ip_f64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y -= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, double* x, int incx, double* y, int incy)
        {
            NativeMethods.sub_inc_ip_f64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.sub_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, double* a, double* b, double* y)
        {
            NativeMethods.sub_f64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Sub(int length, double[] a, int offa, int inca, double[] b, int offb, int incb, double[] y, int offy, int incy)
        {
            NativeMethods.sub_inc_f64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Subtracts the elements of two arrays of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a - b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Sub(int length, double* a, int inca, double* b, int incb, double* y, int incy)
        {
            NativeMethods.sub_inc_f64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, double a, double[] y, int offy)
        {
            NativeMethods.subc_ip_f64(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, double a, double* y)
        {
            NativeMethods.subc_ip_f64(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, double a, double[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_ip_f64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] -= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, double a, double* y, int incy)
        {
            NativeMethods.subc_inc_ip_f64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, double[] x, int offx, double a, double[] y, int offy)
        {
            NativeMethods.subc_f64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, double* x, double a, double* y)
        {
            NativeMethods.subc_f64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubC(int length, double[] x, int offx, int incx, double a, double[] y, int offy, int incy)
        {
            NativeMethods.subc_inc_f64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts a constant value from each element of an array of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] - a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubC(int length, double* x, int incx, double a, double* y, int incy)
        {
            NativeMethods.subc_inc_f64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of double-precision floating point numbers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, double a, double[] y, int offy)
        {
            NativeMethods.subrevc_ip_f64(length, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of double-precision floating point numbers from a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, double a, double* y)
        {
            NativeMethods.subrevc_ip_f64(length, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of double-precision floating point numbers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, double a, double[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_ip_f64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of double-precision floating point numbers from a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - y[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, double a, double* y, int incy)
        {
            NativeMethods.subrevc_inc_ip_f64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of double-precision floating point numbers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, double[] x, int offx, double a, double[] y, int offy)
        {
            NativeMethods.subrevc_f64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Subtracts each element of an array of double-precision floating point numbers from a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, double* x, double a, double* y)
        {
            NativeMethods.subrevc_f64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Subtracts each element of an array of double-precision floating point numbers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void SubCRev(int length, double[] x, int offx, int incx, double a, double[] y, int offy, int incy)
        {
            NativeMethods.subrevc_inc_f64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Subtracts each element of an array of double-precision floating point numbers from a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = a - x[i]</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void SubCRev(int length, double* x, int incx, double a, double* y, int incy)
        {
            NativeMethods.subrevc_inc_f64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.mul_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, double* x, double* y)
        {
            NativeMethods.mul_ip_f64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, double[] x, int offx, int incx, double[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_ip_f64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y *= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, double* x, int incx, double* y, int incy)
        {
            NativeMethods.mul_inc_ip_f64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.mul_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, double* a, double* b, double* y)
        {
            NativeMethods.mul_f64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Mul(int length, double[] a, int offa, int inca, double[] b, int offb, int incb, double[] y, int offy, int incy)
        {
            NativeMethods.mul_inc_f64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Multiplies the elements of two arrays of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a * b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Mul(int length, double* a, int inca, double* b, int incb, double* y, int incy)
        {
            NativeMethods.mul_inc_f64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, double a, double[] y, int offy)
        {
            NativeMethods.mulc_ip_f64(length, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, double a, double* y)
        {
            NativeMethods.mulc_ip_f64(length, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, double a, double[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_ip_f64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] *= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, double a, double* y, int incy)
        {
            NativeMethods.mulc_inc_ip_f64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, double[] x, int offx, double a, double[] y, int offy)
        {
            NativeMethods.mulc_f64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, double* x, double a, double* y)
        {
            NativeMethods.mulc_f64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void MulC(int length, double[] x, int offx, int incx, double a, double[] y, int offy, int incy)
        {
            NativeMethods.mulc_inc_f64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Multiplies each element of an array of double-precision floating point numbers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] * a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void MulC(int length, double* x, int incx, double a, double* y, int incy)
        {
            NativeMethods.mulc_inc_f64(length, x, 0, incx, a, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, double[] x, int offx, double[] y, int offy)
        {
            NativeMethods.div_ip_f64(length, x, offx, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of double-precision floating point numbers in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, double* x, double* y)
        {
            NativeMethods.div_ip_f64(length, x, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, double[] x, int offx, int incx, double[] y, int offy, int incy)
        {
            NativeMethods.div_inc_ip_f64(length, x, offx, incx, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of double-precision floating point numbers with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y /= x</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, double* x, int incx, double* y, int incy)
        {
            NativeMethods.div_inc_ip_f64(length, x, 0, incx, y, 0, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, double[] a, int offa, double[] b, int offb, double[] y, int offy)
        {
            NativeMethods.div_f64(length, a, offa, b, offb, y, offy);
        }

        /// <summary>
        /// Divides the elements of two arrays of double-precision floating point numbers not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, double* a, double* b, double* y)
        {
            NativeMethods.div_f64(length, a, 0, b, 0, y, 0);
        }

        /// <summary>
        /// Divides the elements of two arrays of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="offa">The starting element position in <paramref name="a"/>.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="offb">The starting element position in <paramref name="b"/>.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Div(int length, double[] a, int offa, int inca, double[] b, int offb, int incb, double[] y, int offy, int incy)
        {
            NativeMethods.div_inc_f64(length, a, offa, inca, b, offb, incb, y, offy, incy);
        }

        /// <summary>
        /// Divides the elements of two arrays of double-precision floating point numbers with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The first source array.</param>
        /// <param name="inca">The increment for the elements of <paramref name="a"/>.</param>
        /// <param name="b">The second source array.</param>
        /// <param name="incb">The increment for the elements of <paramref name="b"/>.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y = a / b</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void Div(int length, double* a, int inca, double* b, int incb, double* y, int incy)
        {
            NativeMethods.div_inc_f64(length, a, 0, inca, b, 0, incb, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, double a, double[] y, int offy)
        {
            NativeMethods.divc_ip_f64(length, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, double a, double* y)
        {
            NativeMethods.divc_ip_f64(length, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, double a, double[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_ip_f64(length, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value with increment in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The source and destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] /= a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, double a, double* y, int incy)
        {
            NativeMethods.divc_inc_ip_f64(length, a, y, 0, incy);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting element position in <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting element position in <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, double[] x, int offx, double a, double[] y, int offy)
        {
            NativeMethods.divc_f64(length, x, offx, a, y, offy);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, double* x, double a, double* y)
        {
            NativeMethods.divc_f64(length, x, 0, a, y, 0);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="offx">The starting position in <paramref name="x"/>.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="offy">The starting position in <paramref name="y"/>.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void DivC(int length, double[] x, int offx, int incx, double a, double[] y, int offy, int incy)
        {
            NativeMethods.divc_inc_f64(length, x, offx, incx, a, y, offy, incy);
        }

        /// <summary>
        /// Divides each element of an array of double-precision floating point numbers by a constant value with increment not-in-place.
        /// </summary>
        /// <param name="length">The number of elements to compute.</param>
        /// <param name="x">The source array.</param>
        /// <param name="incx">The increment for the elements of <paramref name="x"/>.</param>
        /// <param name="a">The constant value.</param>
        /// <param name="y">The destination array.</param>
        /// <param name="incy">The increment for the elements of <paramref name="y"/>.</param>
        /// <remarks>
        /// The method performs operation defined as <c>y[i] = x[i] / a</c>.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe void DivC(int length, double* x, int incx, double a, double* y, int incy)
        {
            NativeMethods.divc_inc_f64(length, x, 0, incx, a, y, 0, incy);
        }

        [SuppressUnmanagedCodeSecurity]
        private static partial class NativeMethods
        {

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_s8(int n, [In] sbyte[] x, int offx, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_s8(int n, [In] sbyte* x, int offx, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_s8(int n, [In] sbyte[] x, int offx, int incx, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_s8(int n, [In] sbyte* x, int offx, int incx, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_s8(int n, [In] sbyte[] a, int offa, [In] sbyte[] b, int offb, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_s8(int n, [In] sbyte* a, int offa, [In] sbyte* b, int offb, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_s8(int n, [In] sbyte[] a, int offa, int inca, [In] sbyte[] b, int offb, int incb, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_s8(int n, [In] sbyte* a, int offa, int inca, [In] sbyte* b, int offb, int incb, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_s8(int n, [In] sbyte[] x, int offx, sbyte a, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_s8(int n, [In] sbyte* x, int offx, sbyte a, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_s8(int n, [In] sbyte[] x, int offx, int incx, sbyte a, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_s8(int n, [In] sbyte* x, int offx, int incx, sbyte a, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_s8(int n, [In] sbyte[] x, int offx, sbyte alpha, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_s8(int n, [In] sbyte* x, int offx, sbyte alpha, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_s8(int n, [In] sbyte[] a, int offa, [In] sbyte[] b, int offb, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_s8(int n, [In] sbyte* a, int offa, [In] sbyte* b, int offb, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_s8(int n, [In] sbyte[] x, int offx, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_s8(int n, [In] sbyte* x, int offx, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_s8(int n, [In] sbyte[] x, int offx, int incx, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_s8(int n, [In] sbyte* x, int offx, int incx, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_s8(int n, [In] sbyte[] a, int offa, [In] sbyte[] b, int offb, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_s8(int n, [In] sbyte* a, int offa, [In] sbyte* b, int offb, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_s8(int n, [In] sbyte[] a, int offa, int inca, [In] sbyte[] b, int offb, int incb, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_s8(int n, [In] sbyte* a, int offa, int inca, [In] sbyte* b, int offb, int incb, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_s8(int n, [In] sbyte[] x, int offx, sbyte a, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_s8(int n, [In] sbyte* x, int offx, sbyte a, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_s8(int n, [In] sbyte[] x, int offx, int incx, sbyte a, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_s8(int n, [In] sbyte* x, int offx, int incx, sbyte a, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_s8(int n, [In] sbyte[] x, int offx, sbyte a, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_s8(int n, [In] sbyte* x, int offx, sbyte a, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_s8(int n, [In] sbyte[] x, int offx, int incx, sbyte a, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_s8(int n, [In] sbyte* x, int offx, int incx, sbyte a, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_s8(int n, [In] sbyte[] x, int offx, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_s8(int n, [In] sbyte* x, int offx, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_s8(int n, [In] sbyte[] x, int offx, int incx, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_s8(int n, [In] sbyte* x, int offx, int incx, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_s8(int n, [In] sbyte[] a, int offa, [In] sbyte[] b, int offb, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_s8(int n, [In] sbyte* a, int offa, [In] sbyte* b, int offb, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_s8(int n, [In] sbyte[] a, int offa, int inca, [In] sbyte[] b, int offb, int incb, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_s8(int n, [In] sbyte* a, int offa, int inca, [In] sbyte* b, int offb, int incb, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_s8(int n, [In] sbyte[] x, int offx, sbyte a, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_s8(int n, [In] sbyte* x, int offx, sbyte a, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_s8(int n, [In] sbyte[] x, int offx, int incx, sbyte a, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_s8(int n, [In] sbyte* x, int offx, int incx, sbyte a, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_s8(int n, [In] sbyte[] x, int offx, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_s8(int n, [In] sbyte* x, int offx, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_s8(int n, [In] sbyte[] x, int offx, int incx, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_s8(int n, [In] sbyte* x, int offx, int incx, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_s8(int n, [In] sbyte[] a, int offa, [In] sbyte[] b, int offb, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_s8(int n, [In] sbyte* a, int offa, [In] sbyte* b, int offb, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_s8(int n, [In] sbyte[] a, int offa, int inca, [In] sbyte[] b, int offb, int incb, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_s8(int n, [In] sbyte* a, int offa, int inca, [In] sbyte* b, int offb, int incb, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_s8(int n, sbyte a, [In, Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_s8(int n, [In] sbyte[] x, int offx, sbyte a, [Out] sbyte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_s8(int n, [In] sbyte* x, int offx, sbyte a, [Out] sbyte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_s8(int n, [In] sbyte[] x, int offx, int incx, sbyte a, [Out] sbyte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_s8(int n, [In] sbyte* x, int offx, int incx, sbyte a, [Out] sbyte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_u8(int n, [In] byte[] x, int offx, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_u8(int n, [In] byte* x, int offx, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_u8(int n, [In] byte[] x, int offx, int incx, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_u8(int n, [In] byte* x, int offx, int incx, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_u8(int n, [In] byte[] a, int offa, [In] byte[] b, int offb, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_u8(int n, [In] byte* a, int offa, [In] byte* b, int offb, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_u8(int n, [In] byte[] a, int offa, int inca, [In] byte[] b, int offb, int incb, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_u8(int n, [In] byte* a, int offa, int inca, [In] byte* b, int offb, int incb, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_u8(int n, byte a, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_u8(int n, byte a, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_u8(int n, [In] byte[] x, int offx, byte a, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_u8(int n, [In] byte* x, int offx, byte a, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_u8(int n, [In] byte[] x, int offx, int incx, byte a, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_u8(int n, [In] byte* x, int offx, int incx, byte a, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_u8(int n, [In] byte[] x, int offx, byte alpha, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_u8(int n, [In] byte* x, int offx, byte alpha, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_u8(int n, [In] byte[] a, int offa, [In] byte[] b, int offb, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_u8(int n, [In] byte* a, int offa, [In] byte* b, int offb, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_u8(int n, [In] byte[] x, int offx, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_u8(int n, [In] byte* x, int offx, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_u8(int n, [In] byte[] x, int offx, int incx, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_u8(int n, [In] byte* x, int offx, int incx, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_u8(int n, [In] byte[] a, int offa, [In] byte[] b, int offb, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_u8(int n, [In] byte* a, int offa, [In] byte* b, int offb, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_u8(int n, [In] byte[] a, int offa, int inca, [In] byte[] b, int offb, int incb, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_u8(int n, [In] byte* a, int offa, int inca, [In] byte* b, int offb, int incb, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_u8(int n, byte a, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_u8(int n, byte a, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_u8(int n, [In] byte[] x, int offx, byte a, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_u8(int n, [In] byte* x, int offx, byte a, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_u8(int n, [In] byte[] x, int offx, int incx, byte a, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_u8(int n, [In] byte* x, int offx, int incx, byte a, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_u8(int n, byte a, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_u8(int n, byte a, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_u8(int n, [In] byte[] x, int offx, byte a, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_u8(int n, [In] byte* x, int offx, byte a, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_u8(int n, [In] byte[] x, int offx, int incx, byte a, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_u8(int n, [In] byte* x, int offx, int incx, byte a, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_u8(int n, [In] byte[] x, int offx, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_u8(int n, [In] byte* x, int offx, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_u8(int n, [In] byte[] x, int offx, int incx, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_u8(int n, [In] byte* x, int offx, int incx, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_u8(int n, [In] byte[] a, int offa, [In] byte[] b, int offb, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_u8(int n, [In] byte* a, int offa, [In] byte* b, int offb, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_u8(int n, [In] byte[] a, int offa, int inca, [In] byte[] b, int offb, int incb, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_u8(int n, [In] byte* a, int offa, int inca, [In] byte* b, int offb, int incb, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_u8(int n, byte a, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_u8(int n, byte a, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_u8(int n, [In] byte[] x, int offx, byte a, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_u8(int n, [In] byte* x, int offx, byte a, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_u8(int n, [In] byte[] x, int offx, int incx, byte a, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_u8(int n, [In] byte* x, int offx, int incx, byte a, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_u8(int n, [In] byte[] x, int offx, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_u8(int n, [In] byte* x, int offx, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_u8(int n, [In] byte[] x, int offx, int incx, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_u8(int n, [In] byte* x, int offx, int incx, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_u8(int n, [In] byte[] a, int offa, [In] byte[] b, int offb, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_u8(int n, [In] byte* a, int offa, [In] byte* b, int offb, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_u8(int n, [In] byte[] a, int offa, int inca, [In] byte[] b, int offb, int incb, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_u8(int n, [In] byte* a, int offa, int inca, [In] byte* b, int offb, int incb, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_u8(int n, byte a, [In, Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_u8(int n, byte a, [In, Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_u8(int n, byte a, [In, Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_u8(int n, [In] byte[] x, int offx, byte a, [Out] byte[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_u8(int n, [In] byte* x, int offx, byte a, [Out] byte* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_u8(int n, [In] byte[] x, int offx, int incx, byte a, [Out] byte[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_u8(int n, [In] byte* x, int offx, int incx, byte a, [Out] byte* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_s16(int n, [In] short[] x, int offx, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_s16(int n, [In] short* x, int offx, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_s16(int n, [In] short[] x, int offx, int incx, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_s16(int n, [In] short* x, int offx, int incx, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_s16(int n, [In] short[] a, int offa, [In] short[] b, int offb, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_s16(int n, [In] short* a, int offa, [In] short* b, int offb, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_s16(int n, [In] short[] a, int offa, int inca, [In] short[] b, int offb, int incb, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_s16(int n, [In] short* a, int offa, int inca, [In] short* b, int offb, int incb, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_s16(int n, short a, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_s16(int n, short a, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_s16(int n, short a, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_s16(int n, short a, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_s16(int n, [In] short[] x, int offx, short a, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_s16(int n, [In] short* x, int offx, short a, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_s16(int n, [In] short[] x, int offx, int incx, short a, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_s16(int n, [In] short* x, int offx, int incx, short a, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_s16(int n, [In] short[] x, int offx, short alpha, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_s16(int n, [In] short* x, int offx, short alpha, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_s16(int n, [In] short[] a, int offa, [In] short[] b, int offb, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_s16(int n, [In] short* a, int offa, [In] short* b, int offb, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_s16(int n, [In] short[] x, int offx, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_s16(int n, [In] short* x, int offx, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_s16(int n, [In] short[] x, int offx, int incx, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_s16(int n, [In] short* x, int offx, int incx, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_s16(int n, [In] short[] a, int offa, [In] short[] b, int offb, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_s16(int n, [In] short* a, int offa, [In] short* b, int offb, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_s16(int n, [In] short[] a, int offa, int inca, [In] short[] b, int offb, int incb, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_s16(int n, [In] short* a, int offa, int inca, [In] short* b, int offb, int incb, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_s16(int n, short a, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_s16(int n, short a, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_s16(int n, short a, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_s16(int n, short a, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_s16(int n, [In] short[] x, int offx, short a, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_s16(int n, [In] short* x, int offx, short a, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_s16(int n, [In] short[] x, int offx, int incx, short a, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_s16(int n, [In] short* x, int offx, int incx, short a, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_s16(int n, short a, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_s16(int n, short a, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_s16(int n, short a, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_s16(int n, short a, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_s16(int n, [In] short[] x, int offx, short a, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_s16(int n, [In] short* x, int offx, short a, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_s16(int n, [In] short[] x, int offx, int incx, short a, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_s16(int n, [In] short* x, int offx, int incx, short a, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_s16(int n, [In] short[] x, int offx, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_s16(int n, [In] short* x, int offx, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_s16(int n, [In] short[] x, int offx, int incx, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_s16(int n, [In] short* x, int offx, int incx, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_s16(int n, [In] short[] a, int offa, [In] short[] b, int offb, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_s16(int n, [In] short* a, int offa, [In] short* b, int offb, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_s16(int n, [In] short[] a, int offa, int inca, [In] short[] b, int offb, int incb, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_s16(int n, [In] short* a, int offa, int inca, [In] short* b, int offb, int incb, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_s16(int n, short a, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_s16(int n, short a, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_s16(int n, short a, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_s16(int n, short a, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_s16(int n, [In] short[] x, int offx, short a, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_s16(int n, [In] short* x, int offx, short a, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_s16(int n, [In] short[] x, int offx, int incx, short a, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_s16(int n, [In] short* x, int offx, int incx, short a, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_s16(int n, [In] short[] x, int offx, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_s16(int n, [In] short* x, int offx, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_s16(int n, [In] short[] x, int offx, int incx, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_s16(int n, [In] short* x, int offx, int incx, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_s16(int n, [In] short[] a, int offa, [In] short[] b, int offb, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_s16(int n, [In] short* a, int offa, [In] short* b, int offb, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_s16(int n, [In] short[] a, int offa, int inca, [In] short[] b, int offb, int incb, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_s16(int n, [In] short* a, int offa, int inca, [In] short* b, int offb, int incb, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_s16(int n, short a, [In, Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_s16(int n, short a, [In, Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_s16(int n, short a, [In, Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_s16(int n, short a, [In, Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_s16(int n, [In] short[] x, int offx, short a, [Out] short[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_s16(int n, [In] short* x, int offx, short a, [Out] short* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_s16(int n, [In] short[] x, int offx, int incx, short a, [Out] short[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_s16(int n, [In] short* x, int offx, int incx, short a, [Out] short* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_u16(int n, [In] ushort[] x, int offx, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_u16(int n, [In] ushort* x, int offx, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_u16(int n, [In] ushort[] x, int offx, int incx, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_u16(int n, [In] ushort* x, int offx, int incx, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_u16(int n, [In] ushort[] a, int offa, [In] ushort[] b, int offb, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_u16(int n, [In] ushort* a, int offa, [In] ushort* b, int offb, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_u16(int n, [In] ushort[] a, int offa, int inca, [In] ushort[] b, int offb, int incb, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_u16(int n, [In] ushort* a, int offa, int inca, [In] ushort* b, int offb, int incb, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_u16(int n, [In] ushort[] x, int offx, ushort a, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_u16(int n, [In] ushort* x, int offx, ushort a, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_u16(int n, [In] ushort[] x, int offx, int incx, ushort a, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_u16(int n, [In] ushort* x, int offx, int incx, ushort a, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_u16(int n, [In] ushort[] x, int offx, ushort alpha, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_u16(int n, [In] ushort* x, int offx, ushort alpha, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_u16(int n, [In] ushort[] a, int offa, [In] ushort[] b, int offb, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_u16(int n, [In] ushort* a, int offa, [In] ushort* b, int offb, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_u16(int n, [In] ushort[] x, int offx, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_u16(int n, [In] ushort* x, int offx, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_u16(int n, [In] ushort[] x, int offx, int incx, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_u16(int n, [In] ushort* x, int offx, int incx, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_u16(int n, [In] ushort[] a, int offa, [In] ushort[] b, int offb, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_u16(int n, [In] ushort* a, int offa, [In] ushort* b, int offb, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_u16(int n, [In] ushort[] a, int offa, int inca, [In] ushort[] b, int offb, int incb, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_u16(int n, [In] ushort* a, int offa, int inca, [In] ushort* b, int offb, int incb, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_u16(int n, [In] ushort[] x, int offx, ushort a, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_u16(int n, [In] ushort* x, int offx, ushort a, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_u16(int n, [In] ushort[] x, int offx, int incx, ushort a, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_u16(int n, [In] ushort* x, int offx, int incx, ushort a, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_u16(int n, [In] ushort[] x, int offx, ushort a, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_u16(int n, [In] ushort* x, int offx, ushort a, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_u16(int n, [In] ushort[] x, int offx, int incx, ushort a, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_u16(int n, [In] ushort* x, int offx, int incx, ushort a, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_u16(int n, [In] ushort[] x, int offx, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_u16(int n, [In] ushort* x, int offx, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_u16(int n, [In] ushort[] x, int offx, int incx, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_u16(int n, [In] ushort* x, int offx, int incx, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_u16(int n, [In] ushort[] a, int offa, [In] ushort[] b, int offb, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_u16(int n, [In] ushort* a, int offa, [In] ushort* b, int offb, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_u16(int n, [In] ushort[] a, int offa, int inca, [In] ushort[] b, int offb, int incb, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_u16(int n, [In] ushort* a, int offa, int inca, [In] ushort* b, int offb, int incb, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_u16(int n, [In] ushort[] x, int offx, ushort a, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_u16(int n, [In] ushort* x, int offx, ushort a, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_u16(int n, [In] ushort[] x, int offx, int incx, ushort a, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_u16(int n, [In] ushort* x, int offx, int incx, ushort a, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_u16(int n, [In] ushort[] x, int offx, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_u16(int n, [In] ushort* x, int offx, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_u16(int n, [In] ushort[] x, int offx, int incx, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_u16(int n, [In] ushort* x, int offx, int incx, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_u16(int n, [In] ushort[] a, int offa, [In] ushort[] b, int offb, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_u16(int n, [In] ushort* a, int offa, [In] ushort* b, int offb, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_u16(int n, [In] ushort[] a, int offa, int inca, [In] ushort[] b, int offb, int incb, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_u16(int n, [In] ushort* a, int offa, int inca, [In] ushort* b, int offb, int incb, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_u16(int n, ushort a, [In, Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_u16(int n, ushort a, [In, Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_u16(int n, [In] ushort[] x, int offx, ushort a, [Out] ushort[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_u16(int n, [In] ushort* x, int offx, ushort a, [Out] ushort* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_u16(int n, [In] ushort[] x, int offx, int incx, ushort a, [Out] ushort[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_u16(int n, [In] ushort* x, int offx, int incx, ushort a, [Out] ushort* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_s32(int n, [In] int[] x, int offx, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_s32(int n, [In] int* x, int offx, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_s32(int n, [In] int[] x, int offx, int incx, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_s32(int n, [In] int* x, int offx, int incx, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_s32(int n, [In] int* a, int offa, [In] int* b, int offb, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_s32(int n, [In] int[] a, int offa, int inca, [In] int[] b, int offb, int incb, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_s32(int n, [In] int* a, int offa, int inca, [In] int* b, int offb, int incb, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_s32(int n, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_s32(int n, int a, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_s32(int n, int a, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_s32(int n, int a, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_s32(int n, [In] int* x, int offx, int a, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_s32(int n, [In] int[] x, int offx, int incx, int a, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_s32(int n, [In] int* x, int offx, int incx, int a, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_s32(int n, [In] int[] x, int offx, int alpha, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_s32(int n, [In] int* x, int offx, int alpha, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_s32(int n, [In] int* a, int offa, [In] int* b, int offb, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_s32(int n, [In] int[] x, int offx, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_s32(int n, [In] int* x, int offx, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_s32(int n, [In] int[] x, int offx, int incx, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_s32(int n, [In] int* x, int offx, int incx, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_s32(int n, [In] int* a, int offa, [In] int* b, int offb, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_s32(int n, [In] int[] a, int offa, int inca, [In] int[] b, int offb, int incb, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_s32(int n, [In] int* a, int offa, int inca, [In] int* b, int offb, int incb, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_s32(int n, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_s32(int n, int a, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_s32(int n, int a, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_s32(int n, int a, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_s32(int n, [In] int* x, int offx, int a, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_s32(int n, [In] int[] x, int offx, int incx, int a, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_s32(int n, [In] int* x, int offx, int incx, int a, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_s32(int n, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_s32(int n, int a, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_s32(int n, int a, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_s32(int n, int a, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_s32(int n, [In] int* x, int offx, int a, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_s32(int n, [In] int[] x, int offx, int incx, int a, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_s32(int n, [In] int* x, int offx, int incx, int a, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_s32(int n, [In] int[] x, int offx, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_s32(int n, [In] int* x, int offx, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_s32(int n, [In] int[] x, int offx, int incx, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_s32(int n, [In] int* x, int offx, int incx, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_s32(int n, [In] int* a, int offa, [In] int* b, int offb, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_s32(int n, [In] int[] a, int offa, int inca, [In] int[] b, int offb, int incb, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_s32(int n, [In] int* a, int offa, int inca, [In] int* b, int offb, int incb, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_s32(int n, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_s32(int n, int a, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_s32(int n, int a, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_s32(int n, int a, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_s32(int n, [In] int* x, int offx, int a, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_s32(int n, [In] int[] x, int offx, int incx, int a, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_s32(int n, [In] int* x, int offx, int incx, int a, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_s32(int n, [In] int[] x, int offx, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_s32(int n, [In] int* x, int offx, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_s32(int n, [In] int[] x, int offx, int incx, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_s32(int n, [In] int* x, int offx, int incx, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_s32(int n, [In] int[] a, int offa, [In] int[] b, int offb, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_s32(int n, [In] int* a, int offa, [In] int* b, int offb, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_s32(int n, [In] int[] a, int offa, int inca, [In] int[] b, int offb, int incb, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_s32(int n, [In] int* a, int offa, int inca, [In] int* b, int offb, int incb, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_s32(int n, int a, [In, Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_s32(int n, int a, [In, Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_s32(int n, int a, [In, Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_s32(int n, int a, [In, Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_s32(int n, [In] int[] x, int offx, int a, [Out] int[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_s32(int n, [In] int* x, int offx, int a, [Out] int* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_s32(int n, [In] int[] x, int offx, int incx, int a, [Out] int[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_s32(int n, [In] int* x, int offx, int incx, int a, [Out] int* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_u32(int n, [In] uint[] x, int offx, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_u32(int n, [In] uint* x, int offx, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_u32(int n, [In] uint[] x, int offx, int incx, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_u32(int n, [In] uint* x, int offx, int incx, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_u32(int n, [In] uint* a, int offa, [In] uint* b, int offb, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_u32(int n, [In] uint[] a, int offa, int inca, [In] uint[] b, int offb, int incb, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_u32(int n, [In] uint* a, int offa, int inca, [In] uint* b, int offb, int incb, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_u32(int n, uint a, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_u32(int n, uint a, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_u32(int n, [In] uint* x, int offx, uint a, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_u32(int n, [In] uint[] x, int offx, int incx, uint a, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_u32(int n, [In] uint* x, int offx, int incx, uint a, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_u32(int n, [In] uint[] x, int offx, uint alpha, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_u32(int n, [In] uint* x, int offx, uint alpha, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_u32(int n, [In] uint* a, int offa, [In] uint* b, int offb, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_u32(int n, [In] uint[] x, int offx, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_u32(int n, [In] uint* x, int offx, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_u32(int n, [In] uint[] x, int offx, int incx, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_u32(int n, [In] uint* x, int offx, int incx, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_u32(int n, [In] uint* a, int offa, [In] uint* b, int offb, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_u32(int n, [In] uint[] a, int offa, int inca, [In] uint[] b, int offb, int incb, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_u32(int n, [In] uint* a, int offa, int inca, [In] uint* b, int offb, int incb, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_u32(int n, uint a, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_u32(int n, uint a, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_u32(int n, [In] uint* x, int offx, uint a, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_u32(int n, [In] uint[] x, int offx, int incx, uint a, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_u32(int n, [In] uint* x, int offx, int incx, uint a, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_u32(int n, uint a, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_u32(int n, uint a, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_u32(int n, [In] uint* x, int offx, uint a, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_u32(int n, [In] uint[] x, int offx, int incx, uint a, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_u32(int n, [In] uint* x, int offx, int incx, uint a, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_u32(int n, [In] uint[] x, int offx, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_u32(int n, [In] uint* x, int offx, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_u32(int n, [In] uint[] x, int offx, int incx, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_u32(int n, [In] uint* x, int offx, int incx, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_u32(int n, [In] uint* a, int offa, [In] uint* b, int offb, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_u32(int n, [In] uint[] a, int offa, int inca, [In] uint[] b, int offb, int incb, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_u32(int n, [In] uint* a, int offa, int inca, [In] uint* b, int offb, int incb, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_u32(int n, uint a, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_u32(int n, uint a, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_u32(int n, [In] uint* x, int offx, uint a, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_u32(int n, [In] uint[] x, int offx, int incx, uint a, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_u32(int n, [In] uint* x, int offx, int incx, uint a, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_u32(int n, [In] uint[] x, int offx, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_u32(int n, [In] uint* x, int offx, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_u32(int n, [In] uint[] x, int offx, int incx, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_u32(int n, [In] uint* x, int offx, int incx, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_u32(int n, [In] uint[] a, int offa, [In] uint[] b, int offb, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_u32(int n, [In] uint* a, int offa, [In] uint* b, int offb, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_u32(int n, [In] uint[] a, int offa, int inca, [In] uint[] b, int offb, int incb, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_u32(int n, [In] uint* a, int offa, int inca, [In] uint* b, int offb, int incb, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_u32(int n, uint a, [In, Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_u32(int n, uint a, [In, Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_u32(int n, uint a, [In, Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_u32(int n, [In] uint[] x, int offx, uint a, [Out] uint[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_u32(int n, [In] uint* x, int offx, uint a, [Out] uint* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_u32(int n, [In] uint[] x, int offx, int incx, uint a, [Out] uint[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_u32(int n, [In] uint* x, int offx, int incx, uint a, [Out] uint* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_s64(int n, [In] long[] x, int offx, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_s64(int n, [In] long* x, int offx, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_s64(int n, [In] long[] x, int offx, int incx, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_s64(int n, [In] long* x, int offx, int incx, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_s64(int n, [In] long* a, int offa, [In] long* b, int offb, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_s64(int n, [In] long[] a, int offa, int inca, [In] long[] b, int offb, int incb, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_s64(int n, [In] long* a, int offa, int inca, [In] long* b, int offb, int incb, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_s64(int n, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_s64(int n, long a, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_s64(int n, long a, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_s64(int n, long a, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_s64(int n, [In] long* x, int offx, long a, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_s64(int n, [In] long[] x, int offx, int incx, long a, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_s64(int n, [In] long* x, int offx, int incx, long a, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_s64(int n, [In] long[] x, int offx, long alpha, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_s64(int n, [In] long* x, int offx, long alpha, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_s64(int n, [In] long* a, int offa, [In] long* b, int offb, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_s64(int n, [In] long[] x, int offx, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_s64(int n, [In] long* x, int offx, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_s64(int n, [In] long[] x, int offx, int incx, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_s64(int n, [In] long* x, int offx, int incx, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_s64(int n, [In] long* a, int offa, [In] long* b, int offb, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_s64(int n, [In] long[] a, int offa, int inca, [In] long[] b, int offb, int incb, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_s64(int n, [In] long* a, int offa, int inca, [In] long* b, int offb, int incb, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_s64(int n, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_s64(int n, long a, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_s64(int n, long a, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_s64(int n, long a, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_s64(int n, [In] long* x, int offx, long a, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_s64(int n, [In] long[] x, int offx, int incx, long a, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_s64(int n, [In] long* x, int offx, int incx, long a, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_s64(int n, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_s64(int n, long a, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_s64(int n, long a, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_s64(int n, long a, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_s64(int n, [In] long* x, int offx, long a, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_s64(int n, [In] long[] x, int offx, int incx, long a, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_s64(int n, [In] long* x, int offx, int incx, long a, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_s64(int n, [In] long[] x, int offx, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_s64(int n, [In] long* x, int offx, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_s64(int n, [In] long[] x, int offx, int incx, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_s64(int n, [In] long* x, int offx, int incx, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_s64(int n, [In] long* a, int offa, [In] long* b, int offb, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_s64(int n, [In] long[] a, int offa, int inca, [In] long[] b, int offb, int incb, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_s64(int n, [In] long* a, int offa, int inca, [In] long* b, int offb, int incb, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_s64(int n, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_s64(int n, long a, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_s64(int n, long a, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_s64(int n, long a, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_s64(int n, [In] long* x, int offx, long a, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_s64(int n, [In] long[] x, int offx, int incx, long a, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_s64(int n, [In] long* x, int offx, int incx, long a, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_s64(int n, [In] long[] x, int offx, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_s64(int n, [In] long* x, int offx, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_s64(int n, [In] long[] x, int offx, int incx, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_s64(int n, [In] long* x, int offx, int incx, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_s64(int n, [In] long[] a, int offa, [In] long[] b, int offb, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_s64(int n, [In] long* a, int offa, [In] long* b, int offb, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_s64(int n, [In] long[] a, int offa, int inca, [In] long[] b, int offb, int incb, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_s64(int n, [In] long* a, int offa, int inca, [In] long* b, int offb, int incb, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_s64(int n, long a, [In, Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_s64(int n, long a, [In, Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_s64(int n, long a, [In, Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_s64(int n, long a, [In, Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_s64(int n, [In] long[] x, int offx, long a, [Out] long[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_s64(int n, [In] long* x, int offx, long a, [Out] long* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_s64(int n, [In] long[] x, int offx, int incx, long a, [Out] long[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_s64(int n, [In] long* x, int offx, int incx, long a, [Out] long* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_u64(int n, [In] ulong[] x, int offx, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_u64(int n, [In] ulong* x, int offx, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_u64(int n, [In] ulong[] x, int offx, int incx, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_u64(int n, [In] ulong* x, int offx, int incx, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_u64(int n, [In] ulong* a, int offa, [In] ulong* b, int offb, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_u64(int n, [In] ulong[] a, int offa, int inca, [In] ulong[] b, int offb, int incb, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_u64(int n, [In] ulong* a, int offa, int inca, [In] ulong* b, int offb, int incb, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_u64(int n, [In] ulong* x, int offx, ulong a, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_u64(int n, [In] ulong[] x, int offx, int incx, ulong a, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_u64(int n, [In] ulong* x, int offx, int incx, ulong a, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_u64(int n, [In] ulong[] x, int offx, ulong alpha, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_u64(int n, [In] ulong* x, int offx, ulong alpha, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_u64(int n, [In] ulong* a, int offa, [In] ulong* b, int offb, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_u64(int n, [In] ulong[] x, int offx, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_u64(int n, [In] ulong* x, int offx, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_u64(int n, [In] ulong[] x, int offx, int incx, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_u64(int n, [In] ulong* x, int offx, int incx, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_u64(int n, [In] ulong* a, int offa, [In] ulong* b, int offb, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_u64(int n, [In] ulong[] a, int offa, int inca, [In] ulong[] b, int offb, int incb, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_u64(int n, [In] ulong* a, int offa, int inca, [In] ulong* b, int offb, int incb, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_u64(int n, [In] ulong* x, int offx, ulong a, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_u64(int n, [In] ulong[] x, int offx, int incx, ulong a, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_u64(int n, [In] ulong* x, int offx, int incx, ulong a, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_u64(int n, [In] ulong* x, int offx, ulong a, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_u64(int n, [In] ulong[] x, int offx, int incx, ulong a, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_u64(int n, [In] ulong* x, int offx, int incx, ulong a, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_u64(int n, [In] ulong[] x, int offx, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_u64(int n, [In] ulong* x, int offx, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_u64(int n, [In] ulong[] x, int offx, int incx, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_u64(int n, [In] ulong* x, int offx, int incx, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_u64(int n, [In] ulong* a, int offa, [In] ulong* b, int offb, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_u64(int n, [In] ulong[] a, int offa, int inca, [In] ulong[] b, int offb, int incb, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_u64(int n, [In] ulong* a, int offa, int inca, [In] ulong* b, int offb, int incb, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_u64(int n, [In] ulong* x, int offx, ulong a, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_u64(int n, [In] ulong[] x, int offx, int incx, ulong a, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_u64(int n, [In] ulong* x, int offx, int incx, ulong a, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_u64(int n, [In] ulong[] x, int offx, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_u64(int n, [In] ulong* x, int offx, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_u64(int n, [In] ulong[] x, int offx, int incx, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_u64(int n, [In] ulong* x, int offx, int incx, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_u64(int n, [In] ulong[] a, int offa, [In] ulong[] b, int offb, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_u64(int n, [In] ulong* a, int offa, [In] ulong* b, int offb, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_u64(int n, [In] ulong[] a, int offa, int inca, [In] ulong[] b, int offb, int incb, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_u64(int n, [In] ulong* a, int offa, int inca, [In] ulong* b, int offb, int incb, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_u64(int n, ulong a, [In, Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_u64(int n, ulong a, [In, Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_u64(int n, [In] ulong[] x, int offx, ulong a, [Out] ulong[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_u64(int n, [In] ulong* x, int offx, ulong a, [Out] ulong* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_u64(int n, [In] ulong[] x, int offx, int incx, ulong a, [Out] ulong[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_u64(int n, [In] ulong* x, int offx, int incx, ulong a, [Out] ulong* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_f32(int n, [In] float[] x, int offx, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_f32(int n, [In] float* x, int offx, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_f32(int n, [In] float[] x, int offx, int incx, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_f32(int n, [In] float* x, int offx, int incx, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_f32(int n, [In] float* a, int offa, [In] float* b, int offb, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_f32(int n, [In] float[] a, int offa, int inca, [In] float[] b, int offb, int incb, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_f32(int n, [In] float* a, int offa, int inca, [In] float* b, int offb, int incb, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_f32(int n, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_f32(int n, float a, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_f32(int n, float a, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_f32(int n, float a, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_f32(int n, [In] float* x, int offx, float a, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_f32(int n, [In] float[] x, int offx, int incx, float a, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_f32(int n, [In] float* x, int offx, int incx, float a, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_f32(int n, [In] float[] x, int offx, float alpha, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_f32(int n, [In] float* x, int offx, float alpha, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_f32(int n, [In] float* a, int offa, [In] float* b, int offb, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_f32(int n, [In] float[] x, int offx, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_f32(int n, [In] float* x, int offx, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_f32(int n, [In] float[] x, int offx, int incx, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_f32(int n, [In] float* x, int offx, int incx, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_f32(int n, [In] float* a, int offa, [In] float* b, int offb, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_f32(int n, [In] float[] a, int offa, int inca, [In] float[] b, int offb, int incb, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_f32(int n, [In] float* a, int offa, int inca, [In] float* b, int offb, int incb, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_f32(int n, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_f32(int n, float a, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_f32(int n, float a, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_f32(int n, float a, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_f32(int n, [In] float* x, int offx, float a, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_f32(int n, [In] float[] x, int offx, int incx, float a, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_f32(int n, [In] float* x, int offx, int incx, float a, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_f32(int n, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_f32(int n, float a, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_f32(int n, float a, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_f32(int n, float a, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_f32(int n, [In] float* x, int offx, float a, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_f32(int n, [In] float[] x, int offx, int incx, float a, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_f32(int n, [In] float* x, int offx, int incx, float a, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_f32(int n, [In] float[] x, int offx, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_f32(int n, [In] float* x, int offx, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_f32(int n, [In] float[] x, int offx, int incx, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_f32(int n, [In] float* x, int offx, int incx, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_f32(int n, [In] float* a, int offa, [In] float* b, int offb, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_f32(int n, [In] float[] a, int offa, int inca, [In] float[] b, int offb, int incb, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_f32(int n, [In] float* a, int offa, int inca, [In] float* b, int offb, int incb, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_f32(int n, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_f32(int n, float a, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_f32(int n, float a, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_f32(int n, float a, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_f32(int n, [In] float* x, int offx, float a, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_f32(int n, [In] float[] x, int offx, int incx, float a, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_f32(int n, [In] float* x, int offx, int incx, float a, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_f32(int n, [In] float[] x, int offx, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_f32(int n, [In] float* x, int offx, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_f32(int n, [In] float[] x, int offx, int incx, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_f32(int n, [In] float* x, int offx, int incx, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_f32(int n, [In] float[] a, int offa, [In] float[] b, int offb, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_f32(int n, [In] float* a, int offa, [In] float* b, int offb, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_f32(int n, [In] float[] a, int offa, int inca, [In] float[] b, int offb, int incb, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_f32(int n, [In] float* a, int offa, int inca, [In] float* b, int offb, int incb, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_f32(int n, float a, [In, Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_f32(int n, float a, [In, Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_f32(int n, float a, [In, Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_f32(int n, float a, [In, Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_f32(int n, [In] float[] x, int offx, float a, [Out] float[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_f32(int n, [In] float* x, int offx, float a, [Out] float* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_f32(int n, [In] float[] x, int offx, int incx, float a, [Out] float[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_f32(int n, [In] float* x, int offx, int incx, float a, [Out] float* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_ip_f64(int n, [In] double[] x, int offx, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_ip_f64(int n, [In] double* x, int offx, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_ip_f64(int n, [In] double[] x, int offx, int incx, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_ip_f64(int n, [In] double* x, int offx, int incx, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_f64(int n, [In] double* a, int offa, [In] double* b, int offb, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void add_inc_f64(int n, [In] double[] a, int offa, int inca, [In] double[] b, int offb, int incb, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void add_inc_f64(int n, [In] double* a, int offa, int inca, [In] double* b, int offb, int incb, [Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_ip_f64(int n, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_ip_f64(int n, double a, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_ip_f64(int n, double a, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_ip_f64(int n, double a, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_f64(int n, [In] double* x, int offx, double a, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addc_inc_f64(int n, [In] double[] x, int offx, int incx, double a, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addc_inc_f64(int n, [In] double* x, int offx, int incx, double a, [Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproductc_f64(int n, [In] double[] x, int offx, double alpha, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproductc_f64(int n, [In] double* x, int offx, double alpha, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void addproduct_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void addproduct_f64(int n, [In] double* a, int offa, [In] double* b, int offb, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_ip_f64(int n, [In] double[] x, int offx, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_ip_f64(int n, [In] double* x, int offx, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_ip_f64(int n, [In] double[] x, int offx, int incx, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_ip_f64(int n, [In] double* x, int offx, int incx, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_f64(int n, [In] double* a, int offa, [In] double* b, int offb, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void sub_inc_f64(int n, [In] double[] a, int offa, int inca, [In] double[] b, int offb, int incb, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void sub_inc_f64(int n, [In] double* a, int offa, int inca, [In] double* b, int offb, int incb, [Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_ip_f64(int n, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_ip_f64(int n, double a, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_ip_f64(int n, double a, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_ip_f64(int n, double a, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_f64(int n, [In] double* x, int offx, double a, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subc_inc_f64(int n, [In] double[] x, int offx, int incx, double a, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subc_inc_f64(int n, [In] double* x, int offx, int incx, double a, [Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_ip_f64(int n, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_ip_f64(int n, double a, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_ip_f64(int n, double a, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_ip_f64(int n, double a, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_f64(int n, [In] double* x, int offx, double a, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void subrevc_inc_f64(int n, [In] double[] x, int offx, int incx, double a, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void subrevc_inc_f64(int n, [In] double* x, int offx, int incx, double a, [Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_ip_f64(int n, [In] double[] x, int offx, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_ip_f64(int n, [In] double* x, int offx, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_ip_f64(int n, [In] double[] x, int offx, int incx, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_ip_f64(int n, [In] double* x, int offx, int incx, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_f64(int n, [In] double* a, int offa, [In] double* b, int offb, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mul_inc_f64(int n, [In] double[] a, int offa, int inca, [In] double[] b, int offb, int incb, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mul_inc_f64(int n, [In] double* a, int offa, int inca, [In] double* b, int offb, int incb, [Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_ip_f64(int n, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_ip_f64(int n, double a, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_ip_f64(int n, double a, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_ip_f64(int n, double a, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_f64(int n, [In] double* x, int offx, double a, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void mulc_inc_f64(int n, [In] double[] x, int offx, int incx, double a, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void mulc_inc_f64(int n, [In] double* x, int offx, int incx, double a, [Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_ip_f64(int n, [In] double[] x, int offx, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_ip_f64(int n, [In] double* x, int offx, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_ip_f64(int n, [In] double[] x, int offx, int incx, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_ip_f64(int n, [In] double* x, int offx, int incx, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_f64(int n, [In] double[] a, int offa, [In] double[] b, int offb, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_f64(int n, [In] double* a, int offa, [In] double* b, int offb, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void div_inc_f64(int n, [In] double[] a, int offa, int inca, [In] double[] b, int offb, int incb, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void div_inc_f64(int n, [In] double* a, int offa, int inca, [In] double* b, int offb, int incb, [Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_ip_f64(int n, double a, [In, Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_ip_f64(int n, double a, [In, Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_ip_f64(int n, double a, [In, Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_ip_f64(int n, double a, [In, Out] double* y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_f64(int n, [In] double[] x, int offx, double a, [Out] double[] y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_f64(int n, [In] double* x, int offx, double a, [Out] double* y, int offy);

            [DllImport(NativeMethods.DllName)]
            public static extern void divc_inc_f64(int n, [In] double[] x, int offx, int incx, double a, [Out] double[] y, int offy, int incy);

            [DllImport(NativeMethods.DllName)]
            public static extern unsafe void divc_inc_f64(int n, [In] double* x, int offx, int incx, double a, [Out] double* y, int offy, int incy);
        }
    }
}
