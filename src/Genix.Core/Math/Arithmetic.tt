<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
<#@ include file="..\T4\MethodDescriptor.ttinclude"#>
// -----------------------------------------------------------------------
// <copyright file="Arithmetic.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

<#
    MethodDescriptor[] methods = new MethodDescriptor[]
    {
        new MethodDescriptor()
        {
            Name = "Add",
            NativeName = "add",
            Argument = ArgumentType.TwoVectors,
            Summary = "Adds the elements of two arrays of {0}",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y = a + b",
            OpInPlace = "y += x",
        },
        new MethodDescriptor()
        {
            Name = "AddC",
            NativeName = "addc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Adds a constant value to each element of an array of {0}",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y[i] = x[i] + a",
            OpInPlace = "y[i] += a",
        },
        new MethodDescriptor()
        {
            Name = "AddProductC",
            NativeName = "addproductc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Adds a product of a constant value and elements of an array of {0} to elements of a destination array",
            ConstantName = "alpha",
            ConstantDescription = "The scalar to multiply.",
            Op = "y[i] += x[i] * a"
        },
        new MethodDescriptor()
        {
            Name = "AddProduct",
            NativeName = "addproduct",
            Argument = ArgumentType.TwoVectors,
            Summary = "Adds a product of elements of two arrays of {0} to elements of a destination array",
            Op = "y[i] += a[i] * b[i]"
        },
        new MethodDescriptor()
        {
            Name = "Sub",
            NativeName = "sub",
            Argument = ArgumentType.TwoVectors,
            Summary = "Subtracts the elements of two arrays of {0}",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y = a - b",
            OpInPlace = "y -= x",
        },
        new MethodDescriptor()
        {
            Name = "SubC",
            NativeName = "subc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Subtracts a constant value from each element of an array of {0}",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y[i] = x[i] - a",
            OpInPlace = "y[i] -= a",
        },
        new MethodDescriptor()
        {
            Name = "SubCRev",
            NativeName = "subrevc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Subtracts each element of an array of {0} from a constant value",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y[i] = a - x[i]",
            OpInPlace = "y[i] = a - y[i]",
        },
        new MethodDescriptor()
        {
            Name = "Mul",
            NativeName = "mul",
            Argument = ArgumentType.TwoVectors,
            Summary = "Multiplies the elements of two arrays of {0}",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y = a * b",
            OpInPlace = "y *= x",
        },
        new MethodDescriptor()
        {
            Name = "MulC",
            NativeName = "mulc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Multiplies each element of an array of {0} by a constant value",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y[i] = x[i] * a",
            OpInPlace = "y[i] *= a",
        },
        new MethodDescriptor()
        {
            Name = "Div",
            NativeName = "div",
            Argument = ArgumentType.TwoVectors,
            Summary = "Divides the elements of two arrays of {0}",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y = a / b",
            OpInPlace = "y /= x",
        },
        new MethodDescriptor()
        {
            Name = "DivC",
            NativeName = "divc",
            Argument = ArgumentType.ConstantAndVector,
            Summary = "Divides each element of an array of {0} by a constant value",
            HasInPlace = true,
            HasIncrement = true,
            Op = "y[i] = x[i] / a",
            OpInPlace = "y[i] /= a",
        },
    };
#>

namespace Genix.Core
{
    using System;
    using System.Diagnostics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;

    /// <content>
    /// Provides arithmetic operations on vectors.
    /// </content>
    [CLSCompliant(false)]
    public static partial class Mathematics
    {
<#
	Tuple<string, string>[] types = 
	{
		Tuple.Create("sbyte", "8-bit signed integers"),
		Tuple.Create("byte", "8-bit unsigned integers"),
		Tuple.Create("short", "16-bit signed integers"),
		Tuple.Create("ushort", "16-bit unsigned integers"),
		Tuple.Create("int", "32-bit signed integers"),
		Tuple.Create("uint", "32-bit unsigned integers"),
		Tuple.Create("long", "64-bit signed integers"),
		Tuple.Create("ulong", "64-bit unsigned integers"),
		Tuple.Create("float", "single-precision floating point numbers"),
		Tuple.Create("double", "double-precision floating point numbers"),
	};

    foreach (Tuple<string, string> type in types)
    {
        string typeName = type.Item1;
        string typeDescription = type.Item2;

        foreach (MethodDescriptor method in methods.Where(x => string.IsNullOrEmpty(x.SupportedTypes) || x.SupportedTypes.Split(new char[] {';'}).Contains(typeName)))
        {
            RenderMethod(method, typeName, typeDescription);
        } 
    }
#>

        [SuppressUnmanagedCodeSecurity]
        private static partial class NativeMethods
        {
<#
    foreach (Tuple<string, string> type in types)
    {
        string typeName = type.Item1;

        foreach (MethodDescriptor method in methods.Where(x => string.IsNullOrEmpty(x.SupportedTypes) || x.SupportedTypes.Split(new char[] {';'}).Contains(typeName)))
        {
            RenderNativeMethod(method, typeName);
        }
    }
#>
        }
    }
}
