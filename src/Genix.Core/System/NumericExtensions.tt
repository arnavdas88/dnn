// -----------------------------------------------------------------------
// <copyright file="NumericExtensions.tt" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System
{
    using System.Runtime.CompilerServices;
    using Genix.Win32;

    /// <summary>
    /// Provides extension methods for the numeric types.
    /// </summary>
    public static class NumericExtensions
    {
        /// <summary>
        /// Epsilon used in rounding operations.
        /// </summary>
        private const float Eps = 1e-8f;
<#
    foreach (string type in new string[] {"int", "float", "double"})
    {
#>
<# if (type == "int") { #>

        /// <summary>
        /// Multiplies two 32-bit integers and then divides the 64-bit result by a third 32-bit value.
        /// </summary>
        /// <param name="value">The multiplicand.</param>
        /// <param name="numerator">The multiplier.</param>
        /// <param name="denominator">The number by which the result of the multiplication operation is to be divided.</param>
        /// <returns>
        /// <para>
        /// If the function succeeds, the return value is the result of the multiplication and division, rounded to the nearest integer.
        /// If the result is a positive half integer (ends in .5), it is rounded up.
        /// If the result is a negative half integer, it is rounded down.
        /// </para>
        /// <para>
        /// If either an overflow occurred or <c>denominator</c> was 0, the return value is -1.
        /// </para>
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int MulDiv(this int value, int numerator, int denominator)
        {
            return Win32NativeMethods.MulDiv(value, numerator, denominator);
        }

        /// <summary>
        /// Rounds the value up to a next specified multiple.
        /// </summary>
        /// <param name="value">The value to round.</param>
        /// <param name="multiple">The multiple.</param>
        /// <returns>The rounded value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int RoundUp(this int value, int multiple)
        {
            return (value + multiple - 1) / multiple * multiple;
        }
<# } else { #>

        /// <summary>
        /// Rounds a floating-point value to the nearest integer.
        /// </summary>
        /// <param name="value">The value to round.</param>
        /// <returns>
        /// The integer nearest value.
        /// When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Round(this <#=type#> value)
        {
            return NumericExtensions.Round(value, MidpointRounding.AwayFromZero);
        }

        /// <summary>
        /// Rounds a floating-point value to the nearest integer.
        /// </summary>
        /// <param name="value">The value to round.</param>
        /// <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
        /// <returns>
        /// The integer nearest value.
        /// When a number is halfway between two others, then mode determines which of the two is returned.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Round(this <#=type#> value, MidpointRounding mode)
        {
            return (int)Math.Round(value<# if (type == "float") { #> + NumericExtensions.Eps<# } #>, mode);
        }
<# } #>

        /// <summary>
        /// Determines whether this instance falls within the range of specified single-precision floating point numbers.
        /// </summary>
        /// <param name="value">This instance value.</param>
        /// <param name="lowerBound">The lower inclusive bound of the range.</param>
        /// <param name="upperBound">The upper inclusive bound of the range.</param>
        /// <returns>
        /// <b>true</b> if this instance is greater than or equal to <paramref name="lowerBound"/> and less than or equal to <paramref name="upperBound"/>; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Between(this <#=type#> value, <#=type#> lowerBound, <#=type#> upperBound)
        {
            return value >= lowerBound && value <= upperBound;
        }

        /// <summary>
        /// Clips this instance to a specified minimum and maximum value.
        /// </summary>
        /// <param name="value">This instance value.</param>
        /// <param name="lowerBound">The lower inclusive bound of the range.</param>
        /// <param name="upperBound">The upper inclusive bound of the range.</param>
        /// <returns>
        /// A value that is greater than or equal to <paramref name="lowerBound"/> and less than or equal to <paramref name="upperBound"/>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#=type#> Clip(this <#=type#> value, <#=type#> lowerBound, <#=type#> upperBound)
        {
            if (value < lowerBound)
            {
                return lowerBound;
            }
            else if (value > upperBound)
            {
                return upperBound;
            }
            else
            {
                return value;
            }
        }

        /// <summary>
        /// Tests whether the two specified values are equal.
        /// </summary>
        /// <param name="value">This instance value to compare.</param>
        /// <param name="other">The second value to compare.</param>
        /// <param name="delta">The required accuracy.</param>
        /// <returns>
        /// <b>true</b> if two values are equal with the specified accuracy; otherwise, <b>false</b>.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool AreEqual(this <#=type#> value, <#=type#> other, <#=type#> delta)
        {
            <#=type#> diff = value - other;
            return diff >= -delta && diff <= delta;
        }
<# } #>
    }
}