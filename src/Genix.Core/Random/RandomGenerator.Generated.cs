//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 11/28/2018 12:26:50 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core
{
    using System;
    using System.Runtime.CompilerServices;

    /// <summary>
    /// Represents standard random numbers generator.
    /// </summary>
    public class RandomGeneratorF : RandomNumberGenerator<float>
    {
        private readonly Random random;

        /// <summary>
        /// Initializes a new instance of the <see cref="RandomGeneratorF"/> class.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RandomGeneratorF()
            : this(new Random(0))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RandomGeneratorF"/> class.
        /// </summary>
        /// <param name="random">The random number generator to use as a source of randomness.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="random"/> is <b>null</b>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RandomGeneratorF(Random random)
        {
            this.random = random ?? throw new ArgumentNullException(nameof(random));
        }

        /// <summary>
        /// Generates a random observation from the current distribution.
        /// </summary>
        /// <returns>
        /// A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override float Generate()
        {
            return (float)this.random.NextDouble();
        }

        /// <summary>
        /// Generates a random observation that is within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <returns>A random observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float Generate(float minValue, float maxValue)
        {
            return (this.Generate() * (maxValue - minValue)) + minValue;
        }

        /// <summary>
        /// Generates a random vector of observations that are within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <param name="samples">The number of samples to generate.</param>
        /// <returns>A random vector of observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float[] Generate(float minValue, float maxValue, int samples)
        {
            return this.Generate(minValue, maxValue, samples, null);
        }

        /// <summary>
        /// Generates a random vector of observations that are within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <param name="samples">The number of samples to generate.</param>
        /// <param name="result">The location where to store the samples.</param>
        /// <returns>A random vector of observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float[] Generate(float minValue, float maxValue, int samples, float[] result)
        {
            if (result == null)
            {
                result = new float[samples];
            }

            for (int i = 0; i < samples; i++)
            {
                result[i] = this.Generate(minValue, maxValue);
            }

            return result;
        }
    }

    /// <summary>
    /// Represents standard random numbers generator.
    /// </summary>
    public class RandomGeneratorD : RandomNumberGenerator<double>
    {
        private readonly Random random;

        /// <summary>
        /// Initializes a new instance of the <see cref="RandomGeneratorD"/> class.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RandomGeneratorD()
            : this(new Random(0))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RandomGeneratorD"/> class.
        /// </summary>
        /// <param name="random">The random number generator to use as a source of randomness.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="random"/> is <b>null</b>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RandomGeneratorD(Random random)
        {
            this.random = random ?? throw new ArgumentNullException(nameof(random));
        }

        /// <summary>
        /// Generates a random observation from the current distribution.
        /// </summary>
        /// <returns>
        /// A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override double Generate()
        {
            return (double)this.random.NextDouble();
        }

        /// <summary>
        /// Generates a random observation that is within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <returns>A random observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public double Generate(double minValue, double maxValue)
        {
            return (this.Generate() * (maxValue - minValue)) + minValue;
        }

        /// <summary>
        /// Generates a random vector of observations that are within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <param name="samples">The number of samples to generate.</param>
        /// <returns>A random vector of observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public double[] Generate(double minValue, double maxValue, int samples)
        {
            return this.Generate(minValue, maxValue, samples, null);
        }

        /// <summary>
        /// Generates a random vector of observations that are within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <param name="samples">The number of samples to generate.</param>
        /// <param name="result">The location where to store the samples.</param>
        /// <returns>A random vector of observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public double[] Generate(double minValue, double maxValue, int samples, double[] result)
        {
            if (result == null)
            {
                result = new double[samples];
            }

            for (int i = 0; i < samples; i++)
            {
                result[i] = this.Generate(minValue, maxValue);
            }

            return result;
        }
    }
}
