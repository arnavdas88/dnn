<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core
{
    using System;
    using System.Runtime.CompilerServices;
<#
    foreach (string type in "float;double".Split(';'))
    {
        string suffix = type.Substring(0, 1).ToUpperInvariant();
#>

    /// <summary>
    /// Represents standard random numbers generator.
    /// </summary>
    public class RandomGenerator<#=suffix#> : RandomNumberGenerator<<#=type#>>
    {
        private readonly Random random;

        /// <summary>
        /// Initializes a new instance of the <see cref="RandomGenerator<#=suffix#>"/> class.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RandomGenerator<#=suffix#>()
            : this(new Random(0))
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RandomGenerator<#=suffix#>"/> class.
        /// </summary>
        /// <param name="random">The random number generator to use as a source of randomness.</param>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="random"/> is <b>null</b>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public RandomGenerator<#=suffix#>(Random random)
        {
            this.random = random ?? throw new ArgumentNullException(nameof(random));
        }

        /// <summary>
        /// Generates a random observation from the current distribution.
        /// </summary>
        /// <returns>
        /// A single-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override <#=type#> Generate()
        {
            return (<#=type#>)this.random.NextDouble();
        }

        /// <summary>
        /// Generates a random observation that is within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <returns>A random observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=type#> Generate(<#=type#> minValue, <#=type#> maxValue)
        {
            return (this.Generate() * (maxValue - minValue)) + minValue;
        }

        /// <summary>
        /// Generates a random vector of observations that are within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <param name="samples">The number of samples to generate.</param>
        /// <returns>A random vector of observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=type#>[] Generate(<#=type#> minValue, <#=type#> maxValue, int samples)
        {
            return this.Generate(minValue, maxValue, samples, null);
        }

        /// <summary>
        /// Generates a random vector of observations that are within a specified range from the current distribution.
        /// </summary>
        /// <param name="minValue">The inclusive lower bound of the random number returned.</param>
        /// <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
        /// <param name="samples">The number of samples to generate.</param>
        /// <param name="result">The location where to store the samples.</param>
        /// <returns>A random vector of observations drawn from this distribution.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#=type#>[] Generate(<#=type#> minValue, <#=type#> maxValue, int samples, <#=type#>[] result)
        {
            if (result == null)
            {
                result = new <#=type#>[samples];
            }

            for (int i = 0; i < samples; i++)
            {
                result[i] = this.Generate(minValue, maxValue);
            }

            return result;
        }
    }
<#  } #>
}
