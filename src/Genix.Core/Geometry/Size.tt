// -----------------------------------------------------------------------
// <copyright file="Size.tt" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Geometry
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using Newtonsoft.Json;

<#
    Tuple<string, string>[] classes = 
    {
        Tuple.Create("int", ""),
        Tuple.Create("float", "F"),
        Tuple.Create("double", "D"),
    };

    foreach (Tuple<string, string> cls in classes)
    {
        string type = cls.Item1;
        string suffix = cls.Item2;
#>

    /// <summary>
    /// Represents a dimension in 2D coordinate space.
    /// </summary>
    [TypeConverter(typeof(Size<#=suffix#>Converter))]
    [JsonConverter(typeof(Size<#=suffix#>JsonConverter))]
    public struct Size<#=suffix#>
        : IEquatable<Size<#=suffix#>>
    {
        /// <summary>
        /// Represents a <see cref="Size<#=suffix#>"/> that has <see cref="Width"/> and <see cref="Height"/> values set to zero.
        /// </summary>
        public static readonly Size<#=suffix#> Empty;
<# if (type == "int") { #>

        /// <summary>
        /// Epsilon used in rounding operations.
        /// </summary>
        private const float Eps = 1e-8f;
<# } #>

        /// <summary>
        /// The horizontal dimension of this <see cref="Size<#=suffix#>"/>.
        /// </summary>
        private <#=type#> width;

        /// <summary>
        /// The vertical dimension of this <see cref="Size<#=suffix#>"/>.
        /// </summary>
        private <#=type#> height;

        /// <summary>
        /// Initializes a new instance of the <see cref="Size<#=suffix#>"/> struct with the specified dimensions.
        /// </summary>
        /// <param name="width">The horizontal dimension.</param>
        /// <param name="height">The vertical dimension.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="width"/> is a negative value.</para>
        /// <para>-or-</para>
        /// <para><paramref name="height"/> is a negative value.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Size<#=suffix#>(<#=type#> width, <#=type#> height)
        {
            this.width = width >= 0 ? width : throw new ArgumentOutOfRangeException(nameof(width), Core.Properties.Resources.E_InvalidSizeWidth);
            this.height = height >= 0 ? height : throw new ArgumentOutOfRangeException(nameof(height), Core.Properties.Resources.E_InvalidSizeHeight);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Size<#=suffix#>"/> struct from the <see cref="System.Drawing.Size"/>.
        /// </summary>
        /// <param name="size">The <see cref="System.Drawing.Size"/> that contains the dimensions.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><see cref="System.Drawing.Size.Width"/> is a negative value.</para>
        /// <para>-or-</para>
        /// <para><see cref="System.Drawing.Size.Height"/> is a negative value.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Size<#=suffix#>(System.Drawing.Size size)
        {
            this.width = size.Width >= 0 ? size.Width : throw new ArgumentOutOfRangeException(nameof(size), Core.Properties.Resources.E_InvalidSizeWidth);
            this.height = size.Height >= 0 ? size.Height : throw new ArgumentOutOfRangeException(nameof(size), Core.Properties.Resources.E_InvalidSizeHeight);
        }

        /// <summary>
        /// Gets or sets the horizontal dimension of this <see cref="Size<#=suffix#>"/>.
        /// </summary>
        /// <value>
        /// The horizontal dimension of this <see cref="Size<#=suffix#>"/>.
        /// </value>
        public <#=type#> Width
        {
            get => this.width;
            set => this.width = value;
        }

        /// <summary>
        /// Gets or sets the vertical dimension of this <see cref="Size<#=suffix#>"/>.
        /// </summary>
        /// <value>
        /// The vertical dimension of this <see cref="Size<#=suffix#>"/>.
        /// </value>
        public <#=type#> Height
        {
            get => this.height;
            set => this.height = value;
        }

        /// <summary>
        /// Gets a value indicating whether this <see cref="Size<#=suffix#>"/> is empty.
        /// </summary>
        /// <value>
        /// <b>true</b> if both <see cref="Width"/> and <see cref="Height"/> are 0; otherwise, <b>false</b>.
        /// </value>
        public bool IsEmpty => this.width == 0 && this.height == 0;

        /// <summary>
        /// Compares two <see cref="Size<#=suffix#>"/> objects.
        /// The result specifies whether the values of the <see cref="Width"/> and <see cref="Height"/> properties of the two <see cref="Size<#=suffix#>"/> objects are equal.
        /// </summary>
        /// <param name="left">The <see cref="Size<#=suffix#>"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="Size<#=suffix#>"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the <see cref="Width"/> and <see cref="Height"/> values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(Size<#=suffix#> left, Size<#=suffix#> right) => left.Equals(right);

        /// <summary>
        /// Compares two <see cref="Size<#=suffix#>"/> objects.
        /// The result specifies whether the values of the <see cref="Width"/> and <see cref="Height"/> properties of the two <see cref="Size<#=suffix#>"/> objects are unequal.
        /// </summary>
        /// <param name="left">The <see cref="Size<#=suffix#>"/> structure that is to the left of the equality operator.</param>
        /// <param name="right">The <see cref="Size<#=suffix#>"/> structure that is to the right of the equality operator.</param>
        /// <returns><b>true</b> if the values of either <see cref="Width"/> and <see cref="Height"/> properties of <paramref name="left"/> and <paramref name="right"/> are unequal; otherwise, <b>false</b>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(Size<#=suffix#> left, Size<#=suffix#> right) => !left.Equals(right);

        /// <summary>
        /// Initializes a new instance of the <see cref="Size<#=suffix#>"/> structure using the value represented by the specified string.
        /// </summary>
        /// <param name="value">A <see cref="string"/> that contains a <see cref="Size<#=suffix#>"/> in the following format:Width Height.</param>
        /// <returns>The <see cref="Size<#=suffix#>"/> this method creates.</returns>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="value"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="FormatException">
        /// <paramref name="value"/> does not consist of two values represented by a sequence of digits (0 through 9).
        /// </exception>
        public static Size<#=suffix#> Parse(string value)
        {
            if (value == null)
            {
                throw new ArgumentNullException(nameof(value));
            }

            string[] split = value.Split(' ');
            if (split?.Length == 2 &&
                <#=type#>.TryParse(split[0], out <#=type#> width) &&
                <#=type#>.TryParse(split[1], out <#=type#> height))
            {
                return new Size<#=suffix#>(width, height);
            }
            else
            {
                throw new ArgumentException(Core.Properties.Resources.E_InvalidSizeFormat, nameof(value));
            }
        }

        /// <summary>
        /// Performs vector addition of two <see cref="Size<#=suffix#>"/> structs.
        /// </summary>
        /// <param name="size1">The first <see cref="Size<#=suffix#>"/> to add.</param>
        /// <param name="size2">The second <see cref="Size<#=suffix#>"/> to add.</param>
        /// <returns>The <see cref="Size<#=suffix#>"/> that contains the result of addition.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Size<#=suffix#> Add(Size<#=suffix#> size1, Size<#=suffix#> size2) => new Size<#=suffix#>(size1.width + size2.width, size1.height + size2.height);

        /// <summary>
        /// Performs vector addition of two <see cref="Size<#=suffix#>"/> structs.
        /// </summary>
        /// <param name="size">The <see cref="Size<#=suffix#>"/> to expand.</param>
        /// <param name="dx">The horizontal dimension.</param>
        /// <param name="dy">The vertical dimension.</param>
        /// <returns>The expanded <see cref="Size<#=suffix#>"/>.</returns>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The result has a negative width.</para>
        /// <para>-or-</para>
        /// <para>The result has a negative height.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Size<#=suffix#> Add(Size<#=suffix#> size, <#=type#> dx, <#=type#> dy) => new Size<#=suffix#>(size.width + dx, size.height + dy);

        /// <summary>
        /// Contracts a <see cref="Size<#=suffix#>"/> by another <see cref="Size<#=suffix#>"/>.
        /// </summary>
        /// <param name="size1">The <see cref="Size<#=suffix#>"/> to subtract from.</param>
        /// <param name="size2">The <see cref="Size<#=suffix#>"/> to subtract.</param>
        /// <returns>The contracted <see cref="Size<#=suffix#>"/>.</returns>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The result has a negative width.</para>
        /// <para>-or-</para>
        /// <para>The result has a negative height.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Size<#=suffix#> Subtract(Size<#=suffix#> size1, Size<#=suffix#> size2) => new Size<#=suffix#>(size1.width - size2.width, size1.height - size2.height);

        /// <summary>
        /// Scales the specified <see cref="Size<#=suffix#>"/> location.
        /// </summary>
        /// <param name="size">The <see cref="Size<#=suffix#>"/> to scale.</param>
        /// <param name="dx">The horizontal scaling factor.</param>
        /// <param name="dy">The vertical scaling factor.</param>
        /// <returns>The scaled <see cref="Size<#=suffix#>"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Size<#=suffix#> Scale(Size<#=suffix#> size, <#=type#> dx, <#=type#> dy) => new Size<#=suffix#>(size.width * dx, size.height * dy);
<# if (type == "int") { #>

        /// <summary>
        /// Scales the specified <see cref="Size<#=suffix#>"/> location.
        /// </summary>
        /// <param name="size">The <see cref="Size<#=suffix#>"/> to scale.</param>
        /// <param name="dx">The horizontal scaling factor.</param>
        /// <param name="dy">The vertical scaling factor.</param>
        /// <returns>The scaled <see cref="Size<#=suffix#>"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Size<#=suffix#> Scale(Size<#=suffix#> size, float dx, float dy)
        {
            return new Size<#=suffix#>((dx * size.width).Round(), (dy * size.height).Round());
        }
<# } #>

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Size<#=suffix#> other) => other.width == this.width && other.height == this.height;

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if (!(obj is Size<#=suffix#>))
            {
                return false;
            }

            return this.Equals((Size<#=suffix#>)obj);
        }

        /// <inheritdoc />
        public override int GetHashCode() => unchecked((int)this.width ^ (int)this.height);

        /// <inheritdoc />
        public override string ToString() =>
            this.width.ToString(CultureInfo.CurrentCulture) + " " + this.height.ToString(CultureInfo.CurrentCulture);

        /// <summary>
        /// Sets <see cref="Width"/> and <see cref="Height"/> values set to zero.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear() => this.width = this.height = 0;

        /// <summary>
        /// Sets this <see cref="Size<#=suffix#>"/> position.
        /// </summary>
        /// <param name="width">The horizontal dimension.</param>
        /// <param name="height">The vertical dimension.</param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para><paramref name="width"/> is a negative value.</para>
        /// <para>-or-</para>
        /// <para><paramref name="height"/> is a negative value.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Set(<#=type#> width, <#=type#> height)
        {
            this.width = width >= 0 ? width : throw new ArgumentOutOfRangeException(nameof(width), Core.Properties.Resources.E_InvalidSizeWidth);
            this.height = height >= 0 ? height : throw new ArgumentOutOfRangeException(nameof(height), Core.Properties.Resources.E_InvalidSizeHeight);
        }

        /// <summary>
        /// Scales this <see cref="Size<#=suffix#>"/> location.
        /// </summary>
        /// <param name="dx">The horizontal scaling factor.</param>
        /// <param name="dy">The vertical scaling factor.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Scale(<#=type#> dx, <#=type#> dy)
        {
            this.width *= dx;
            this.height *= dy;
        }
<# if (type == "int") { #>

        /// <summary>
        /// Scales this <see cref="Size<#=suffix#>"/> location.
        /// </summary>
        /// <param name="dx">The horizontal scaling factor.</param>
        /// <param name="dy">The vertical scaling factor.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Scale(float dx, float dy)
        {
            this.width = (dx * this.width).Round();
            this.height = (dy * this.height).Round();
        }
<# } #>
    }

    /// <summary>
    /// Provides a unified way of converting <see cref="Size<#=suffix#>"/> to <see cref="string"/>.
    /// </summary>
    internal class Size<#=suffix#>Converter : TypeConverter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Size<#=suffix#>Converter"/> class.
        /// </summary>
        public Size<#=suffix#>Converter()
        {
        }

        /// <inheritdoc />
        public override bool CanConvertTo(ITypeDescriptorContext context, Type destType) => destType == typeof(string);

        /// <inheritdoc />
        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destType)
        {
            if (destType == null)
            {
                throw new ArgumentNullException(nameof(destType));
            }

            if (destType != typeof(string))
            {
                throw new NotSupportedException(
                    string.Format(CultureInfo.InvariantCulture, Core.Properties.Resources.E_TypeConversionNotSupported, "Size<#=suffix#>Converter", destType.ToString()));
            }

            return ((Size<#=suffix#>)value).ToString();
        }

        /// <inheritdoc />
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type srcType) => srcType == typeof(string);

        /// <inheritdoc />
        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            if (value == null)
            {
                return Size<#=suffix#>.Empty;
            }

            if (value.GetType() != typeof(string))
            {
                throw new NotSupportedException(
                    string.Format(CultureInfo.InvariantCulture, Core.Properties.Resources.E_TypeConversionNotSupported, "Size<#=suffix#>Converter", value.GetType().ToString()));
            }

            return Size<#=suffix#>.Parse((string)value);
        }
    }

    /// <summary>
    /// Represents a Json.NET converter for <see cref="Size<#=suffix#>"/> struct.
    /// </summary>
    public class Size<#=suffix#>JsonConverter : JsonConverter
    {
        /// <inheritdoc />
        public override bool CanConvert(Type objectType) => true;

        /// <inheritdoc />
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value is Size<#=suffix#> size)
            {
                writer.WriteValue(size.ToString());
            }
            else
            {
                throw new JsonSerializationException(string.Format(
                    CultureInfo.InvariantCulture,
                    "Unexpected value when converting size. Expected Size<#=suffix#>, got {0}.",
                    value?.GetType()));
            }
        }

        /// <inheritdoc />
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null)
            {
                throw new JsonSerializationException("Cannot convert null value to Size<#=suffix#>.");
            }

            if (reader.TokenType != JsonToken.String)
            {
                throw new JsonSerializationException(string.Format(
                    CultureInfo.InvariantCulture,
                    "Unexpected token parsing size. Expected String, got {0}.",
                    reader.TokenType));
            }

            return Size<#=suffix#>.Parse(reader.Value.ToString());
        }
    }
<#
    }
#>
}