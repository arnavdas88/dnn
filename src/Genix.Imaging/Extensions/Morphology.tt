<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>

// -----------------------------------------------------------------------
// <copyright file="Morphology.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Imaging
{
    public partial class Image
    {
<#
    Tuple<string, string>[] sefuncs =
    {
        Tuple.Create("Dilate", "Dilates the <see cref=\"Image\"/> by using the specified structuring element."),
        Tuple.Create("Erode", "Erodes the <see cref=\"Image\"/> by using the specified structuring element."),
        Tuple.Create("MorphOpen", "Perform morphological opening operation on the <see cref=\"Image\"/> by using the specified structuring element."),
        Tuple.Create("MorphClose", "Perform morphological closing operation on the <see cref=\"Image\"/> by using the specified structuring element."),
    };

    foreach (Tuple<string, string> func in sefuncs)
    {
        string funcName = func.Item1;
        string summary = func.Item2;
#>

        /// <summary>
        /// <#=summary#>
        /// </summary>
        /// <param name="image">The <see cref="Image"/> to process.</param>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="<#=funcName#>(StructuringElement, int)"/>
        public static Image <#=funcName#>(Image image, StructuringElement kernel, int iterations)
        {
            Image dst = image.Copy();
            dst.<#=funcName#>(kernel, iterations);
            return dst;
        }
<#
    }

    Tuple<string, string>[] funcs =
    {
        Tuple.Create("Despeckle", "Removes small isolated pixels from the <see cref=\"Image\"/>."),
    };

    foreach (Tuple<string, string> func in funcs)
    {
        string funcName = func.Item1;
        string summary = func.Item2;
#>

        /// <summary>
        /// <#=summary#>
        /// </summary>
        /// <param name="image">The <see cref="Image"/> to process.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="<#=funcName#>()"/>
        public static Image <#=funcName#>(Image image)
        {
            Image dst = image.Copy();
            dst.<#=funcName#>();
            return dst;
        }
<#
    }
#>
	}
}