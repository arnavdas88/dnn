
// -----------------------------------------------------------------------
// <copyright file="Morphology.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 9/21/2018 5:37:55 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Imaging
{
    using System;

    public partial class Image
    {

        /// <summary>
        /// Dilates this <see cref="Image"/> by using the specified structuring element not-in-place.
        /// </summary>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <param name="borderType">The type of border.</param>
        /// <param name="borderValue">The value of border pixels when <paramref name="borderType"/> is <see cref="BorderType.BorderConst"/>.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="DilateIP(StructuringElement, int, BorderType, uint)"/>
        [CLSCompliant(false)]
        public Image Dilate(StructuringElement kernel, int iterations, BorderType borderType, uint borderValue)
        {
            Image dst = this.Copy();
            dst.DilateIP(kernel, iterations, borderType, borderValue);
            return dst;
        }

        /// <summary>
        /// Erodes this <see cref="Image"/> by using the specified structuring element not-in-place.
        /// </summary>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <param name="borderType">The type of border.</param>
        /// <param name="borderValue">The value of border pixels when <paramref name="borderType"/> is <see cref="BorderType.BorderConst"/>.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="ErodeIP(StructuringElement, int, BorderType, uint)"/>
        [CLSCompliant(false)]
        public Image Erode(StructuringElement kernel, int iterations, BorderType borderType, uint borderValue)
        {
            Image dst = this.Copy();
            dst.ErodeIP(kernel, iterations, borderType, borderValue);
            return dst;
        }

        /// <summary>
        /// Perform morphological opening operation on this <see cref="Image"/> by using the specified structuring element not-in-place.
        /// </summary>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <param name="borderType">The type of border.</param>
        /// <param name="borderValue">The value of border pixels when <paramref name="borderType"/> is <see cref="BorderType.BorderConst"/>.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="MorphOpenIP(StructuringElement, int, BorderType, uint)"/>
        [CLSCompliant(false)]
        public Image MorphOpen(StructuringElement kernel, int iterations, BorderType borderType, uint borderValue)
        {
            Image dst = this.Copy();
            dst.MorphOpenIP(kernel, iterations, borderType, borderValue);
            return dst;
        }

        /// <summary>
        /// Perform morphological closing operation on this <see cref="Image"/> by using the specified structuring element not-in-place.
        /// </summary>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <param name="borderType">The type of border.</param>
        /// <param name="borderValue">The value of border pixels when <paramref name="borderType"/> is <see cref="BorderType.BorderConst"/>.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="MorphCloseIP(StructuringElement, int, BorderType, uint)"/>
        [CLSCompliant(false)]
        public Image MorphClose(StructuringElement kernel, int iterations, BorderType borderType, uint borderValue)
        {
            Image dst = this.Copy();
            dst.MorphCloseIP(kernel, iterations, borderType, borderValue);
            return dst;
        }

        /// <summary>
        /// Removes small isolated pixels from this <see cref="Image"/> not-in-place.
        /// </summary>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="DespeckleIP()"/>
        public Image Despeckle()
        {
            Image dst = this.Copy();
            dst.DespeckleIP();
            return dst;
        }
	}
}