
// -----------------------------------------------------------------------
// <copyright file="Morphology.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 9/13/2018 8:49:42 AM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Imaging
{
    public partial class Image
    {

        /// <summary>
        /// Dilates the <see cref="Image"/> by using the specified structuring element.
        /// </summary>
        /// <param name="image">The <see cref="Image"/> to process.</param>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="Dilate(StructuringElement, int)"/>
        public static Image Dilate(Image image, StructuringElement kernel, int iterations)
        {
            Image dst = image.Copy();
            dst.Dilate(kernel, iterations);
            return dst;
        }

        /// <summary>
        /// Erodes the <see cref="Image"/> by using the specified structuring element.
        /// </summary>
        /// <param name="image">The <see cref="Image"/> to process.</param>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="Erode(StructuringElement, int)"/>
        public static Image Erode(Image image, StructuringElement kernel, int iterations)
        {
            Image dst = image.Copy();
            dst.Erode(kernel, iterations);
            return dst;
        }

        /// <summary>
        /// Perform morphological opening operation on the <see cref="Image"/> by using the specified structuring element.
        /// </summary>
        /// <param name="image">The <see cref="Image"/> to process.</param>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="MorphOpen(StructuringElement, int)"/>
        public static Image MorphOpen(Image image, StructuringElement kernel, int iterations)
        {
            Image dst = image.Copy();
            dst.MorphOpen(kernel, iterations);
            return dst;
        }

        /// <summary>
        /// Perform morphological closing operation on the <see cref="Image"/> by using the specified structuring element.
        /// </summary>
        /// <param name="image">The <see cref="Image"/> to process.</param>
        /// <param name="kernel">The structuring element used in this operation.</param>
        /// <param name="iterations">The number of times the operation is applied.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="MorphClose(StructuringElement, int)"/>
        public static Image MorphClose(Image image, StructuringElement kernel, int iterations)
        {
            Image dst = image.Copy();
            dst.MorphClose(kernel, iterations);
            return dst;
        }

        /// <summary>
        /// Removes small isolated pixels from the <see cref="Image"/>.
        /// </summary>
        /// <param name="image">The <see cref="Image"/> to process.</param>
        /// <returns>
        /// The new <see cref="Image"/>.
        /// </returns>
        /// <seealso cref="Despeckle()"/>
        public static Image Despeckle(Image image)
        {
            Image dst = image.Copy();
            dst.Despeckle();
            return dst;
        }
	}
}