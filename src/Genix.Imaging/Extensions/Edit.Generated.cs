
// -----------------------------------------------------------------------
// <copyright file="Edit.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 9/11/2018 6:41:43 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Imaging
{
    using System;
    using System.Runtime.CompilerServices;
    using Genix.Core;
    using Genix.Drawing;

    public partial class Image
    {

        /// <summary>
        /// Sets all image pixels to maximum value (2^bpp - 1).
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels set to maximum value (2^bpp - 1).
        /// </returns>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <seealso cref="SetToMax()"/>
        public static Image SetToMax(Image image)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            Image dst = image.Clone(false);
            Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);

            return dst;
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1).
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels in the specified rectangular area set to maximum value (2^bpp - 1).
        /// </returns>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetToMax(int, int, int, int)"/>
        public static Image SetToMax(Image image, int x, int y, int width, int height)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            if (x == 0 && y == 0 && width == image.Width && height == image.Height)
            {
                return Image.SetToMax(image);
            }
            else
            {
                Image dst = image.Copy();
                dst.SetToMax(x, y, width, height);
                return dst;
            }
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1).
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels in the specified rectangular area set to maximum value (2^bpp - 1).
        /// </returns>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetToMax(Rectangle)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Image SetToMax(Image image, Rectangle rect) => Image.SetToMax(image, rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to maximum value (2^bpp - 1).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToMax() =>
            Vectors.Set(this.Bits.Length, ulong.MaxValue, this.Bits, 0);

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1).
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        public void SetToMax(int x, int y, int width, int height)
        {
            if (x == 0 && y == 0 && width == this.Width && height == this.Height)
            {
                this.SetToMax();
            }
            else
            {
                this.ValidateArea(x, y, width, height);
                int stride1 = this.Stride1;
                int count = width * this.BitsPerPixel;
                ulong[] bits = this.Bits;

                for (int i = 0, off = (y * stride1) + (x * this.BitsPerPixel); i < height; i++, off += stride1)
                {
                    BitUtils.SetBits(count, bits, off);
                }
            }
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1).
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToMax(Rectangle rect) => this.SetToMax(rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to minimum value (zero).
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels set to minimum value (zero).
        /// </returns>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <seealso cref="SetToMin()"/>
        public static Image SetToMin(Image image)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            Image dst = image.Clone(false);

            return dst;
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to minimum value (zero).
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels in the specified rectangular area set to minimum value (zero).
        /// </returns>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetToMin(int, int, int, int)"/>
        public static Image SetToMin(Image image, int x, int y, int width, int height)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            if (x == 0 && y == 0 && width == image.Width && height == image.Height)
            {
                return Image.SetToMin(image);
            }
            else
            {
                Image dst = image.Copy();
                dst.SetToMin(x, y, width, height);
                return dst;
            }
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to minimum value (zero).
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels in the specified rectangular area set to minimum value (zero).
        /// </returns>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetToMin(Rectangle)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Image SetToMin(Image image, Rectangle rect) => Image.SetToMin(image, rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to minimum value (zero).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToMin() =>
            Vectors.Set(this.Bits.Length, 0ul, this.Bits, 0);

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to minimum value (zero).
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        public void SetToMin(int x, int y, int width, int height)
        {
            if (x == 0 && y == 0 && width == this.Width && height == this.Height)
            {
                this.SetToMin();
            }
            else
            {
                this.ValidateArea(x, y, width, height);
                int stride1 = this.Stride1;
                int count = width * this.BitsPerPixel;
                ulong[] bits = this.Bits;

                for (int i = 0, off = (y * stride1) + (x * this.BitsPerPixel); i < height; i++, off += stride1)
                {
                    BitUtils.ResetBits(count, bits, off);
                }
            }
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to minimum value (zero).
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToMin(Rectangle rect) => this.SetToMin(rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to white color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels set to white color.
        /// </returns>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <seealso cref="SetWhite()"/>
        public static Image SetWhite(Image image)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            Image dst = image.Clone(false);
            if (dst.BitsPerPixel != 1)
            {
                Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);
            }

            return dst;
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to white color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels in the specified rectangular area set to white color.
        /// </returns>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetWhite(int, int, int, int)"/>
        public static Image SetWhite(Image image, int x, int y, int width, int height)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            if (x == 0 && y == 0 && width == image.Width && height == image.Height)
            {
                return Image.SetWhite(image);
            }
            else
            {
                Image dst = image.Copy();
                dst.SetWhite(x, y, width, height);
                return dst;
            }
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to white color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels in the specified rectangular area set to white color.
        /// </returns>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetWhite(Rectangle)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Image SetWhite(Image image, Rectangle rect) => Image.SetWhite(image, rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to white color.
        /// </summary>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetWhite() =>
           Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? 0ul : ulong.MaxValue, this.Bits, 0);

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to white color.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        public void SetWhite(int x, int y, int width, int height)
        {
            if (x == 0 && y == 0 && width == this.Width && height == this.Height)
            {
                this.SetWhite();
            }
            else
            {
                this.ValidateArea(x, y, width, height);
                int stride1 = this.Stride1;
                int count = width * this.BitsPerPixel;
                ulong[] bits = this.Bits;

                for (int i = 0, off = (y * stride1) + (x * this.BitsPerPixel); i < height; i++, off += stride1)
                {
                    if (this.BitsPerPixel == 1)
                    {
                        BitUtils.ResetBits(count, bits, off);
                    }
                    else
                    {
                        BitUtils.SetBits(count, bits, off);
                    }
                }
            }
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to white color.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetWhite(Rectangle rect) => this.SetWhite(rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to black color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels set to black color.
        /// </returns>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <seealso cref="SetBlack()"/>
        public static Image SetBlack(Image image)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            Image dst = image.Clone(false);
            if (dst.BitsPerPixel == 1)
            {
                Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);
            }

            return dst;
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to black color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels in the specified rectangular area set to black color.
        /// </returns>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetBlack(int, int, int, int)"/>
        public static Image SetBlack(Image image, int x, int y, int width, int height)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            if (x == 0 && y == 0 && width == image.Width && height == image.Height)
            {
                return Image.SetBlack(image);
            }
            else
            {
                Image dst = image.Copy();
                dst.SetBlack(x, y, width, height);
                return dst;
            }
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to black color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels in the specified rectangular area set to black color.
        /// </returns>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetBlack(Rectangle)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Image SetBlack(Image image, Rectangle rect) => Image.SetBlack(image, rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to black color.
        /// </summary>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetBlack() =>
           Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? ulong.MaxValue : 0ul, this.Bits, 0);

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to black color.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        public void SetBlack(int x, int y, int width, int height)
        {
            if (x == 0 && y == 0 && width == this.Width && height == this.Height)
            {
                this.SetBlack();
            }
            else
            {
                this.ValidateArea(x, y, width, height);
                int stride1 = this.Stride1;
                int count = width * this.BitsPerPixel;
                ulong[] bits = this.Bits;

                for (int i = 0, off = (y * stride1) + (x * this.BitsPerPixel); i < height; i++, off += stride1)
                {
                    if (this.BitsPerPixel == 1)
                    {
                        BitUtils.SetBits(count, bits, off);
                    }
                    else
                    {
                        BitUtils.ResetBits(count, bits, off);
                    }
                }
            }
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to black color.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetBlack(Rectangle rect) => this.SetBlack(rect.X, rect.Y, rect.Width, rect.Height);


        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to white color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels outside the specified rectangular area set to white color.
        /// </returns>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetWhiteBorder(int, int, int, int)"/>
        public static Image SetWhiteBorder(Image image, int x, int y, int width, int height)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            image.ValidateArea(x, y, width, height);

            Image dst = image.Clone(false);
            Image.CopyArea(image, x, y, width, height, dst, x, y);

            if (image.BitsPerPixel > 1)
            {
                dst.SetWhiteBorder(x, y, width, height);
            }

            return dst;
        }

        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to white color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels outside the specified rectangular area set to white color.
        /// </returns>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetWhiteBorder(Rectangle)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Image SetWhiteBorder(Image image, Rectangle rect) => Image.SetWhiteBorder(image, rect.X, rect.Y, rect.Width, rect.Height);


        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to white color.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        public void SetWhiteBorder(int x, int y, int width, int height)
        {
            this.ValidateArea(x, y, width, height);

            ulong[] bits = this.Bits;
            int stride1 = this.Stride1;
            ulong color = this.BitsPerPixel == 1 ? 0ul : ulong.MaxValue;

            // set top
            if (y > 0)
            {
                Vectors.Set(y * this.Stride, color, bits, 0);
            }

            // set left
            if (x > 0)
            {
                SetVerticalBits(x * this.BitsPerPixel, 0);
            }

            // set right
            if (x + width < this.Width)
            {
                SetVerticalBits((this.Width - (x + width)) * this.BitsPerPixel, (x + width) * this.BitsPerPixel);
            }

            // set bottom
            if (y + height < this.Height)
            {
                Vectors.Set((this.Height - (y + height)) * this.Stride, color, bits, (y + height) * this.Stride);
            }

            void SetVerticalBits(int count, int pos)
            {
                pos += y * stride1;
                if (this.BitsPerPixel == 1)
                {
                    for (int i = 0; i < height; i++, pos += stride1)
                    {
                        BitUtils.ResetBits(count, bits, pos);
                    }
                }
                else
                {
                    for (int i = 0; i < height; i++, pos += stride1)
                    {
                        BitUtils.SetBits(count, bits, pos);
                    }
                }
            }
        }

        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to white color.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetWhiteBorder(Rectangle rect) => this.SetWhiteBorder(rect.X, rect.Y, rect.Width, rect.Height);


        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to black color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels outside the specified rectangular area set to black color.
        /// </returns>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetBlackBorder(int, int, int, int)"/>
        public static Image SetBlackBorder(Image image, int x, int y, int width, int height)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            image.ValidateArea(x, y, width, height);

            Image dst = image.Clone(false);
            Image.CopyArea(image, x, y, width, height, dst, x, y);

            if (image.BitsPerPixel == 1)
            {
                dst.SetBlackBorder(x, y, width, height);
            }

            return dst;
        }

        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to black color.
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <returns>
        /// A new <see cref="Image"/> that has all its pixels outside the specified rectangular area set to black color.
        /// </returns>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="SetBlackBorder(Rectangle)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Image SetBlackBorder(Image image, Rectangle rect) => Image.SetBlackBorder(image, rect.X, rect.Y, rect.Width, rect.Height);


        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to black color.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        public void SetBlackBorder(int x, int y, int width, int height)
        {
            this.ValidateArea(x, y, width, height);

            ulong[] bits = this.Bits;
            int stride1 = this.Stride1;
            ulong color = this.BitsPerPixel == 1 ? ulong.MaxValue : 0ul;

            // set top
            if (y > 0)
            {
                Vectors.Set(y * this.Stride, color, bits, 0);
            }

            // set left
            if (x > 0)
            {
                SetVerticalBits(x * this.BitsPerPixel, 0);
            }

            // set right
            if (x + width < this.Width)
            {
                SetVerticalBits((this.Width - (x + width)) * this.BitsPerPixel, (x + width) * this.BitsPerPixel);
            }

            // set bottom
            if (y + height < this.Height)
            {
                Vectors.Set((this.Height - (y + height)) * this.Stride, color, bits, (y + height) * this.Stride);
            }

            void SetVerticalBits(int count, int pos)
            {
                pos += y * stride1;
                if (this.BitsPerPixel == 1)
                {
                    for (int i = 0; i < height; i++, pos += stride1)
                    {
                        BitUtils.SetBits(count, bits, pos);
                    }
                }
                else
                {
                    for (int i = 0; i < height; i++, pos += stride1)
                    {
                        BitUtils.ResetBits(count, bits, pos);
                    }
                }
            }
        }

        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to black color.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetBlackBorder(Rectangle rect) => this.SetBlackBorder(rect.X, rect.Y, rect.Width, rect.Height);
	}
}