
// -----------------------------------------------------------------------
// <copyright file="Edit.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 10/2/2018 6:19:30 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Imaging
{
    using System;
    using System.Runtime.CompilerServices;
    using Genix.Core;
    using Genix.Drawing;

    public partial class Image
    {

        /// <summary>
        /// Sets all image pixels to maximum value (2^bpp - 1).
        /// </summary>
        /// <remarks>
        /// For binary images, the resulting image is black; otherwise, it is white.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToOne()
        {
            Vectors.Set(this.Bits.Length, ulong.MaxValue, this.Bits, 0);
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1).
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the resulting image is black; otherwise, it is white.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToOne(int x, int y, int width, int height)
        {
            this.SetColor(x, y, width, height, uint.MaxValue);
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1).
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the resulting image is black; otherwise, it is white.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToOne(Rectangle rect) => this.SetToOne(rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to minimum value (zero).
        /// </summary>
        /// <remarks>
        /// For binary images, the resulting image is white; otherwise, it is black.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToZero()
        {
            Vectors.Set(this.Bits.Length, 0, this.Bits, 0);
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to minimum value (zero).
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the resulting image is white; otherwise, it is black.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToZero(int x, int y, int width, int height)
        {
            this.SetColor(x, y, width, height, 0);
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to minimum value (zero).
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the resulting image is white; otherwise, it is black.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetToZero(Rectangle rect) => this.SetToZero(rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to white color.
        /// </summary>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetWhite()
        {
            Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? 0 : ulong.MaxValue, this.Bits, 0);
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to white color.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetWhite(int x, int y, int width, int height)
        {
            this.SetColor(x, y, width, height, this.WhiteColor);
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to white color.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetWhite(Rectangle rect) => this.SetWhite(rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels to black color.
        /// </summary>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetBlack()
        {
            Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? ulong.MaxValue : 0, this.Bits, 0);
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to black color.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetBlack(int x, int y, int width, int height)
        {
            this.SetColor(x, y, width, height, this.BlackColor);
        }

        /// <summary>
        /// Sets all image pixels in the specified rectangular area to black color.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetBlack(Rectangle rect) => this.SetBlack(rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to white color.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetWhiteBorder(int x, int y, int width, int height)
        {
            this.SetBorder(x, y, width, height, BorderType.BorderConst, this.WhiteColor);
        }

        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to white color.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetWhiteBorder(Rectangle rect) => this.SetWhiteBorder(rect.X, rect.Y, rect.Width, rect.Height);

        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to black color.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetBlackBorder(int x, int y, int width, int height)
        {
            this.SetBorder(x, y, width, height, BorderType.BorderConst, this.BlackColor);
        }

        /// <summary>
        /// Sets all image pixels outside the specified rectangular area to black color.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// For binary images, the black color is 1; otherwise, the black color is 0.
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetBlackBorder(Rectangle rect) => this.SetBlackBorder(rect.X, rect.Y, rect.Width, rect.Height);
    }
}

