<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>

// -----------------------------------------------------------------------
// <copyright file="Edit.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

<#
    MethodDescriptor[] methods = new MethodDescriptor[]
    {
        new MethodDescriptor()
        {
            Name = "SetToOne",
            Summary = "Sets all image pixels to maximum value (2^bpp - 1).",
            SummaryArea = "Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1).",
            Remarks = "For binary images, the resulting image is black; otherwise, it is white.",
        },
        new MethodDescriptor()
        {
            Name = "SetToZero",
            Summary = "Sets all image pixels to minimum value (zero).",
            SummaryArea = "Sets all image pixels in the specified rectangular area to minimum value (zero).",
            Remarks = "For binary images, the resulting image is white; otherwise, it is black.",
        },
        new MethodDescriptor()
        {
            Name = "SetWhite",
            Summary = "Sets all image pixels to white color.",
            SummaryArea = "Sets all image pixels in the specified rectangular area to white color.",
            Remarks = "For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).",
        },
        new MethodDescriptor()
        {
            Name = "SetBlack",
            Summary = "Sets all image pixels to black color.",
            SummaryArea = "Sets all image pixels in the specified rectangular area to black color.",
            Remarks = "For binary images, the black color is 1; otherwise, the black color is 0.",
        },
        new MethodDescriptor()
        {
            Name = "SetWhiteBorder",
            SummaryArea = "Sets all image pixels outside the specified rectangular area to white color.",
            Remarks = "For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).",
        },
        new MethodDescriptor()
        {
            Name = "SetBlackBorder",
            SummaryArea = "Sets all image pixels outside the specified rectangular area to black color.",
            Remarks = "For binary images, the black color is 1; otherwise, the black color is 0.",
        },
    };
#>
namespace Genix.Imaging
{
    using System;
    using System.Runtime.CompilerServices;
    using Genix.Core;
    using Genix.Geometry;

    public partial class Image
    {
<#
    foreach (MethodDescriptor method in methods)
    {
#>
<#      if (!string.IsNullOrEmpty(method.Summary)) {#>

        /// <summary>
        /// <#=method.Summary#>
        /// </summary>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#=method.Name#>()
        {
<#    switch (method.Name) {
          case "SetToOne":#>
            Vectors.Set(this.Bits.Length, ulong.MaxValue, this.Bits, 0);
<#            break;
          case "SetToZero":#>
            Vectors.Set(this.Bits.Length, 0, this.Bits, 0);
<#            break;
          case "SetWhite":#>
            Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? 0 : ulong.MaxValue, this.Bits, 0);
<#            break;
          case "SetBlack":#>
            Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? ulong.MaxValue : 0, this.Bits, 0);
<#            break;
      }#>
        }
<#      }#>

        /// <summary>
        /// <#=method.SummaryArea#>
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#=method.Name#>(int x, int y, int width, int height)
        {
<#    switch (method.Name) {
          case "SetWhiteBorder":#>
            this.SetBorder(x, y, width, height, BorderType.BorderConst, this.WhiteColor);
<#            break;
          case "SetBlackBorder":#>
            this.SetBorder(x, y, width, height, BorderType.BorderConst, this.BlackColor);
<#            break;
          case "SetToOne":#>
            this.SetColor(x, y, width, height, uint.MaxValue);
<#            break;
          case "SetToZero":#>
            this.SetColor(x, y, width, height, 0);
<#            break;
          case "SetWhite":#>
            this.SetColor(x, y, width, height, this.WhiteColor);
<#            break;
          case "SetBlack":#>
            this.SetColor(x, y, width, height, this.BlackColor);
<#            break;
    }#>
        }

        /// <summary>
        /// <#=method.SummaryArea#>
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#=method.Name#>(Rectangle rect) => this.<#=method.Name#>(rect.X, rect.Y, rect.Width, rect.Height);
<#  }#>
    }
}

<#+
    class MethodDescriptor
    {
        public MethodDescriptor()
        {
            this.Remarks = string.Empty;
        }

        public string Name { get; set; }
        public string Summary { get; set; }
        public string SummaryArea { get; set; }
        public string Remarks { get; set; }
    }
#>
