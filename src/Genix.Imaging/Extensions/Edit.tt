<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>

// -----------------------------------------------------------------------
// <copyright file="Edit.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Imaging
{
    using System;
    using System.Runtime.CompilerServices;
    using Genix.Core;
    using Genix.Drawing;

    public partial class Image
    {
<#
    Tuple<string, string, string, string, string, string>[] funcs =
    {
        Tuple.Create(
            "SetToMax",
            "Sets all image pixels to maximum value (2^bpp - 1).",
            "A new <see cref=\"Image\"/> that has all its pixels set to maximum value (2^bpp - 1).",
            "Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1).",
            "A new <see cref=\"Image\"/> that has all its pixels in the specified rectangular area set to maximum value (2^bpp - 1).",
            string.Empty),
        Tuple.Create(
            "SetToMin",
            "Sets all image pixels to minimum value (zero).",
            "A new <see cref=\"Image\"/> that has all its pixels set to minimum value (zero).",
            "Sets all image pixels in the specified rectangular area to minimum value (zero).",
            "A new <see cref=\"Image\"/> that has all its pixels in the specified rectangular area set to minimum value (zero).",
            string.Empty),
        Tuple.Create(
            "SetWhite",
            "Sets all image pixels to white color.",
            "A new <see cref=\"Image\"/> that has all its pixels set to white color.",
            "Sets all image pixels in the specified rectangular area to white color.",
            "A new <see cref=\"Image\"/> that has all its pixels in the specified rectangular area set to white color.",
            "For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1)."),
        Tuple.Create(
            "SetBlack",
            "Sets all image pixels to black color.",
            "A new <see cref=\"Image\"/> that has all its pixels set to black color.",
            "Sets all image pixels in the specified rectangular area to black color.",
            "A new <see cref=\"Image\"/> that has all its pixels in the specified rectangular area set to black color.",
            "For binary images, the black color is 1; otherwise, the black color is 0."),
        Tuple.Create(
            "SetWhiteBorder",
            string.Empty,
            string.Empty,
            "Sets all image pixels outside the specified rectangular area to white color.",
            "A new <see cref=\"Image\"/> that has all its pixels outside the specified rectangular area set to white color.",
            "For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1)."),
        Tuple.Create(
            "SetBlackBorder",
            string.Empty,
            string.Empty,
            "Sets all image pixels outside the specified rectangular area to black color.",
            "A new <see cref=\"Image\"/> that has all its pixels outside the specified rectangular area set to black color.",
            "For binary images, the black color is 1; otherwise, the black color is 0."),
    };

    foreach (Tuple<string, string, string, string, string, string> func in funcs)
    {
        string funcName = func.Item1;
        string summary = func.Item2;
        string retValue = func.Item3;
        string summaryArea = func.Item4;
        string retValueArea = func.Item5;
        string remarks = func.Item6;
#>

<#      if (!string.IsNullOrEmpty(summary)) {#>
        /// <summary>
        /// <#=summary#>
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <returns>
        /// <#=retValue#>
        /// </returns>
        /// <remarks>
        /// <#=remarks#>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <seealso cref="<#=funcName#>()"/>
        public static Image <#=funcName#>(Image image)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            Image dst = image.Clone(false);
<#    switch (funcName) {
          case "SetToMax":
#>
            Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);
<#
            break;
          case "SetWhite":
#>
            if (dst.BitsPerPixel != 1)
            {
                Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);
            }
<#
            break;
          case "SetBlack":
#>
            if (dst.BitsPerPixel == 1)
            {
                Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);
            }
<#
            break;
    }
#>

            return dst;
        }
<#      }#>

        /// <summary>
        /// <#=summaryArea#>
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <returns>
        /// <#=retValueArea#>
        /// </returns>
        /// <remarks>
        /// <#=remarks#>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="<#=funcName#>(int, int, int, int)"/>
        public static Image <#=funcName#>(Image image, int x, int y, int width, int height)
        {
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

<#    switch (funcName) {
          case "SetWhiteBorder":
#>
            image.ValidateArea(x, y, width, height);

            Image dst = image.Clone(false);
            Image.CopyArea(image, x, y, width, height, dst, x, y);

            if (image.BitsPerPixel > 1)
            {
                dst.SetWhiteBorder(x, y, width, height);
            }

            return dst;
<#
            break;
          case "SetBlackBorder":
#>
            image.ValidateArea(x, y, width, height);

            Image dst = image.Clone(false);
            Image.CopyArea(image, x, y, width, height, dst, x, y);

            if (image.BitsPerPixel == 1)
            {
                dst.SetBlackBorder(x, y, width, height);
            }

            return dst;
<#
            break;
          default:
#>
            if (x == 0 && y == 0 && width == image.Width && height == image.Height)
            {
                return Image.<#=funcName#>(image);
            }
            else
            {
                Image dst = image.Copy();
                dst.<#=funcName#>(x, y, width, height);
                return dst;
            }
<#
            break;
    }
#>
        }

        /// <summary>
        /// <#=summaryArea#>
        /// </summary>
        /// <param name="image">The source <see cref="Image"/>.</param>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <returns>
        /// <#=retValueArea#>
        /// </returns>
        /// <remarks>
        /// <#=remarks#>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <paramref name="image"/> is <b>null</b>.
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of <paramref name="image"/> bounds.
        /// </exception>
        /// <seealso cref="<#=funcName#>(Rectangle)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Image <#=funcName#>(Image image, Rectangle rect) => Image.<#=funcName#>(image, rect.X, rect.Y, rect.Width, rect.Height);

<#      if (!string.IsNullOrEmpty(summary)) {#>
        /// <summary>
        /// <#=summary#>
        /// </summary>
        /// <remarks>
        /// <#=remarks#>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#=funcName#>() =>
<#    switch (funcName) {
          case "SetToMax":
#>
            Vectors.Set(this.Bits.Length, ulong.MaxValue, this.Bits, 0);
<#
            break;
          case "SetToMin":
#>
            Vectors.Set(this.Bits.Length, 0ul, this.Bits, 0);
<#
            break;
          case "SetWhite":
#>
           Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? 0ul : ulong.MaxValue, this.Bits, 0);
<#
            break;
          case "SetBlack":
#>
           Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? ulong.MaxValue : 0ul, this.Bits, 0);
<#
            break;
    }
#>
<#      }#>

        /// <summary>
        /// <#=summaryArea#>
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// <#=remarks#>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        public void <#=funcName#>(int x, int y, int width, int height)
        {
<#        if (funcName == "SetWhiteBorder" || funcName == "SetBlackBorder") {#>
            this.ValidateArea(x, y, width, height);

            ulong[] bits = this.Bits;
            int stride1 = this.Stride1;
<#        if (funcName == "SetWhiteBorder") {#>
            ulong color = this.BitsPerPixel == 1 ? 0ul : ulong.MaxValue;
<#        } else {#>
            ulong color = this.BitsPerPixel == 1 ? ulong.MaxValue : 0ul;
<#        }#>

            // set top
            if (y > 0)
            {
                Vectors.Set(y * this.Stride, color, bits, 0);
            }

            // set left
            if (x > 0)
            {
                SetVerticalBits(x * this.BitsPerPixel, 0);
            }

            // set right
            if (x + width < this.Width)
            {
                SetVerticalBits((this.Width - (x + width)) * this.BitsPerPixel, (x + width) * this.BitsPerPixel);
            }

            // set bottom
            if (y + height < this.Height)
            {
                Vectors.Set((this.Height - (y + height)) * this.Stride, color, bits, (y + height) * this.Stride);
            }

            void SetVerticalBits(int count, int pos)
            {
                pos += y * stride1;
                if (this.BitsPerPixel == 1)
                {
                    for (int i = 0; i < height; i++, pos += stride1)
                    {
<#        if (funcName == "SetWhiteBorder") {#>
                        BitUtils.ResetBits(count, bits, pos);
<#        } else {#>
                        BitUtils.SetBits(count, bits, pos);
<#        }#>
                    }
                }
                else
                {
                    for (int i = 0; i < height; i++, pos += stride1)
                    {
<#        if (funcName == "SetWhiteBorder") {#>
                        BitUtils.SetBits(count, bits, pos);
<#        } else {#>
                        BitUtils.ResetBits(count, bits, pos);
<#        }#>
                    }
                }
            }
<#        } else {#>
            if (x == 0 && y == 0 && width == this.Width && height == this.Height)
            {
                this.<#=funcName#>();
            }
            else
            {
                this.ValidateArea(x, y, width, height);
                int stride1 = this.Stride1;
                int count = width * this.BitsPerPixel;
                ulong[] bits = this.Bits;

                for (int i = 0, off = (y * stride1) + (x * this.BitsPerPixel); i < height; i++, off += stride1)
                {
<#            switch (funcName) {
                case "SetToMax":
#>
                    BitUtils.SetBits(count, bits, off);
<#
                    break;
                case "SetToMin":
#>
                    BitUtils.ResetBits(count, bits, off);
<#
                    break;
                case "SetWhite":
#>
                    if (this.BitsPerPixel == 1)
                    {
                        BitUtils.ResetBits(count, bits, off);
                    }
                    else
                    {
                        BitUtils.SetBits(count, bits, off);
                    }
<#
                    break;
                case "SetBlack":
#>
                    if (this.BitsPerPixel == 1)
                    {
                        BitUtils.SetBits(count, bits, off);
                    }
                    else
                    {
                        BitUtils.ResetBits(count, bits, off);
                    }
<#
                    break;
            }
#>
                }
            }
<#        }#>
        }

        /// <summary>
        /// <#=summaryArea#>
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// <#=remarks#>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#=funcName#>(Rectangle rect) => this.<#=funcName#>(rect.X, rect.Y, rect.Width, rect.Height);
<#
    }
#>
	}
}