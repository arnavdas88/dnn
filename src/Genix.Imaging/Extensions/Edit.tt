<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>

// -----------------------------------------------------------------------
// <copyright file="Edit.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

<#
    MethodDescriptor[] methods = new MethodDescriptor[]
    {
        new MethodDescriptor()
        {
            Name = "SetToMax",
            Summary = "Sets all image pixels to maximum value (2^bpp - 1)",
            Returns = "A new <see cref=\"Image\"/> that has all its pixels set to maximum value (2^bpp - 1).",
            SummaryArea = "Sets all image pixels in the specified rectangular area to maximum value (2^bpp - 1)",
            ReturnsArea = "A new <see cref=\"Image\"/> that has all its pixels in the specified rectangular area set to maximum value (2^bpp - 1).",
        },
        new MethodDescriptor()
        {
            Name = "SetToMin",
            Summary = "Sets all image pixels to minimum value (zero)",
            Returns = "A new <see cref=\"Image\"/> that has all its pixels set to minimum value (zero).",
            SummaryArea = "Sets all image pixels in the specified rectangular area to minimum value (zero)",
            ReturnsArea =  "A new <see cref=\"Image\"/> that has all its pixels in the specified rectangular area set to minimum value (zero).",
        },
        new MethodDescriptor()
        {
            Name = "SetWhite",
            Summary = "Sets all image pixels to white color",
            Returns = "A new <see cref=\"Image\"/> that has all its pixels set to white color.",
            SummaryArea = "Sets all image pixels in the specified rectangular area to white color",
            ReturnsArea = "A new <see cref=\"Image\"/> that has all its pixels in the specified rectangular area set to white color.",
            Remarks = "For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).",
        },
        new MethodDescriptor()
        {
            Name = "SetBlack",
            Summary = "Sets all image pixels to black color",
            Returns = "A new <see cref=\"Image\"/> that has all its pixels set to black color.",
            SummaryArea = "Sets all image pixels in the specified rectangular area to black color",
            ReturnsArea = "A new <see cref=\"Image\"/> that has all its pixels in the specified rectangular area set to black color.",
            Remarks = "For binary images, the black color is 1; otherwise, the black color is 0.",
        },
        new MethodDescriptor()
        {
            Name = "SetWhiteBorder",
            SummaryArea = "Sets all image pixels outside the specified rectangular area to white color",
            ReturnsArea = "A new <see cref=\"Image\"/> that has all its pixels outside the specified rectangular area set to white color.",
            Remarks = "For binary images, the white color is 0; otherwise, the white color is (2^bpp - 1).",
        },
        new MethodDescriptor()
        {
            Name = "SetBlackBorder",
            SummaryArea = "Sets all image pixels outside the specified rectangular area to black color",
            ReturnsArea = "A new <see cref=\"Image\"/> that has all its pixels outside the specified rectangular area set to black color.",
            Remarks = "For binary images, the black color is 1; otherwise, the black color is 0.",
        },
    };
#>
namespace Genix.Imaging
{
    using System;
    using System.Runtime.CompilerServices;
    using Genix.Core;
    using Genix.Drawing;

    public partial class Image
    {
<#
    foreach (MethodDescriptor method in methods)
    {
#>
<#      if (!string.IsNullOrEmpty(method.Summary)) {#>

        /// <summary>
        /// <#=method.Summary#> not-in-place.
        /// </summary>
        /// <returns>
        /// <#=method.Returns#>
        /// </returns>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        /// <seealso cref="<#=method.Name#>IP()"/>
        public Image <#=method.Name#>()
        {
            Image dst = this.Clone(false);
<#    switch (method.Name) {
          case "SetToMax":
#>
            Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);
<#
            break;
          case "SetWhite":
#>
            if (dst.BitsPerPixel != 1)
            {
                Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);
            }
<#
            break;
          case "SetBlack":
#>
            if (dst.BitsPerPixel == 1)
            {
                Vectors.Set(dst.Bits.Length, ulong.MaxValue, dst.Bits, 0);
            }
<#
            break;
    }
#>

            return dst;
        }
<#      }#>

        /// <summary>
        /// <#=method.SummaryArea#> not-in-place.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <returns>
        /// <#=method.ReturnsArea#>
        /// </returns>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of image bounds.
        /// </exception>
        /// <seealso cref="<#=method.Name#>IP(int, int, int, int)"/>
        public Image <#=method.Name#>(int x, int y, int width, int height)
        {
<#    switch (method.Name) {
          case "SetWhiteBorder":
#>
            this.ValidateArea(x, y, width, height);

            Image dst = this.Clone(false);
            Image.CopyArea(this, x, y, width, height, dst, x, y);

            if (this.BitsPerPixel > 1)
            {
                dst.SetWhiteBorderIP(x, y, width, height);
            }

            return dst;
<#
            break;
          case "SetBlackBorder":
#>
            this.ValidateArea(x, y, width, height);

            Image dst = this.Clone(false);
            Image.CopyArea(this, x, y, width, height, dst, x, y);

            if (this.BitsPerPixel == 1)
            {
                dst.SetBlackBorderIP(x, y, width, height);
            }

            return dst;
<#
            break;
          default:
#>
            if (x == 0 && y == 0 && width == this.Width && height == this.Height)
            {
                return this.<#=method.Name#>();
            }
            else
            {
                Image dst = this.Copy();
                dst.<#=method.Name#>IP(x, y, width, height);
                return dst;
            }
<#
            break;
    }
#>
        }

        /// <summary>
        /// <#=method.SummaryArea#> not-in-place.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <returns>
        /// <#=method.ReturnsArea#>
        /// </returns>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of image bounds.
        /// </exception>
        /// <seealso cref="<#=method.Name#>IP(Rectangle)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Image <#=method.Name#>(Rectangle rect) => this.<#=method.Name#>(rect.X, rect.Y, rect.Width, rect.Height);

<#      if (!string.IsNullOrEmpty(method.Summary)) {#>
        /// <summary>
        /// <#=method.Summary#> in-place.
        /// </summary>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#=method.Name#>IP() =>
<#    switch (method.Name) {
          case "SetToMax":
#>
            Vectors.Set(this.Bits.Length, ulong.MaxValue, this.Bits, 0);
<#
            break;
          case "SetToMin":
#>
            Vectors.Set(this.Bits.Length, 0ul, this.Bits, 0);
<#
            break;
          case "SetWhite":
#>
           Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? 0ul : ulong.MaxValue, this.Bits, 0);
<#
            break;
          case "SetBlack":
#>
           Vectors.Set(this.Bits.Length, this.BitsPerPixel == 1 ? ulong.MaxValue : 0ul, this.Bits, 0);
<#
            break;
    }
#>
<#      }#>

        /// <summary>
        /// <#=method.SummaryArea#> in-place.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        public void <#=method.Name#>IP(int x, int y, int width, int height)
        {
<#        if (method.Name == "SetWhiteBorder" || method.Name == "SetBlackBorder") {#>
            this.ValidateArea(x, y, width, height);

            ulong[] bits = this.Bits;
            int stride1 = this.Stride1;
<#        if (method.Name == "SetWhiteBorder") {#>
            ulong color = this.BitsPerPixel == 1 ? 0ul : ulong.MaxValue;
<#        } else {#>
            ulong color = this.BitsPerPixel == 1 ? ulong.MaxValue : 0ul;
<#        }#>

            // set top
            if (y > 0)
            {
                Vectors.Set(y * this.Stride, color, bits, 0);
            }

            // set left
            if (x > 0)
            {
                SetVerticalBits(x * this.BitsPerPixel, 0);
            }

            // set right
            if (x + width < this.Width)
            {
                SetVerticalBits((this.Width - (x + width)) * this.BitsPerPixel, (x + width) * this.BitsPerPixel);
            }

            // set bottom
            if (y + height < this.Height)
            {
                Vectors.Set((this.Height - (y + height)) * this.Stride, color, bits, (y + height) * this.Stride);
            }

            void SetVerticalBits(int count, int pos)
            {
                pos += y * stride1;
                if (this.BitsPerPixel == 1)
                {
                    for (int i = 0; i < height; i++, pos += stride1)
                    {
<#        if (method.Name == "SetWhiteBorder") {#>
                        BitUtils.ResetBits(count, bits, pos);
<#        } else {#>
                        BitUtils.SetBits(count, bits, pos);
<#        }#>
                    }
                }
                else
                {
                    for (int i = 0; i < height; i++, pos += stride1)
                    {
<#        if (method.Name == "SetWhiteBorder") {#>
                        BitUtils.SetBits(count, bits, pos);
<#        } else {#>
                        BitUtils.ResetBits(count, bits, pos);
<#        }#>
                    }
                }
            }
<#        } else {#>
            if (x == 0 && y == 0 && width == this.Width && height == this.Height)
            {
                this.<#=method.Name#>IP();
            }
            else
            {
                this.ValidateArea(x, y, width, height);
                int stride1 = this.Stride1;
                int count = width * this.BitsPerPixel;
                ulong[] bits = this.Bits;

                for (int i = 0, off = (y * stride1) + (x * this.BitsPerPixel); i < height; i++, off += stride1)
                {
<#            switch (method.Name) {
                case "SetToMax":
#>
                    BitUtils.SetBits(count, bits, off);
<#
                    break;
                case "SetToMin":
#>
                    BitUtils.ResetBits(count, bits, off);
<#
                    break;
                case "SetWhite":
#>
                    if (this.BitsPerPixel == 1)
                    {
                        BitUtils.ResetBits(count, bits, off);
                    }
                    else
                    {
                        BitUtils.SetBits(count, bits, off);
                    }
<#
                    break;
                case "SetBlack":
#>
                    if (this.BitsPerPixel == 1)
                    {
                        BitUtils.SetBits(count, bits, off);
                    }
                    else
                    {
                        BitUtils.ResetBits(count, bits, off);
                    }
<#
                    break;
            }
#>
                }
            }
<#        }#>
        }

        /// <summary>
        /// <#=method.SummaryArea#> in-place.
        /// </summary>
        /// <param name="rect">The width, height, and location of the area.</param>
        /// <remarks>
        /// <#=method.Remarks#>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The rectangular area described by <paramref name="rect"/> is outside of this <see cref="Image"/> bounds.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void <#=method.Name#>IP(Rectangle rect) => this.<#=method.Name#>IP(rect.X, rect.Y, rect.Width, rect.Height);
<#
    }
#>
	}
}

<#+
    class MethodDescriptor
    {
        public MethodDescriptor()
        {
            this.Remarks = string.Empty;
        }

        public string Name { get; set; }
        public string Summary { get; set; }
        public string Returns { get; set; }
        public string SummaryArea { get; set; }
        public string ReturnsArea { get; set; }
        public string Remarks { get; set; }
    }
#>
