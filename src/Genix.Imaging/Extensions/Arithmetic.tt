<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
// -----------------------------------------------------------------------
// <copyright file="Arithmetic.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

<#
    MethodDescriptor[] methods = new MethodDescriptor[]
    {
        new MethodDescriptor()
        {
            Name = "Add",
            NativeName = "_add",
            Summary = "Adds pixel values of two images",
            Remarks = "<para>This method adds corresponding pixel values of two images and places the results in a destination image.</para>",
        },
        new MethodDescriptor()
        {
            Name = "Sub",
            NativeName = "_sub",
            Summary = "Subtracts pixel values of two images",
            Remarks = "<para>This method subtracts corresponding pixel values of two images and places the results in a destination image.</para>",
        },
    };
#>

namespace Genix.Imaging
{
    using System;
    using System.Globalization;
    using System.Runtime.InteropServices;
    using System.Security;

    public partial class Image
    {
<#  foreach (MethodDescriptor method in methods) { #>

        /// <summary>
        /// <#=method.Summary#> not-in-place.
        /// </summary>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// A new destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <#=method.Remarks#>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// The images have a different depth.
        /// The <see cref="Image{T}.BitsPerPixel"/> properties of this <see cref="Image"/> and <paramref name="src"/> are not the same.
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// The <see cref="Image{T}.BitsPerPixel"/> is not 8, 24, or 32.
        /// </exception>
        public Image <#=method.Name#>(Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {
<#      if (method.Name == "Add") { #>
                case 1:
                    return this.Or(src);
<#      } else if (method.Name == "Sub") { #>
                case 1:
                    return this.Xand(src);
<#      } #>

                case 8:
                case 24:
                case 32:
                    Image dst = this.Clone(false);
                    NativeMethods.<#=method.NativeName#>(
                        this.BitsPerPixel,
                        Core.MinMax.Min(this.Width, src.Width),
                        Core.MinMax.Min(this.Height, src.Height),
                        this.Bits,
                        this.Stride8,
                        src.Bits,
                        src.Stride8,
                        dst.Bits,
                        dst.Stride8,
                        scaleFactor);
                    return dst;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }
        }

        /// <summary>
        /// <#=method.Summary#> in-place.
        /// </summary>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <#=method.Remarks#>
        /// <para>
        /// <paramref name="src"/> and this <see cref="Image"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// The images have a different depth.
        /// The <see cref="Image{T}.BitsPerPixel"/> properties of <paramref name="src"/> and this <see cref="Image"/> are not the same.
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// The <see cref="Image{T}.BitsPerPixel"/> is not 8, 24, or 32.
        /// </exception>
        public void <#=method.Name#>IP(Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (src.BitsPerPixel != this.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {
<#      if (method.Name == "Add") { #>
                case 1:
                    this.OrIP(src);
                    break;
<#      } else if (method.Name == "Sub") { #>
                case 1:
                    this.XandIP(src);
                    break;
<#      } #>

                case 8:
                case 24:
                case 32:
                    NativeMethods.<#=method.NativeName#>(
                        this.BitsPerPixel,
                        Core.MinMax.Min(src.Width, this.Width),
                        Core.MinMax.Min(src.Height, this.Height),
                        src.Bits,
                        src.Stride8,
                        null,
                        0,
                        this.Bits,
                        this.Stride8,
                        scaleFactor);
                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }
        }
<#  } #>

        [SuppressUnmanagedCodeSecurity]
        private static partial class NativeMethods
        {
<#  foreach (MethodDescriptor method in methods) { #>

            [DllImport(NativeMethods.DllName)]
            public static extern int <#=method.NativeName#>(
                int bitsPerPixel,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                [In] ulong[] src2,
                int src2step,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);
<#  } #>
        }
    }
}

<#+
	class MethodDescriptor
	{
		public string Name { get; set; }
		public string NativeName { get; set; }
		public string Summary { get; set; }
		public string Remarks { get; set; }
	}
#>