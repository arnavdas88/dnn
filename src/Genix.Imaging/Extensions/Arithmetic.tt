<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
// -----------------------------------------------------------------------
// <copyright file="Arithmetic.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

<#
    MethodDescriptor[] methodsWithConstant = new MethodDescriptor[]
    {
        new MethodDescriptor()
        {
            Name = "AddC",
            NativeName = "_addc",
            Summary = "Adds a constant to pixel values of this <see cref=\"Image\"/>.",
            SummaryArea = "Adds a constant to a rectangular block of pixels values of this <see cref=\"Image\"/>.",
            Remarks = 
                "<para>This method changes the image intensity by adding value to image pixel values.</para>" +
                "<para>For gray (8bpp) images, a positive value brightens the image (increases the intensity); a negative value darkens the image (decreases the intensity).</para>" +
                "<para>" +
                "For color (24bpp and 32bpp) images, the color components are added to pixel channel values. " +
                "In this case, the <paramref name=\"value\"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. " +
                "The alpha channel is not affected by this method." +
                "</para>",
        },
        new MethodDescriptor()
        {
            Name = "SubC",
            NativeName = "_subc",
            Summary = "Subtracts a constant from pixel values of this <see cref=\"Image\"/>.",
            SummaryArea = "Subtracts a constant from a rectangular block of pixels values of this <see cref=\"Image\"/>.",
            Remarks = 
                "<para>This method changes the image intensity by subtracting value from image pixel values.</para>" +
                "<para>For gray (8bpp) images, a positive value darkens the image (decreases the intensity); a negative value brightens the image (increases the intensity).</para>" +
                "<para>" +
                "For color (24bpp and 32bpp) images, the color components are subtracted from pixel channel values. " +
                "In this case, the <paramref name=\"value\"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. " +
                "The alpha channel is not affected by this method." +
                "</para>",
        },
        new MethodDescriptor()
        {
            Name = "MulC",
            NativeName = "_mulc",
            Summary = "Multiplies pixel values of this <see cref=\"Image\"/> by a constant.",
            SummaryArea = "Multiplies a rectangular block of pixels values of this <see cref=\"Image\"/> by a constant.",
            Remarks = 
                "<para>This method changes the image intensity by multiplying image pixel values by a value.</para>" +
                "<para>" +
                "For color (24bpp and 32bpp) images, the pixel channel values are multiplied by color components. " +
                "In this case, the <paramref name=\"value\"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. " +
                "The alpha channel is not affected by this method." +
                "</para>",
        },
        new MethodDescriptor()
        {
            Name = "DivC",
            NativeName = "_divc",
            Summary = "Divides pixel values of this <see cref=\"Image\"/> by a constant.",
            SummaryArea = "Divides a rectangular block of pixels values of this <see cref=\"Image\"/> by a constant.",
            Remarks = 
                "<para>This method changes the image intensity by dividing image pixel values by a value.</para>" +
                "<para>" +
                "For color (24bpp and 32bpp) images, the pixel channel values are multiplied by color components. " +
                "In this case, the <paramref name=\"value\"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. " +
                "The alpha channel is not affected by this method." +
                "</para>",
        },
    };

    MethodDescriptor[] methods = new MethodDescriptor[]
    {
        new MethodDescriptor()
        {
            Name = "Add",
            NativeName = "_add",
            Summary = "Adds pixel values of two images.",
            Remarks = "<para>This method adds corresponding pixel values of <paramref name=\"src\"/> to this <see cref=\"Image\"/> and places the results in a destination image.</para>",
        },
        new MethodDescriptor()
        {
            Name = "Sub",
            NativeName = "_sub",
            Summary = "Subtracts pixel values of two images.",
            Remarks = "<para>This method subtracts corresponding pixel values of <paramref name=\"src\"/> from this <see cref=\"Image\"/> and places the results in a destination image.</para>",
        },
        new MethodDescriptor()
        {
            Name = "Mul",
            NativeName = "_mul",
            Summary = "Multiplies pixel values of two images.",
            Remarks = "<para>This method multiplies corresponding pixel values of <paramref name=\"src\"/> by this <see cref=\"Image\"/> and places the results in a destination image.</para>",
        },
        new MethodDescriptor()
        {
            Name = "Div",
            NativeName = "_div",
            Summary = "Divides pixel values of two images.",
            Remarks = "<para>This method divides corresponding pixel values of this <see cref=\"Image\"/> by <paramref name=\"src\"/> and places the results in a destination image.</para>",
        },
    };
#>

namespace Genix.Imaging
{
    using System;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;
    using Genix.Drawing;

    public partial class Image
    {
<#  foreach (MethodDescriptor method in methodsWithConstant) { #>

        /// <summary>
        /// <#=method.Summary#>
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <#=method.Remarks#>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public Image <#=method.Name#>(Image dst, uint value, int scaleFactor)
        {
            return this.AddC(dst, 0, 0, this.Width, this.Height, value, scaleFactor);
        }

        /// <summary>
        /// <#=method.SummaryArea#>
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <#=method.Remarks#>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [CLSCompliant(false)]
        public Image <#=method.Name#>(Image dst, int x, int y, int width, int height, uint value, int scaleFactor)
        {
            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            this.ValidateArea(x, y, width, height);

            if (dst == this)
            {
                // in-place operation
                NativeMethods.<#=method.NativeName#>(
                    dst.BitsPerPixel,
                    x,
                    y,
                    width,
                    height,
                    null,
                    0,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }
            else
            {
                // not in-place operation
                if (x == 0 && y == 0 && width == this.Width && height == this.Height)
                {
                    dst = this.CreateTemplate(dst, this.BitsPerPixel);
                }
                else
                {
                    dst = this.Copy(dst);
                }

                NativeMethods.<#=method.NativeName#>(
                    dst.BitsPerPixel,
                    x,
                    y,
                    width,
                    height,
                    this.Bits,
                    this.Stride8,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }

            return dst;
        }

        /// <summary>
        /// <#=method.SummaryArea#>
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="area">The width, height, and location of the area.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <#=method.Remarks#>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public Image <#=method.Name#>(Image dst, Rectangle area, uint value, int scaleFactor)
        {
            return this.<#=method.Name#>(dst, area.X, area.Y, area.Width, area.Height, value, scaleFactor);
        }
<#  }#>
<#  foreach (MethodDescriptor method in methods) { #>

        /// <summary>
        /// <#=method.Summary#>
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <#=method.Remarks#>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image <#=method.Name#>(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {
<#      if (method.Name == "Add") { #>
                case 1:
                    dst = this.Or(dst, src);
                    break;
<#      } else if (method.Name == "Sub") { #>
                case 1:
                    dst = this.Xand(dst, src);
                    break;
<#      } #>

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods.<#=method.NativeName#>(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            null,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods.<#=method.NativeName#>(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            src.Bits,
                            src.Stride8,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }
<#  } #>

        [SuppressUnmanagedCodeSecurity]
        private static partial class NativeMethods
        {
<#  foreach (MethodDescriptor method in methodsWithConstant) { #>

            [DllImport(NativeMethods.DllName)]
            public static extern int <#=method.NativeName#>(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src,
                int srcstep,
                uint value,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);
<#  } #>
<#  foreach (MethodDescriptor method in methods) { #>

            [DllImport(NativeMethods.DllName)]
            public static extern int <#=method.NativeName#>(
                int bitsPerPixel,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                [In] ulong[] src2,
                int src2step,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);
<#  } #>
        }
    }
}

<#+
	class MethodDescriptor
	{
		public string Name { get; set; }
		public string NativeName { get; set; }
		public string Summary { get; set; }
		public string SummaryArea { get; set; }
		public string Remarks { get; set; }
	}
#>