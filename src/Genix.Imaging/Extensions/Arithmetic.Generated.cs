// -----------------------------------------------------------------------
// <copyright file="Arithmetic.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 10/7/2018 6:48:08 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Genix.Imaging
{
    using System;
    using System.Globalization;
    using System.Runtime.InteropServices;
    using System.Security;

    public partial class Image
    {

        /// <summary>
        /// Adds pixel values of two images.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method adds corresponding pixel values of <paramref name="src"/> to this <see cref="Image"/> and places the results in a destination image.</para>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image Add(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {
                case 1:
                    dst = this.Or(dst, src);
                    break;

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods._add(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            null,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods._add(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            src.Bits,
                            src.Stride8,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }

        /// <summary>
        /// Subtracts pixel values of two images.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method subtracts corresponding pixel values of <paramref name="src"/> from this <see cref="Image"/> and places the results in a destination image.</para>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image Sub(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {
                case 1:
                    dst = this.Xand(dst, src);
                    break;

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods._sub(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            null,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods._sub(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            src.Bits,
                            src.Stride8,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }

        /// <summary>
        /// Multiplies pixel values of two images.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method multiplies corresponding pixel values of <paramref name="src"/> by this <see cref="Image"/> and places the results in a destination image.</para>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image Mul(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods._mul(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            null,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods._mul(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            src.Bits,
                            src.Stride8,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }

        /// <summary>
        /// Divides pixel values of two images.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method divides corresponding pixel values of this <see cref="Image"/> by <paramref name="src"/> and places the results in a destination image.</para>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image Div(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods._div(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            null,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods._div(
                            this.BitsPerPixel,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            src.Bits,
                            src.Stride8,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }

        [SuppressUnmanagedCodeSecurity]
        private static partial class NativeMethods
        {

            [DllImport(NativeMethods.DllName)]
            public static extern int _add(
                int bitsPerPixel,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                [In] ulong[] src2,
                int src2step,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _sub(
                int bitsPerPixel,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                [In] ulong[] src2,
                int src2step,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _mul(
                int bitsPerPixel,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                [In] ulong[] src2,
                int src2step,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _div(
                int bitsPerPixel,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                [In] ulong[] src2,
                int src2step,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);
        }
    }
}

