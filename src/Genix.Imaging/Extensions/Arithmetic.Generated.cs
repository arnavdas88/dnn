// -----------------------------------------------------------------------
// <copyright file="Arithmetic.Generated.cs" company="Noname, Inc.">
// Copyright (c) 2018, Alexander Volgunin. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 11/6/2018 8:48:05 AM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Genix.Imaging
{
    using System;
    using System.Globalization;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Security;
    using Genix.Drawing;

    public partial class Image
    {

        /// <summary>
        /// Adds a constant to pixel values of this <see cref="Image"/>.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method changes the image intensity by adding value to image pixel values.</para><para>For gray (8bpp) images, a positive value brightens the image (increases the intensity); a negative value darkens the image (decreases the intensity).</para><para>For color (24bpp and 32bpp) images, the color components are added to pixel channel values. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public Image AddC(Image dst, uint value, int scaleFactor)
        {
            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            if (dst == this)
            {
                // in-place operation
                NativeMethods._addc(
                    this.BitsPerPixel,
                    0,
                    0,
                    this.Width,
                    this.Height,
                    null,
                    0,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }
            else
            {
                // not in-place operation
                dst = this.Copy(dst, false);

                NativeMethods._addc(
                    this.BitsPerPixel,
                    0,
                    0,
                    this.Width,
                    this.Height,
                    this.Bits,
                    this.Stride8,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }

            return dst;
        }

        /// <summary>
        /// Adds a constant to a rectangular block of pixels values of source image and puts results into this <see cref="Image"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <param name="src">The source <see cref="Image"/>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method changes the image intensity by adding value to image pixel values.</para><para>For gray (8bpp) images, a positive value brightens the image (increases the intensity); a negative value darkens the image (decreases the intensity).</para><para>For color (24bpp and 32bpp) images, the color components are added to pixel channel values. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [CLSCompliant(false)]
        public void AddC(int x, int y, int width, int height, Image src, uint value, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            this.ValidateArea(x, y, width, height);
            src.ValidateArea(x, y, width, height);

            NativeMethods._addc(
                this.BitsPerPixel,
                x,
                y,
                width,
                height,
                src.Bits,
                src.Stride8,
                value,
                this.Bits,
                this.Stride8,
                scaleFactor);
        }

        /// <summary>
        /// Adds a constant to a rectangular block of pixels values of source image and puts results into this <see cref="Image"/>.
        /// </summary>
        /// <param name="area">The width, height, and location of the area.</param>
        /// <param name="src">The source <see cref="Image"/>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method changes the image intensity by adding value to image pixel values.</para><para>For gray (8bpp) images, a positive value brightens the image (increases the intensity); a negative value darkens the image (decreases the intensity).</para><para>For color (24bpp and 32bpp) images, the color components are added to pixel channel values. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="area"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public void AddC(Rectangle area, Image src, uint value, int scaleFactor)
        {
            this.AddC(area.X, area.Y, area.Width, area.Height, src, value, scaleFactor);
        }

        /// <summary>
        /// Subtracts a constant from pixel values of this <see cref="Image"/>.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method changes the image intensity by subtracting value from image pixel values.</para><para>For gray (8bpp) images, a positive value darkens the image (decreases the intensity); a negative value brightens the image (increases the intensity).</para><para>For color (24bpp and 32bpp) images, the color components are subtracted from pixel channel values. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public Image SubC(Image dst, uint value, int scaleFactor)
        {
            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            if (dst == this)
            {
                // in-place operation
                NativeMethods._subc(
                    this.BitsPerPixel,
                    0,
                    0,
                    this.Width,
                    this.Height,
                    null,
                    0,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }
            else
            {
                // not in-place operation
                dst = this.Copy(dst, false);

                NativeMethods._subc(
                    this.BitsPerPixel,
                    0,
                    0,
                    this.Width,
                    this.Height,
                    this.Bits,
                    this.Stride8,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }

            return dst;
        }

        /// <summary>
        /// Subtracts a constant from a rectangular block of pixels values of source image and puts results into this <see cref="Image"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <param name="src">The source <see cref="Image"/>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method changes the image intensity by subtracting value from image pixel values.</para><para>For gray (8bpp) images, a positive value darkens the image (decreases the intensity); a negative value brightens the image (increases the intensity).</para><para>For color (24bpp and 32bpp) images, the color components are subtracted from pixel channel values. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [CLSCompliant(false)]
        public void SubC(int x, int y, int width, int height, Image src, uint value, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            this.ValidateArea(x, y, width, height);
            src.ValidateArea(x, y, width, height);

            NativeMethods._subc(
                this.BitsPerPixel,
                x,
                y,
                width,
                height,
                src.Bits,
                src.Stride8,
                value,
                this.Bits,
                this.Stride8,
                scaleFactor);
        }

        /// <summary>
        /// Subtracts a constant from a rectangular block of pixels values of source image and puts results into this <see cref="Image"/>.
        /// </summary>
        /// <param name="area">The width, height, and location of the area.</param>
        /// <param name="src">The source <see cref="Image"/>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method changes the image intensity by subtracting value from image pixel values.</para><para>For gray (8bpp) images, a positive value darkens the image (decreases the intensity); a negative value brightens the image (increases the intensity).</para><para>For color (24bpp and 32bpp) images, the color components are subtracted from pixel channel values. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="area"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public void SubC(Rectangle area, Image src, uint value, int scaleFactor)
        {
            this.SubC(area.X, area.Y, area.Width, area.Height, src, value, scaleFactor);
        }

        /// <summary>
        /// Multiplies pixel values of this <see cref="Image"/> by a constant.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method changes the image intensity by multiplying image pixel values by a value.</para><para>For color (24bpp and 32bpp) images, the pixel channel values are multiplied by color components. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public Image MulC(Image dst, uint value, int scaleFactor)
        {
            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            if (dst == this)
            {
                // in-place operation
                NativeMethods._mulc(
                    this.BitsPerPixel,
                    0,
                    0,
                    this.Width,
                    this.Height,
                    null,
                    0,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }
            else
            {
                // not in-place operation
                dst = this.Copy(dst, false);

                NativeMethods._mulc(
                    this.BitsPerPixel,
                    0,
                    0,
                    this.Width,
                    this.Height,
                    this.Bits,
                    this.Stride8,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }

            return dst;
        }

        /// <summary>
        /// Multiplies a rectangular block of pixels values of source image by a constant and puts results into  this <see cref="Image"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <param name="src">The source <see cref="Image"/>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method changes the image intensity by multiplying image pixel values by a value.</para><para>For color (24bpp and 32bpp) images, the pixel channel values are multiplied by color components. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [CLSCompliant(false)]
        public void MulC(int x, int y, int width, int height, Image src, uint value, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            this.ValidateArea(x, y, width, height);
            src.ValidateArea(x, y, width, height);

            NativeMethods._mulc(
                this.BitsPerPixel,
                x,
                y,
                width,
                height,
                src.Bits,
                src.Stride8,
                value,
                this.Bits,
                this.Stride8,
                scaleFactor);
        }

        /// <summary>
        /// Multiplies a rectangular block of pixels values of source image by a constant and puts results into  this <see cref="Image"/>.
        /// </summary>
        /// <param name="area">The width, height, and location of the area.</param>
        /// <param name="src">The source <see cref="Image"/>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method changes the image intensity by multiplying image pixel values by a value.</para><para>For color (24bpp and 32bpp) images, the pixel channel values are multiplied by color components. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="area"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public void MulC(Rectangle area, Image src, uint value, int scaleFactor)
        {
            this.MulC(area.X, area.Y, area.Width, area.Height, src, value, scaleFactor);
        }

        /// <summary>
        /// Divides pixel values of this <see cref="Image"/> by a constant.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method changes the image intensity by dividing image pixel values by a value.</para><para>For color (24bpp and 32bpp) images, the pixel channel values are multiplied by color components. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public Image DivC(Image dst, uint value, int scaleFactor)
        {
            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            if (dst == this)
            {
                // in-place operation
                NativeMethods._divc(
                    this.BitsPerPixel,
                    0,
                    0,
                    this.Width,
                    this.Height,
                    null,
                    0,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }
            else
            {
                // not in-place operation
                dst = this.Copy(dst, false);

                NativeMethods._divc(
                    this.BitsPerPixel,
                    0,
                    0,
                    this.Width,
                    this.Height,
                    this.Bits,
                    this.Stride8,
                    value,
                    dst.Bits,
                    dst.Stride8,
                    scaleFactor);
            }

            return dst;
        }

        /// <summary>
        /// Divides a rectangular block of pixels values of source image by a constant and puts results into this <see cref="Image"/>.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the area.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the area.</param>
        /// <param name="width">The width of the area.</param>
        /// <param name="height">The height of the area.</param>
        /// <param name="src">The source <see cref="Image"/>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method changes the image intensity by dividing image pixel values by a value.</para><para>For color (24bpp and 32bpp) images, the pixel channel values are multiplied by color components. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [CLSCompliant(false)]
        public void DivC(int x, int y, int width, int height, Image src, uint value, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != 8 && this.BitsPerPixel != 24 && this.BitsPerPixel != 32)
            {
                throw new NotSupportedException(string.Format(
                    CultureInfo.InvariantCulture,
                    Properties.Resources.E_UnsupportedDepth,
                    this.BitsPerPixel));
            }

            this.ValidateArea(x, y, width, height);
            src.ValidateArea(x, y, width, height);

            NativeMethods._divc(
                this.BitsPerPixel,
                x,
                y,
                width,
                height,
                src.Bits,
                src.Stride8,
                value,
                this.Bits,
                this.Stride8,
                scaleFactor);
        }

        /// <summary>
        /// Divides a rectangular block of pixels values of source image by a constant and puts results into this <see cref="Image"/>.
        /// </summary>
        /// <param name="area">The width, height, and location of the area.</param>
        /// <param name="src">The source <see cref="Image"/>.</param>
        /// <param name="value">The constant value.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method changes the image intensity by dividing image pixel values by a value.</para><para>For color (24bpp and 32bpp) images, the pixel channel values are multiplied by color components. In this case, the <paramref name="value"/> should contain three color components (blue, green, and red) ordered from least- to- most-significant byte. The alpha channel is affected by this method.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="area"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [CLSCompliant(false)]
        public void DivC(Rectangle area, Image src, uint value, int scaleFactor)
        {
            this.DivC(area.X, area.Y, area.Width, area.Height, src, value, scaleFactor);
        }

        /// <summary>
        /// Adds pixel values of two images with equal depth and returns a combined image.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method adds corresponding pixel values of <paramref name="src"/> to this <see cref="Image"/> and places the results in a destination image.</para>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image Add(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {
                case 1:
                    dst = this.Or(dst, src);
                    break;

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods._add(
                            this.BitsPerPixel,
                            0,
                            0,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            0,
                            0,
                            null,
                            0,
                            0,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods._add(
                            this.BitsPerPixel,
                            0,
                            0,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            0,
                            0,
                            src.Bits,
                            src.Stride8,
                            0,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }

        /// <summary>
        /// Adds a rectangular block of pixels values of two images.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the destination rectangle.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the destination rectangle.</param>
        /// <param name="width">The width of the source and destination rectangles.</param>
        /// <param name="height">The height of the source and destination rectangles.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="xsrc">The x-coordinate of the upper-left corner of the source rectangle.</param>
        /// <param name="ysrc">The y-coordinate of the upper-left corner of the source rectangle.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method adds corresponding pixel values of <paramref name="src"/> to this <see cref="Image"/>.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="xsrc"/>, <paramref name="ysrc"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public void Add(int x, int y, int width, int height, Image src, int xsrc, int ysrc, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            if (this.BitsPerPixel == 1)
            {
                this.Or(x, y, width, height, src, xsrc, ysrc);
                return;
            }

            this.ValidateArea(x, y, width, height);
            src.ValidateArea(xsrc, ysrc, width, height);

            switch (this.BitsPerPixel)
            {
                case 8:
                case 24:
                case 32:
                    NativeMethods._add(
                        this.BitsPerPixel,
                        x,
                        y,
                        width,
                        height,
                        src.Bits,
                        src.Stride8,
                        xsrc,
                        ysrc,
                        null,
                        0,
                        0,
                        0,
                        this.Bits,
                        this.Stride8,
                        scaleFactor);
                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }
        }

        /// <summary>
        /// Adds a rectangular block of pixels values of two images.
        /// </summary>
        /// <param name="area">The width, height, and location of the destination rectangle.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="origin">The coordinates, in pixels, of the upper-left corner of the source rectangle.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method adds corresponding pixel values of <paramref name="src"/> to this <see cref="Image"/>.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="origin"/> and <paramref name="area"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Add(Rectangle area, Image src, Point origin, int scaleFactor)
        {
            this.Add(area.X, area.Y, area.Width, area.Height, src, origin.X, origin.Y, scaleFactor);
        }

        /// <summary>
        /// Subtracts pixel values of two images with equal depth and returns a combined image.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method subtracts corresponding pixel values of <paramref name="src"/> from this <see cref="Image"/> and places the results in a destination image.</para>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image Sub(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {
                case 1:
                    dst = this.Xand(dst, src);
                    break;

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods._sub(
                            this.BitsPerPixel,
                            0,
                            0,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            0,
                            0,
                            null,
                            0,
                            0,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods._sub(
                            this.BitsPerPixel,
                            0,
                            0,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            0,
                            0,
                            src.Bits,
                            src.Stride8,
                            0,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }

        /// <summary>
        /// Subtracts a rectangular block of pixels values of two images.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the destination rectangle.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the destination rectangle.</param>
        /// <param name="width">The width of the source and destination rectangles.</param>
        /// <param name="height">The height of the source and destination rectangles.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="xsrc">The x-coordinate of the upper-left corner of the source rectangle.</param>
        /// <param name="ysrc">The y-coordinate of the upper-left corner of the source rectangle.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method subtracts corresponding pixel values of <paramref name="src"/> from this <see cref="Image"/>.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="xsrc"/>, <paramref name="ysrc"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public void Sub(int x, int y, int width, int height, Image src, int xsrc, int ysrc, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            if (this.BitsPerPixel == 1)
            {
                this.Xand(x, y, width, height, src, xsrc, ysrc);
                return;
            }

            this.ValidateArea(x, y, width, height);
            src.ValidateArea(xsrc, ysrc, width, height);

            switch (this.BitsPerPixel)
            {
                case 8:
                case 24:
                case 32:
                    NativeMethods._sub(
                        this.BitsPerPixel,
                        x,
                        y,
                        width,
                        height,
                        src.Bits,
                        src.Stride8,
                        xsrc,
                        ysrc,
                        null,
                        0,
                        0,
                        0,
                        this.Bits,
                        this.Stride8,
                        scaleFactor);
                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }
        }

        /// <summary>
        /// Subtracts a rectangular block of pixels values of two images.
        /// </summary>
        /// <param name="area">The width, height, and location of the destination rectangle.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="origin">The coordinates, in pixels, of the upper-left corner of the source rectangle.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method subtracts corresponding pixel values of <paramref name="src"/> from this <see cref="Image"/>.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="origin"/> and <paramref name="area"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Sub(Rectangle area, Image src, Point origin, int scaleFactor)
        {
            this.Sub(area.X, area.Y, area.Width, area.Height, src, origin.X, origin.Y, scaleFactor);
        }

        /// <summary>
        /// Multiplies pixel values of two images with equal depth and returns a combined image.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method multiplies corresponding pixel values of <paramref name="src"/> by this <see cref="Image"/> and places the results in a destination image.</para>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image Mul(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods._mul(
                            this.BitsPerPixel,
                            0,
                            0,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            0,
                            0,
                            null,
                            0,
                            0,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods._mul(
                            this.BitsPerPixel,
                            0,
                            0,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            0,
                            0,
                            src.Bits,
                            src.Stride8,
                            0,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }

        /// <summary>
        /// Multiplies a rectangular block of pixels values of two images.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the destination rectangle.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the destination rectangle.</param>
        /// <param name="width">The width of the source and destination rectangles.</param>
        /// <param name="height">The height of the source and destination rectangles.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="xsrc">The x-coordinate of the upper-left corner of the source rectangle.</param>
        /// <param name="ysrc">The y-coordinate of the upper-left corner of the source rectangle.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method multiplies corresponding pixel values of <paramref name="src"/> by this <see cref="Image"/>.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="xsrc"/>, <paramref name="ysrc"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public void Mul(int x, int y, int width, int height, Image src, int xsrc, int ysrc, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }


            this.ValidateArea(x, y, width, height);
            src.ValidateArea(xsrc, ysrc, width, height);

            switch (this.BitsPerPixel)
            {
                case 8:
                case 24:
                case 32:
                    NativeMethods._mul(
                        this.BitsPerPixel,
                        x,
                        y,
                        width,
                        height,
                        src.Bits,
                        src.Stride8,
                        xsrc,
                        ysrc,
                        null,
                        0,
                        0,
                        0,
                        this.Bits,
                        this.Stride8,
                        scaleFactor);
                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }
        }

        /// <summary>
        /// Multiplies a rectangular block of pixels values of two images.
        /// </summary>
        /// <param name="area">The width, height, and location of the destination rectangle.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="origin">The coordinates, in pixels, of the upper-left corner of the source rectangle.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method multiplies corresponding pixel values of <paramref name="src"/> by this <see cref="Image"/>.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="origin"/> and <paramref name="area"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Mul(Rectangle area, Image src, Point origin, int scaleFactor)
        {
            this.Mul(area.X, area.Y, area.Width, area.Height, src, origin.X, origin.Y, scaleFactor);
        }

        /// <summary>
        /// Divides pixel values of two images with equal depth and returns a combined image.
        /// </summary>
        /// <param name="dst">The destination <see cref="Image"/>. Can be <b>null</b>.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <returns>
        /// The destination <see cref="Image"/>.
        /// </returns>
        /// <remarks>
        /// <para>This method divides corresponding pixel values of this <see cref="Image"/> by <paramref name="src"/> and places the results in a destination image.</para>
        /// <para>
        /// This <see cref="Image"/> and <paramref name="src"/> do not have to have the same width and height.
        /// If image sizes are different, the operation is performed in this <see cref="Image"/> upper-left corner.
        /// </para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// <para>If <paramref name="dst"/> is <b>null</b> the method creates new destination <see cref="Image"/> with dimensions of this <see cref="Image"/>.</para>
        /// <para>If <paramref name="dst"/> equals this <see cref="Image"/>, the operation is performed in-place.</para>
        /// <para>Conversely, the <paramref name="dst"/> is reallocated to the dimensions of this <see cref="Image"/>.</para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public Image Div(Image dst, Image src, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }

            switch (this.BitsPerPixel)
            {

                case 8:
                case 24:
                case 32:
                    if (dst == this)
                    {
                        // in-place operation
                        NativeMethods._div(
                            this.BitsPerPixel,
                            0,
                            0,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            src.Bits,
                            src.Stride8,
                            0,
                            0,
                            null,
                            0,
                            0,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }
                    else
                    {
                        dst = this.CreateTemplate(dst, this.BitsPerPixel);

                        NativeMethods._div(
                            this.BitsPerPixel,
                            0,
                            0,
                            Core.MinMax.Min(this.Width, src.Width),
                            Core.MinMax.Min(this.Height, src.Height),
                            this.Bits,
                            this.Stride8,
                            0,
                            0,
                            src.Bits,
                            src.Stride8,
                            0,
                            0,
                            dst.Bits,
                            dst.Stride8,
                            scaleFactor);
                    }

                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }

            return dst;
        }

        /// <summary>
        /// Divides a rectangular block of pixels values of two images.
        /// </summary>
        /// <param name="x">The x-coordinate of the upper-left corner of the destination rectangle.</param>
        /// <param name="y">The y-coordinate of the upper-left corner of the destination rectangle.</param>
        /// <param name="width">The width of the source and destination rectangles.</param>
        /// <param name="height">The height of the source and destination rectangles.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="xsrc">The x-coordinate of the upper-left corner of the source rectangle.</param>
        /// <param name="ysrc">The y-coordinate of the upper-left corner of the source rectangle.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method divides corresponding pixel values of this <see cref="Image"/> by <paramref name="src"/>.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="x"/>, <paramref name="y"/>, <paramref name="width"/> and <paramref name="height"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="xsrc"/>, <paramref name="ysrc"/>, <paramref name="width"/> and <paramref name="height"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        public void Div(int x, int y, int width, int height, Image src, int xsrc, int ysrc, int scaleFactor)
        {
            if (src == null)
            {
                throw new ArgumentNullException(nameof(src));
            }

            if (this.BitsPerPixel != src.BitsPerPixel)
            {
                throw new ArgumentException(Properties.Resources.E_DepthNotTheSame);
            }


            this.ValidateArea(x, y, width, height);
            src.ValidateArea(xsrc, ysrc, width, height);

            switch (this.BitsPerPixel)
            {
                case 8:
                case 24:
                case 32:
                    NativeMethods._div(
                        this.BitsPerPixel,
                        x,
                        y,
                        width,
                        height,
                        src.Bits,
                        src.Stride8,
                        xsrc,
                        ysrc,
                        null,
                        0,
                        0,
                        0,
                        this.Bits,
                        this.Stride8,
                        scaleFactor);
                    break;

                default:
                    throw new NotSupportedException(string.Format(
                        CultureInfo.InvariantCulture,
                        Properties.Resources.E_UnsupportedDepth,
                        this.BitsPerPixel));
            }
        }

        /// <summary>
        /// Divides a rectangular block of pixels values of two images.
        /// </summary>
        /// <param name="area">The width, height, and location of the destination rectangle.</param>
        /// <param name="src">The <see cref="Image"/> to add.</param>
        /// <param name="origin">The coordinates, in pixels, of the upper-left corner of the source rectangle.</param>
        /// <param name="scaleFactor">The scaling factor.</param>
        /// <remarks>
        /// <para>This method divides corresponding pixel values of this <see cref="Image"/> by <paramref name="src"/>.</para>
        /// <para>
        /// The scaling of a result is done by multiplying the output pixel values by 2^-<paramref name="scaleFactor"/> before the method returns.
        /// The result is rounded off to the nearest even integer number.
        /// </para>
        /// </remarks>
        /// <exception cref="ArgumentNullException">
        /// <para><paramref name="src"/> is <b>null</b>.</para>
        /// </exception>
        /// <exception cref="ArgumentException">
        /// <para>The depth of <paramref name="src"/> is not the same as the depth of this <see cref="Image"/>.</para>
        /// </exception>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <para>The rectangular area described by <paramref name="area"/> is outside of this <see cref="Image"/> bounds.</para>
        /// <para>-or-</para>
        /// <para>The rectangular area described by <paramref name="origin"/> and <paramref name="area"/> is outside of <paramref name="src"/> bounds.</para>
        /// </exception>
        /// <exception cref="NotSupportedException">
        /// <para>The depth of this <see cref="Image"/> is neither 1 nor 8 nor 24 nor 32 bits per pixel.</para>
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Div(Rectangle area, Image src, Point origin, int scaleFactor)
        {
            this.Div(area.X, area.Y, area.Width, area.Height, src, origin.X, origin.Y, scaleFactor);
        }

        [SuppressUnmanagedCodeSecurity]
        private static partial class NativeMethods
        {

            [DllImport(NativeMethods.DllName)]
            public static extern int _addc(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src,
                int srcstep,
                uint value,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _subc(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src,
                int srcstep,
                uint value,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _mulc(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src,
                int srcstep,
                uint value,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _divc(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src,
                int srcstep,
                uint value,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _add(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                int src1x,
                int src1y,
                [In] ulong[] src2,
                int src2step,
                int src2x,
                int src2y,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _sub(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                int src1x,
                int src1y,
                [In] ulong[] src2,
                int src2step,
                int src2x,
                int src2y,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _mul(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                int src1x,
                int src1y,
                [In] ulong[] src2,
                int src2step,
                int src2x,
                int src2y,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);

            [DllImport(NativeMethods.DllName)]
            public static extern int _div(
                int bitsPerPixel,
                int x,
                int y,
                int width,
                int height,
                [In] ulong[] src1,
                int src1step,
                int src1x,
                int src1y,
                [In] ulong[] src2,
                int src2step,
                int src2x,
                int src2y,
                [Out] ulong[] dst,
                int dststep,
                int scaleFactor);
        }
    }
}

