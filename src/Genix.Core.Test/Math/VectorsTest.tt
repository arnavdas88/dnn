<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core.Test
{
    using System;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    public partial class VectorsTest
    {
<#  foreach (string type in "sbyte;short;int;long;float;double".Split(';')) { #>
        [TestMethod]
        public void NegTest_<#=type#>()
        {
            const int offx = 5;
            const int offy = 10;

            foreach (int length in new[] { 24, 128 })
            {
                <#=type#>[] x0 = new <#=type#>[length];
                <#=type#>[] y0 = new <#=type#>[length];

                for (int i = 0; i < length; i++)
                {
                    x0[i] = (<#=type#>)i;
                    y0[i] = (<#=type#>)(i + 2);
                }

                // not-in-place
                <#=type#>[] y = y0.ToArray();
                int count = length - Math.Max(offx, offy) - 2;
                Vectors.Neg(count, x0, offx, y, offy);
                GenixAssert.AreArraysEqual(y0.Select((a, i) => i.Between(offy, offy + count - 1) ? (<#=type#>)-x0[i - offy + offx] : a).ToArray(), y);

                // in-place
                <#=type#>[] x = x0.ToArray();
                count = length - offx - 2;
                Vectors.Neg(count, x, offx);
                GenixAssert.AreArraysEqual(x0.Select((a, i) => i.Between(offx, offx + count - 1) ? (<#=type#>)-a : a).ToArray(), x);
            }
        }
<#  } #>
    }
}