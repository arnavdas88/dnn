//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: 11/28/2018 12:37:33 PM
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Core.Test
{
    using System;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
    public class TrigonometryTest_float
    {
        private readonly RandomNumberGenerator<float> random = new RandomGeneratorF();

        [TestMethod]
        public void SinTest_float()
        {
            const int offx = 5;
            const int offy = 10;

            foreach (int length in new[] { 24, 128 })
            {
                float[] x0 = this.random.Generate(length);
                float[] y0 = this.random.Generate(length);

                // not-in-place
                float[] y = y0.ToArray();
                int count = length - Math.Max(offx, offy) - 2;
                Trigonometry.Sin(count, x0, offx, y, offy);
                GenixAssert.AreArraysEqual(y0.Select((a, i) => i.Between(offy, offy + count - 1) ? (float)Math.Sin(x0[i - offy + offx]) : a).ToArray(), y);

                // in-place
                float[] x = x0.ToArray();
                count = length - offx - 2;
                Trigonometry.Sin(count, x, offx);
                GenixAssert.AreArraysEqual(x0.Select((a, i) => i.Between(offx, offx + count - 1) ? (float)Math.Sin(a) : a).ToArray(), x);
            }
        }

        [TestMethod]
        public void CosTest_float()
        {
            const int offx = 5;
            const int offy = 10;

            foreach (int length in new[] { 24, 128 })
            {
                float[] x0 = this.random.Generate(length);
                float[] y0 = this.random.Generate(length);

                // not-in-place
                float[] y = y0.ToArray();
                int count = length - Math.Max(offx, offy) - 2;
                Trigonometry.Cos(count, x0, offx, y, offy);
                GenixAssert.AreArraysEqual(y0.Select((a, i) => i.Between(offy, offy + count - 1) ? (float)Math.Cos(x0[i - offy + offx]) : a).ToArray(), y);

                // in-place
                float[] x = x0.ToArray();
                count = length - offx - 2;
                Trigonometry.Cos(count, x, offx);
                GenixAssert.AreArraysEqual(x0.Select((a, i) => i.Between(offx, offx + count - 1) ? (float)Math.Cos(a) : a).ToArray(), x);
            }
        }
    }

    [TestClass]
    public class TrigonometryTest_double
    {
        private readonly RandomNumberGenerator<double> random = new RandomGeneratorD();

        [TestMethod]
        public void SinTest_double()
        {
            const int offx = 5;
            const int offy = 10;

            foreach (int length in new[] { 24, 128 })
            {
                double[] x0 = this.random.Generate(length);
                double[] y0 = this.random.Generate(length);

                // not-in-place
                double[] y = y0.ToArray();
                int count = length - Math.Max(offx, offy) - 2;
                Trigonometry.Sin(count, x0, offx, y, offy);
                GenixAssert.AreArraysEqual(y0.Select((a, i) => i.Between(offy, offy + count - 1) ? (double)Math.Sin(x0[i - offy + offx]) : a).ToArray(), y);

                // in-place
                double[] x = x0.ToArray();
                count = length - offx - 2;
                Trigonometry.Sin(count, x, offx);
                GenixAssert.AreArraysEqual(x0.Select((a, i) => i.Between(offx, offx + count - 1) ? (double)Math.Sin(a) : a).ToArray(), x);
            }
        }

        [TestMethod]
        public void CosTest_double()
        {
            const int offx = 5;
            const int offy = 10;

            foreach (int length in new[] { 24, 128 })
            {
                double[] x0 = this.random.Generate(length);
                double[] y0 = this.random.Generate(length);

                // not-in-place
                double[] y = y0.ToArray();
                int count = length - Math.Max(offx, offy) - 2;
                Trigonometry.Cos(count, x0, offx, y, offy);
                GenixAssert.AreArraysEqual(y0.Select((a, i) => i.Between(offy, offy + count - 1) ? (double)Math.Cos(x0[i - offy + offx]) : a).ToArray(), y);

                // in-place
                double[] x = x0.ToArray();
                count = length - offx - 2;
                Trigonometry.Cos(count, x, offx);
                GenixAssert.AreArraysEqual(x0.Select((a, i) => i.Between(offx, offx + count - 1) ? (double)Math.Cos(a) : a).ToArray(), x);
            }
        }
    }
}