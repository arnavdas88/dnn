<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension="Generated.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//     Generated on: <#=System.DateTime.Now.ToString()#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. Re-run the T4 template to update this file.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Genix.Geometry.Test
{
    using System;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    public partial class RectangleTest
    {
<#
    Tuple<string, string>[] classes = 
    {
        Tuple.Create("int", ""),
        Tuple.Create("float", "F"),
        Tuple.Create("double", "D"),
    };

    foreach (Tuple<string, string> cls in classes)
    {
        string type = cls.Item1;
        string suffix = cls.Item2;
#>

        [TestMethod]
        public void CenterXTest_<#=type#>()
        {
            Rectangle<#=suffix#> rect = new Rectangle<#=suffix#>(0, 2, 7, 9);
            Assert.AreEqual((<#=type#>)3, rect.CenterX);

            rect = new Rectangle<#=suffix#>(0, 2, 8, 10);
<# if (type == "int") { #>
            Assert.AreEqual((<#=type#>)3, rect.CenterX);
<# } else { #>
            Assert.AreEqual((<#=type#>)3.5, rect.CenterX);
<# } #>
        }

        [TestMethod]
        public void CenterYTest_<#=type#>()
        {
            Rectangle<#=suffix#> rect = new Rectangle<#=suffix#>(0, 2, 7, 9);
            Assert.AreEqual((<#=type#>)6, rect.CenterY);

            rect = new Rectangle<#=suffix#>(0, 2, 8, 10);
<# if (type == "int") { #>
            Assert.AreEqual((<#=type#>)6, rect.CenterY);
<# } else { #>
            Assert.AreEqual((<#=type#>)6.5, rect.CenterY);
<# } #>
        }

        [TestMethod]
        public void CenterTest_<#=type#>()
        {
            Rectangle<#=suffix#> rect = new Rectangle<#=suffix#>(0, 2, 7, 9);
            Assert.AreEqual((<#=type#>)3, rect.CenterX);
            Assert.AreEqual((<#=type#>)6, rect.CenterY);

            rect = new Rectangle<#=suffix#>(0, 2, 8, 10);
<# if (type == "int") { #>
            Assert.AreEqual((<#=type#>)3, rect.CenterX);
            Assert.AreEqual((<#=type#>)6, rect.CenterY);
<# } else { #>
            Assert.AreEqual((<#=type#>)3.5, rect.CenterX);
            Assert.AreEqual((<#=type#>)6.5, rect.CenterY);
<# } #>
        }
<#  } #>
    }
}